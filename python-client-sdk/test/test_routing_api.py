# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from hyperswitch.api.routing_api import RoutingApi


class TestRoutingApi(unittest.TestCase):
    """RoutingApi unit test stubs"""

    def setUp(self) -> None:
        self.api = RoutingApi()

    def tearDown(self) -> None:
        pass

    def test_activate_a_routing_config(self) -> None:
        """Test case for activate_a_routing_config

        Routing - Activate config
        """
        pass

    def test_create_a_routing_config(self) -> None:
        """Test case for create_a_routing_config

        Routing - Create
        """
        pass

    def test_deactivate_a_routing_config(self) -> None:
        """Test case for deactivate_a_routing_config

        Routing - Deactivate
        """
        pass

    def test_list_routing_configs(self) -> None:
        """Test case for list_routing_configs

        Routing - List
        """
        pass

    def test_retrieve_a_routing_config(self) -> None:
        """Test case for retrieve_a_routing_config

        Routing - Retrieve
        """
        pass

    def test_retrieve_active_config(self) -> None:
        """Test case for retrieve_active_config

        Routing - Retrieve Config
        """
        pass

    def test_retrieve_default_configs_for_all_profiles(self) -> None:
        """Test case for retrieve_default_configs_for_all_profiles

        Routing - Retrieve Default For Profile
        """
        pass

    def test_retrieve_default_fallback_config(self) -> None:
        """Test case for retrieve_default_fallback_config

        Routing - Retrieve Default Config
        """
        pass

    def test_toggle_contract_routing_algorithm(self) -> None:
        """Test case for toggle_contract_routing_algorithm

        Routing - Toggle Contract routing for profile
        """
        pass

    def test_toggle_elimination_routing_algorithm(self) -> None:
        """Test case for toggle_elimination_routing_algorithm

        Routing - Toggle elimination routing for profile
        """
        pass

    def test_toggle_success_based_dynamic_routing_algorithm(self) -> None:
        """Test case for toggle_success_based_dynamic_routing_algorithm

        Routing - Toggle success based dynamic routing for profile
        """
        pass

    def test_update_contract_based_dynamic_routing_configs(self) -> None:
        """Test case for update_contract_based_dynamic_routing_configs

        Routing - Update contract based dynamic routing config for profile
        """
        pass

    def test_update_default_configs_for_all_profiles(self) -> None:
        """Test case for update_default_configs_for_all_profiles

        Routing - Update Default For Profile
        """
        pass

    def test_update_default_fallback_config(self) -> None:
        """Test case for update_default_fallback_config

        Routing - Update Default Config
        """
        pass

    def test_update_success_based_dynamic_routing_configs(self) -> None:
        """Test case for update_success_based_dynamic_routing_configs

        Routing - Update success based dynamic routing config for profile
        """
        pass


if __name__ == '__main__':
    unittest.main()

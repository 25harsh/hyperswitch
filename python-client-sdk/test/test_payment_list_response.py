# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from hyperswitch.models.payment_list_response import PaymentListResponse

class TestPaymentListResponse(unittest.TestCase):
    """PaymentListResponse unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> PaymentListResponse:
        """Test PaymentListResponse
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `PaymentListResponse`
        """
        model = PaymentListResponse()
        if include_optional:
            return PaymentListResponse(
                size = 0,
                data = [
                    hyperswitch.models.payments_response.PaymentsResponse(
                        payment_id = 'pay_mbabizu24mvu3mela5njyhpit4', 
                        merchant_id = 'merchant_1668273825', 
                        status = null, 
                        amount = 6540, 
                        net_amount = 6540, 
                        shipping_cost = 6540, 
                        amount_capturable = 6540, 
                        amount_received = 6540, 
                        connector = 'stripe', 
                        client_secret = 'pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo', 
                        created = '2022-09-10T10:11:12Z', 
                        currency = 'AED', 
                        customer_id = 'cus_y3oqhf46pyzuxjbcn2giaqnb44', 
                        customer = null, 
                        description = 'It's my first payment request', 
                        refunds = [
                            hyperswitch.models.refund_response.RefundResponse(
                                refund_id = '', 
                                payment_id = '', 
                                amount = 6540, 
                                currency = '', 
                                status = 'succeeded', 
                                reason = '', 
                                metadata = hyperswitch.models.metadata.metadata(), 
                                error_message = '', 
                                error_code = '', 
                                unified_code = '', 
                                unified_message = '', 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                connector = 'stripe', 
                                profile_id = '', 
                                merchant_connector_id = '', 
                                split_refunds = null, 
                                issuer_error_code = '', 
                                issuer_error_message = '', )
                            ], 
                        disputes = [
                            hyperswitch.models.dispute_response_payments_retrieve.DisputeResponsePaymentsRetrieve(
                                dispute_id = '', 
                                dispute_stage = 'pre_dispute', 
                                dispute_status = 'dispute_opened', 
                                connector_status = '', 
                                connector_dispute_id = '', 
                                connector_reason = '', 
                                connector_reason_code = '', 
                                challenge_required_by = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                connector_created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                connector_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        attempts = [
                            hyperswitch.models.payment_attempt_response.PaymentAttemptResponse(
                                attempt_id = '', 
                                status = 'started', 
                                amount = 6540, 
                                order_tax_amount = 6540, 
                                connector = '', 
                                error_message = '', 
                                payment_method = null, 
                                connector_transaction_id = '', 
                                capture_method = null, 
                                authentication_type = null, 
                                created_at = '2022-09-10T10:11:12Z', 
                                modified_at = '2022-09-10T10:11:12Z', 
                                cancellation_reason = '', 
                                mandate_id = '', 
                                error_code = '', 
                                payment_token = '', 
                                connector_metadata = null, 
                                payment_experience = null, 
                                payment_method_type = null, 
                                reference_id = '993672945374576J', 
                                unified_code = '', 
                                unified_message = '', 
                                client_source = '', 
                                client_version = '', )
                            ], 
                        captures = [
                            hyperswitch.models.capture_response.CaptureResponse(
                                capture_id = '', 
                                status = 'started', 
                                amount = 6540, 
                                connector = '', 
                                authorized_attempt_id = '', 
                                connector_capture_id = '', 
                                capture_sequence = 56, 
                                error_message = '', 
                                error_code = '', 
                                error_reason = '', 
                                reference_id = '', )
                            ], 
                        mandate_id = 'mandate_iwer89rnjef349dni3', 
                        mandate_data = null, 
                        setup_future_usage = null, 
                        off_session = True, 
                        capture_on = '2022-09-10T10:11:12Z', 
                        capture_method = null, 
                        payment_method = 'card', 
                        payment_method_data = null, 
                        payment_token = '187282ab-40ef-47a9-9206-5099ba31e432', 
                        shipping = null, 
                        billing = null, 
                        order_details = [{
        "product_name": "gillete creme",
        "quantity": 15,
        "amount" : 900
    }], 
                        email = 'johntest@test.com', 
                        name = 'John Test', 
                        phone = '9123456789', 
                        return_url = 'https://hyperswitch.io', 
                        authentication_type = null, 
                        statement_descriptor_name = 'Hyperswitch Router', 
                        statement_descriptor_suffix = 'Payment for shoes purchase', 
                        next_action = null, 
                        cancellation_reason = '', 
                        error_code = 'E0001', 
                        error_message = 'Failed while verifying the card', 
                        unified_code = '', 
                        unified_message = '', 
                        payment_experience = null, 
                        payment_method_type = null, 
                        connector_label = 'stripe_US_food', 
                        business_country = null, 
                        business_label = '', 
                        business_sub_label = '', 
                        allowed_payment_method_types = [
                            'ach'
                            ], 
                        ephemeral_key = null, 
                        manual_retry_allowed = True, 
                        connector_transaction_id = '993672945374576J', 
                        frm_message = null, 
                        metadata = hyperswitch.models.metadata.metadata(), 
                        connector_metadata = null, 
                        feature_metadata = null, 
                        reference_id = '993672945374576J', 
                        payment_link = null, 
                        profile_id = '', 
                        surcharge_details = null, 
                        attempt_count = 56, 
                        merchant_decision = '', 
                        merchant_connector_id = '', 
                        incremental_authorization_allowed = True, 
                        authorization_count = 56, 
                        incremental_authorizations = [
                            hyperswitch.models.incremental_authorization_response.IncrementalAuthorizationResponse(
                                authorization_id = '', 
                                amount = 6540, 
                                status = 'success', 
                                error_code = '', 
                                error_message = '', 
                                previously_authorized_amount = 56, )
                            ], 
                        external_authentication_details = null, 
                        external_3ds_authentication_attempted = True, 
                        expires_on = '2022-09-10T10:11:12Z', 
                        fingerprint = '', 
                        browser_info = null, 
                        payment_method_id = '', 
                        payment_method_status = null, 
                        updated = '2022-09-10T10:11:12Z', 
                        split_payments = null, 
                        frm_metadata = hyperswitch.models.frm_metadata.frm_metadata(), 
                        extended_authorization_applied = True, 
                        capture_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        merchant_order_reference_id = 'Custom_Order_id_123', 
                        order_tax_amount = null, 
                        connector_mandate_id = '', 
                        card_discovery = null, 
                        force_3ds_challenge = True, 
                        force_3ds_challenge_trigger = True, 
                        issuer_error_code = '', 
                        issuer_error_message = '', )
                    ]
            )
        else:
            return PaymentListResponse(
                size = 0,
                data = [
                    hyperswitch.models.payments_response.PaymentsResponse(
                        payment_id = 'pay_mbabizu24mvu3mela5njyhpit4', 
                        merchant_id = 'merchant_1668273825', 
                        status = null, 
                        amount = 6540, 
                        net_amount = 6540, 
                        shipping_cost = 6540, 
                        amount_capturable = 6540, 
                        amount_received = 6540, 
                        connector = 'stripe', 
                        client_secret = 'pay_U42c409qyHwOkWo3vK60_secret_el9ksDkiB8hi6j9N78yo', 
                        created = '2022-09-10T10:11:12Z', 
                        currency = 'AED', 
                        customer_id = 'cus_y3oqhf46pyzuxjbcn2giaqnb44', 
                        customer = null, 
                        description = 'It's my first payment request', 
                        refunds = [
                            hyperswitch.models.refund_response.RefundResponse(
                                refund_id = '', 
                                payment_id = '', 
                                amount = 6540, 
                                currency = '', 
                                status = 'succeeded', 
                                reason = '', 
                                metadata = hyperswitch.models.metadata.metadata(), 
                                error_message = '', 
                                error_code = '', 
                                unified_code = '', 
                                unified_message = '', 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                connector = 'stripe', 
                                profile_id = '', 
                                merchant_connector_id = '', 
                                split_refunds = null, 
                                issuer_error_code = '', 
                                issuer_error_message = '', )
                            ], 
                        disputes = [
                            hyperswitch.models.dispute_response_payments_retrieve.DisputeResponsePaymentsRetrieve(
                                dispute_id = '', 
                                dispute_stage = 'pre_dispute', 
                                dispute_status = 'dispute_opened', 
                                connector_status = '', 
                                connector_dispute_id = '', 
                                connector_reason = '', 
                                connector_reason_code = '', 
                                challenge_required_by = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                connector_created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                connector_updated_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                                created_at = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), )
                            ], 
                        attempts = [
                            hyperswitch.models.payment_attempt_response.PaymentAttemptResponse(
                                attempt_id = '', 
                                status = 'started', 
                                amount = 6540, 
                                order_tax_amount = 6540, 
                                connector = '', 
                                error_message = '', 
                                payment_method = null, 
                                connector_transaction_id = '', 
                                capture_method = null, 
                                authentication_type = null, 
                                created_at = '2022-09-10T10:11:12Z', 
                                modified_at = '2022-09-10T10:11:12Z', 
                                cancellation_reason = '', 
                                mandate_id = '', 
                                error_code = '', 
                                payment_token = '', 
                                connector_metadata = null, 
                                payment_experience = null, 
                                payment_method_type = null, 
                                reference_id = '993672945374576J', 
                                unified_code = '', 
                                unified_message = '', 
                                client_source = '', 
                                client_version = '', )
                            ], 
                        captures = [
                            hyperswitch.models.capture_response.CaptureResponse(
                                capture_id = '', 
                                status = 'started', 
                                amount = 6540, 
                                connector = '', 
                                authorized_attempt_id = '', 
                                connector_capture_id = '', 
                                capture_sequence = 56, 
                                error_message = '', 
                                error_code = '', 
                                error_reason = '', 
                                reference_id = '', )
                            ], 
                        mandate_id = 'mandate_iwer89rnjef349dni3', 
                        mandate_data = null, 
                        setup_future_usage = null, 
                        off_session = True, 
                        capture_on = '2022-09-10T10:11:12Z', 
                        capture_method = null, 
                        payment_method = 'card', 
                        payment_method_data = null, 
                        payment_token = '187282ab-40ef-47a9-9206-5099ba31e432', 
                        shipping = null, 
                        billing = null, 
                        order_details = [{
        "product_name": "gillete creme",
        "quantity": 15,
        "amount" : 900
    }], 
                        email = 'johntest@test.com', 
                        name = 'John Test', 
                        phone = '9123456789', 
                        return_url = 'https://hyperswitch.io', 
                        authentication_type = null, 
                        statement_descriptor_name = 'Hyperswitch Router', 
                        statement_descriptor_suffix = 'Payment for shoes purchase', 
                        next_action = null, 
                        cancellation_reason = '', 
                        error_code = 'E0001', 
                        error_message = 'Failed while verifying the card', 
                        unified_code = '', 
                        unified_message = '', 
                        payment_experience = null, 
                        payment_method_type = null, 
                        connector_label = 'stripe_US_food', 
                        business_country = null, 
                        business_label = '', 
                        business_sub_label = '', 
                        allowed_payment_method_types = [
                            'ach'
                            ], 
                        ephemeral_key = null, 
                        manual_retry_allowed = True, 
                        connector_transaction_id = '993672945374576J', 
                        frm_message = null, 
                        metadata = hyperswitch.models.metadata.metadata(), 
                        connector_metadata = null, 
                        feature_metadata = null, 
                        reference_id = '993672945374576J', 
                        payment_link = null, 
                        profile_id = '', 
                        surcharge_details = null, 
                        attempt_count = 56, 
                        merchant_decision = '', 
                        merchant_connector_id = '', 
                        incremental_authorization_allowed = True, 
                        authorization_count = 56, 
                        incremental_authorizations = [
                            hyperswitch.models.incremental_authorization_response.IncrementalAuthorizationResponse(
                                authorization_id = '', 
                                amount = 6540, 
                                status = 'success', 
                                error_code = '', 
                                error_message = '', 
                                previously_authorized_amount = 56, )
                            ], 
                        external_authentication_details = null, 
                        external_3ds_authentication_attempted = True, 
                        expires_on = '2022-09-10T10:11:12Z', 
                        fingerprint = '', 
                        browser_info = null, 
                        payment_method_id = '', 
                        payment_method_status = null, 
                        updated = '2022-09-10T10:11:12Z', 
                        split_payments = null, 
                        frm_metadata = hyperswitch.models.frm_metadata.frm_metadata(), 
                        extended_authorization_applied = True, 
                        capture_before = datetime.datetime.strptime('2013-10-20 19:20:30.00', '%Y-%m-%d %H:%M:%S.%f'), 
                        merchant_order_reference_id = 'Custom_Order_id_123', 
                        order_tax_amount = null, 
                        connector_mandate_id = '', 
                        card_discovery = null, 
                        force_3ds_challenge = True, 
                        force_3ds_challenge_trigger = True, 
                        issuer_error_code = '', 
                        issuer_error_message = '', )
                    ],
        )
        """

    def testPaymentListResponse(self):
        """Test PaymentListResponse"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()

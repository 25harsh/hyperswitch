# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from datetime import datetime
from pydantic import Field, StrictInt, StrictStr
from typing import Any, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.dispute_response import DisputeResponse

from hyperswitch.api_client import ApiClient, RequestSerialized
from hyperswitch.api_response import ApiResponse
from hyperswitch.rest import RESTResponseType


class DisputesApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def list_disputes(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of Dispute Objects to include in the response")] = None,
        dispute_status: Annotated[Optional[Any], Field(description="The status of dispute")] = None,
        dispute_stage: Annotated[Optional[Any], Field(description="The stage of dispute")] = None,
        reason: Annotated[Optional[StrictStr], Field(description="The reason for dispute")] = None,
        connector: Annotated[Optional[StrictStr], Field(description="The connector linked to dispute")] = None,
        received_time: Annotated[Optional[datetime], Field(description="The time at which dispute is received")] = None,
        received_time_lt: Annotated[Optional[datetime], Field(description="Time less than the dispute received time")] = None,
        received_time_gt: Annotated[Optional[datetime], Field(description="Time greater than the dispute received time")] = None,
        received_time_lte: Annotated[Optional[datetime], Field(description="Time less than or equals to the dispute received time")] = None,
        received_time_gte: Annotated[Optional[datetime], Field(description="Time greater than or equals to the dispute received time")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[DisputeResponse]:
        """Disputes - List Disputes

        Lists all the Disputes for a merchant

        :param limit: The maximum number of Dispute Objects to include in the response
        :type limit: int
        :param dispute_status: The status of dispute
        :type dispute_status: DisputeStatus
        :param dispute_stage: The stage of dispute
        :type dispute_stage: DisputeStage
        :param reason: The reason for dispute
        :type reason: str
        :param connector: The connector linked to dispute
        :type connector: str
        :param received_time: The time at which dispute is received
        :type received_time: datetime
        :param received_time_lt: Time less than the dispute received time
        :type received_time_lt: datetime
        :param received_time_gt: Time greater than the dispute received time
        :type received_time_gt: datetime
        :param received_time_lte: Time less than or equals to the dispute received time
        :type received_time_lte: datetime
        :param received_time_gte: Time greater than or equals to the dispute received time
        :type received_time_gte: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_disputes_serialize(
            limit=limit,
            dispute_status=dispute_status,
            dispute_stage=dispute_stage,
            reason=reason,
            connector=connector,
            received_time=received_time,
            received_time_lt=received_time_lt,
            received_time_gt=received_time_gt,
            received_time_lte=received_time_lte,
            received_time_gte=received_time_gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DisputeResponse]",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_disputes_with_http_info(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of Dispute Objects to include in the response")] = None,
        dispute_status: Annotated[Optional[Any], Field(description="The status of dispute")] = None,
        dispute_stage: Annotated[Optional[Any], Field(description="The stage of dispute")] = None,
        reason: Annotated[Optional[StrictStr], Field(description="The reason for dispute")] = None,
        connector: Annotated[Optional[StrictStr], Field(description="The connector linked to dispute")] = None,
        received_time: Annotated[Optional[datetime], Field(description="The time at which dispute is received")] = None,
        received_time_lt: Annotated[Optional[datetime], Field(description="Time less than the dispute received time")] = None,
        received_time_gt: Annotated[Optional[datetime], Field(description="Time greater than the dispute received time")] = None,
        received_time_lte: Annotated[Optional[datetime], Field(description="Time less than or equals to the dispute received time")] = None,
        received_time_gte: Annotated[Optional[datetime], Field(description="Time greater than or equals to the dispute received time")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[DisputeResponse]]:
        """Disputes - List Disputes

        Lists all the Disputes for a merchant

        :param limit: The maximum number of Dispute Objects to include in the response
        :type limit: int
        :param dispute_status: The status of dispute
        :type dispute_status: DisputeStatus
        :param dispute_stage: The stage of dispute
        :type dispute_stage: DisputeStage
        :param reason: The reason for dispute
        :type reason: str
        :param connector: The connector linked to dispute
        :type connector: str
        :param received_time: The time at which dispute is received
        :type received_time: datetime
        :param received_time_lt: Time less than the dispute received time
        :type received_time_lt: datetime
        :param received_time_gt: Time greater than the dispute received time
        :type received_time_gt: datetime
        :param received_time_lte: Time less than or equals to the dispute received time
        :type received_time_lte: datetime
        :param received_time_gte: Time greater than or equals to the dispute received time
        :type received_time_gte: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_disputes_serialize(
            limit=limit,
            dispute_status=dispute_status,
            dispute_stage=dispute_stage,
            reason=reason,
            connector=connector,
            received_time=received_time,
            received_time_lt=received_time_lt,
            received_time_gt=received_time_gt,
            received_time_lte=received_time_lte,
            received_time_gte=received_time_gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DisputeResponse]",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_disputes_without_preload_content(
        self,
        limit: Annotated[Optional[StrictInt], Field(description="The maximum number of Dispute Objects to include in the response")] = None,
        dispute_status: Annotated[Optional[Any], Field(description="The status of dispute")] = None,
        dispute_stage: Annotated[Optional[Any], Field(description="The stage of dispute")] = None,
        reason: Annotated[Optional[StrictStr], Field(description="The reason for dispute")] = None,
        connector: Annotated[Optional[StrictStr], Field(description="The connector linked to dispute")] = None,
        received_time: Annotated[Optional[datetime], Field(description="The time at which dispute is received")] = None,
        received_time_lt: Annotated[Optional[datetime], Field(description="Time less than the dispute received time")] = None,
        received_time_gt: Annotated[Optional[datetime], Field(description="Time greater than the dispute received time")] = None,
        received_time_lte: Annotated[Optional[datetime], Field(description="Time less than or equals to the dispute received time")] = None,
        received_time_gte: Annotated[Optional[datetime], Field(description="Time greater than or equals to the dispute received time")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Disputes - List Disputes

        Lists all the Disputes for a merchant

        :param limit: The maximum number of Dispute Objects to include in the response
        :type limit: int
        :param dispute_status: The status of dispute
        :type dispute_status: DisputeStatus
        :param dispute_stage: The stage of dispute
        :type dispute_stage: DisputeStage
        :param reason: The reason for dispute
        :type reason: str
        :param connector: The connector linked to dispute
        :type connector: str
        :param received_time: The time at which dispute is received
        :type received_time: datetime
        :param received_time_lt: Time less than the dispute received time
        :type received_time_lt: datetime
        :param received_time_gt: Time greater than the dispute received time
        :type received_time_gt: datetime
        :param received_time_lte: Time less than or equals to the dispute received time
        :type received_time_lte: datetime
        :param received_time_gte: Time greater than or equals to the dispute received time
        :type received_time_gte: datetime
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_disputes_serialize(
            limit=limit,
            dispute_status=dispute_status,
            dispute_stage=dispute_stage,
            reason=reason,
            connector=connector,
            received_time=received_time,
            received_time_lt=received_time_lt,
            received_time_gt=received_time_gt,
            received_time_lte=received_time_lte,
            received_time_gte=received_time_gte,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "List[DisputeResponse]",
            '401': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_disputes_serialize(
        self,
        limit,
        dispute_status,
        dispute_stage,
        reason,
        connector,
        received_time,
        received_time_lt,
        received_time_gt,
        received_time_lte,
        received_time_gte,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if limit is not None:
            
            _query_params.append(('limit', limit))
            
        if dispute_status is not None:
            
            _query_params.append(('dispute_status', dispute_status.value))
            
        if dispute_stage is not None:
            
            _query_params.append(('dispute_stage', dispute_stage.value))
            
        if reason is not None:
            
            _query_params.append(('reason', reason))
            
        if connector is not None:
            
            _query_params.append(('connector', connector))
            
        if received_time is not None:
            if isinstance(received_time, datetime):
                _query_params.append(
                    (
                        'received_time',
                        received_time.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_time', received_time))
            
        if received_time_lt is not None:
            if isinstance(received_time_lt, datetime):
                _query_params.append(
                    (
                        'received_time.lt',
                        received_time_lt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_time.lt', received_time_lt))
            
        if received_time_gt is not None:
            if isinstance(received_time_gt, datetime):
                _query_params.append(
                    (
                        'received_time.gt',
                        received_time_gt.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_time.gt', received_time_gt))
            
        if received_time_lte is not None:
            if isinstance(received_time_lte, datetime):
                _query_params.append(
                    (
                        'received_time.lte',
                        received_time_lte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_time.lte', received_time_lte))
            
        if received_time_gte is not None:
            if isinstance(received_time_gte, datetime):
                _query_params.append(
                    (
                        'received_time.gte',
                        received_time_gte.strftime(
                            self.api_client.configuration.datetime_format
                        )
                    )
                )
            else:
                _query_params.append(('received_time.gte', received_time_gte))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/disputes/list',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def retrieve_a_dispute(
        self,
        dispute_id: Annotated[StrictStr, Field(description="The identifier for dispute")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> DisputeResponse:
        """Disputes - Retrieve Dispute

        Retrieves a dispute

        :param dispute_id: The identifier for dispute (required)
        :type dispute_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_a_dispute_serialize(
            dispute_id=dispute_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DisputeResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def retrieve_a_dispute_with_http_info(
        self,
        dispute_id: Annotated[StrictStr, Field(description="The identifier for dispute")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[DisputeResponse]:
        """Disputes - Retrieve Dispute

        Retrieves a dispute

        :param dispute_id: The identifier for dispute (required)
        :type dispute_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_a_dispute_serialize(
            dispute_id=dispute_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DisputeResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def retrieve_a_dispute_without_preload_content(
        self,
        dispute_id: Annotated[StrictStr, Field(description="The identifier for dispute")],
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """Disputes - Retrieve Dispute

        Retrieves a dispute

        :param dispute_id: The identifier for dispute (required)
        :type dispute_id: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._retrieve_a_dispute_serialize(
            dispute_id=dispute_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "DisputeResponse",
            '404': None,
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _retrieve_a_dispute_serialize(
        self,
        dispute_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        if dispute_id is not None:
            _path_params['dispute_id'] = dispute_id
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'api_key'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/disputes/{dispute_id}',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )



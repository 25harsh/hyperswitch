# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.pay_later_data_one_of import PayLaterDataOneOf
from hyperswitch.models.pay_later_data_one_of1 import PayLaterDataOneOf1
from hyperswitch.models.pay_later_data_one_of2 import PayLaterDataOneOf2
from hyperswitch.models.pay_later_data_one_of3 import PayLaterDataOneOf3
from hyperswitch.models.pay_later_data_one_of4 import PayLaterDataOneOf4
from hyperswitch.models.pay_later_data_one_of5 import PayLaterDataOneOf5
from hyperswitch.models.pay_later_data_one_of6 import PayLaterDataOneOf6
from hyperswitch.models.pay_later_data_one_of7 import PayLaterDataOneOf7
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PAYLATERDATA_ONE_OF_SCHEMAS = ["PayLaterDataOneOf", "PayLaterDataOneOf1", "PayLaterDataOneOf2", "PayLaterDataOneOf3", "PayLaterDataOneOf4", "PayLaterDataOneOf5", "PayLaterDataOneOf6", "PayLaterDataOneOf7"]

class PayLaterData(BaseModel):
    """
    PayLaterData
    """
    # data type: PayLaterDataOneOf
    oneof_schema_1_validator: Optional[PayLaterDataOneOf] = None
    # data type: PayLaterDataOneOf1
    oneof_schema_2_validator: Optional[PayLaterDataOneOf1] = None
    # data type: PayLaterDataOneOf2
    oneof_schema_3_validator: Optional[PayLaterDataOneOf2] = None
    # data type: PayLaterDataOneOf3
    oneof_schema_4_validator: Optional[PayLaterDataOneOf3] = None
    # data type: PayLaterDataOneOf4
    oneof_schema_5_validator: Optional[PayLaterDataOneOf4] = None
    # data type: PayLaterDataOneOf5
    oneof_schema_6_validator: Optional[PayLaterDataOneOf5] = None
    # data type: PayLaterDataOneOf6
    oneof_schema_7_validator: Optional[PayLaterDataOneOf6] = None
    # data type: PayLaterDataOneOf7
    oneof_schema_8_validator: Optional[PayLaterDataOneOf7] = None
    actual_instance: Optional[Union[PayLaterDataOneOf, PayLaterDataOneOf1, PayLaterDataOneOf2, PayLaterDataOneOf3, PayLaterDataOneOf4, PayLaterDataOneOf5, PayLaterDataOneOf6, PayLaterDataOneOf7]] = None
    one_of_schemas: Set[str] = { "PayLaterDataOneOf", "PayLaterDataOneOf1", "PayLaterDataOneOf2", "PayLaterDataOneOf3", "PayLaterDataOneOf4", "PayLaterDataOneOf5", "PayLaterDataOneOf6", "PayLaterDataOneOf7" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PayLaterData.model_construct()
        error_messages = []
        match = 0
        # validate data type: PayLaterDataOneOf
        if not isinstance(v, PayLaterDataOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf`")
        else:
            match += 1
        # validate data type: PayLaterDataOneOf1
        if not isinstance(v, PayLaterDataOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf1`")
        else:
            match += 1
        # validate data type: PayLaterDataOneOf2
        if not isinstance(v, PayLaterDataOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf2`")
        else:
            match += 1
        # validate data type: PayLaterDataOneOf3
        if not isinstance(v, PayLaterDataOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf3`")
        else:
            match += 1
        # validate data type: PayLaterDataOneOf4
        if not isinstance(v, PayLaterDataOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf4`")
        else:
            match += 1
        # validate data type: PayLaterDataOneOf5
        if not isinstance(v, PayLaterDataOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf5`")
        else:
            match += 1
        # validate data type: PayLaterDataOneOf6
        if not isinstance(v, PayLaterDataOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf6`")
        else:
            match += 1
        # validate data type: PayLaterDataOneOf7
        if not isinstance(v, PayLaterDataOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLaterDataOneOf7`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PayLaterData with oneOf schemas: PayLaterDataOneOf, PayLaterDataOneOf1, PayLaterDataOneOf2, PayLaterDataOneOf3, PayLaterDataOneOf4, PayLaterDataOneOf5, PayLaterDataOneOf6, PayLaterDataOneOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PayLaterData with oneOf schemas: PayLaterDataOneOf, PayLaterDataOneOf1, PayLaterDataOneOf2, PayLaterDataOneOf3, PayLaterDataOneOf4, PayLaterDataOneOf5, PayLaterDataOneOf6, PayLaterDataOneOf7. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PayLaterDataOneOf
        try:
            instance.actual_instance = PayLaterDataOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLaterDataOneOf1
        try:
            instance.actual_instance = PayLaterDataOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLaterDataOneOf2
        try:
            instance.actual_instance = PayLaterDataOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLaterDataOneOf3
        try:
            instance.actual_instance = PayLaterDataOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLaterDataOneOf4
        try:
            instance.actual_instance = PayLaterDataOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLaterDataOneOf5
        try:
            instance.actual_instance = PayLaterDataOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLaterDataOneOf6
        try:
            instance.actual_instance = PayLaterDataOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLaterDataOneOf7
        try:
            instance.actual_instance = PayLaterDataOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PayLaterData with oneOf schemas: PayLaterDataOneOf, PayLaterDataOneOf1, PayLaterDataOneOf2, PayLaterDataOneOf3, PayLaterDataOneOf4, PayLaterDataOneOf5, PayLaterDataOneOf6, PayLaterDataOneOf7. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PayLaterData with oneOf schemas: PayLaterDataOneOf, PayLaterDataOneOf1, PayLaterDataOneOf2, PayLaterDataOneOf3, PayLaterDataOneOf4, PayLaterDataOneOf5, PayLaterDataOneOf6, PayLaterDataOneOf7. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PayLaterDataOneOf, PayLaterDataOneOf1, PayLaterDataOneOf2, PayLaterDataOneOf3, PayLaterDataOneOf4, PayLaterDataOneOf5, PayLaterDataOneOf6, PayLaterDataOneOf7]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



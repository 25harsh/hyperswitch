# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.address import Address
from hyperswitch.models.country_alpha2 import CountryAlpha2
from hyperswitch.models.currency import Currency
from hyperswitch.models.customer_details import CustomerDetails
from hyperswitch.models.payout_connectors import PayoutConnectors
from hyperswitch.models.payout_create_payout_link_config import PayoutCreatePayoutLinkConfig
from hyperswitch.models.payout_entity_type import PayoutEntityType
from hyperswitch.models.payout_method_data import PayoutMethodData
from hyperswitch.models.payout_send_priority import PayoutSendPriority
from hyperswitch.models.payout_type import PayoutType
from hyperswitch.models.routing_algorithm import RoutingAlgorithm
from typing import Optional, Set
from typing_extensions import Self

class PayoutConfirmRequest(BaseModel):
    """
    PayoutConfirmRequest
    """ # noqa: E501
    amount: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,")
    currency: Optional[Currency] = None
    routing: Optional[RoutingAlgorithm] = None
    connector: Optional[List[PayoutConnectors]] = Field(default=None, description="This field allows the merchant to manually select a connector with which the payout can go through.")
    payout_type: Optional[PayoutType] = None
    payout_method_data: Optional[PayoutMethodData] = None
    billing: Optional[Address] = None
    auto_fulfill: Optional[StrictBool] = Field(default=False, description="Set to true to confirm the payout without review, no further action required")
    customer_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The identifier for the customer object. If not provided the customer ID will be autogenerated. _Deprecated: Use customer_id instead._")
    customer: Optional[CustomerDetails] = None
    client_secret: StrictStr = Field(description="It's a token used for client side verification.")
    return_url: Optional[StrictStr] = Field(default=None, description="The URL to redirect after the completion of the operation")
    business_country: Optional[CountryAlpha2] = None
    business_label: Optional[StrictStr] = Field(default=None, description="Business label of the merchant for this payout. _Deprecated: Use profile_id instead._")
    description: Optional[StrictStr] = Field(default=None, description="A description of the payout")
    entity_type: Optional[PayoutEntityType] = None
    recurring: Optional[StrictBool] = Field(default=False, description="Specifies whether or not the payout request is recurring")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.")
    payout_token: Optional[StrictStr] = Field(default=None, description="Provide a reference to a stored payout method, used to process the payout.")
    profile_id: Optional[StrictStr] = Field(default=None, description="The business profile to use for this payout, especially if there are multiple business profiles associated with the account, otherwise default business profile associated with the merchant account will be used.")
    priority: Optional[PayoutSendPriority] = None
    payout_link: Optional[StrictBool] = Field(default=False, description="Whether to get the payout link (if applicable). Merchant need to specify this during the Payout _Create_, this field can not be updated during Payout _Update_.")
    payout_link_config: Optional[PayoutCreatePayoutLinkConfig] = None
    session_expiry: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Will be used to expire client secret after certain amount of time to be supplied in seconds (900) for 15 mins")
    email: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's email. _Deprecated: Use customer object instead._")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's name. _Deprecated: Use customer object instead._")
    phone: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's phone. _Deprecated: Use customer object instead._")
    phone_country_code: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's phone country code. _Deprecated: Use customer object instead._")
    payout_method_id: Optional[StrictStr] = Field(default=None, description="Identifier for payout method")
    __properties: ClassVar[List[str]] = ["amount", "currency", "routing", "connector", "payout_type", "payout_method_data", "billing", "auto_fulfill", "customer_id", "customer", "client_secret", "return_url", "business_country", "business_label", "description", "entity_type", "recurring", "metadata", "payout_token", "profile_id", "priority", "payout_link", "payout_link_config", "session_expiry", "email", "name", "phone", "phone_country_code", "payout_method_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayoutConfirmRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of routing
        if self.routing:
            _dict['routing'] = self.routing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payout_method_data
        if self.payout_method_data:
            _dict['payout_method_data'] = self.payout_method_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payout_link_config
        if self.payout_link_config:
            _dict['payout_link_config'] = self.payout_link_config.to_dict()
        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if routing (nullable) is None
        # and model_fields_set contains the field
        if self.routing is None and "routing" in self.model_fields_set:
            _dict['routing'] = None

        # set to None if connector (nullable) is None
        # and model_fields_set contains the field
        if self.connector is None and "connector" in self.model_fields_set:
            _dict['connector'] = None

        # set to None if payout_type (nullable) is None
        # and model_fields_set contains the field
        if self.payout_type is None and "payout_type" in self.model_fields_set:
            _dict['payout_type'] = None

        # set to None if payout_method_data (nullable) is None
        # and model_fields_set contains the field
        if self.payout_method_data is None and "payout_method_data" in self.model_fields_set:
            _dict['payout_method_data'] = None

        # set to None if billing (nullable) is None
        # and model_fields_set contains the field
        if self.billing is None and "billing" in self.model_fields_set:
            _dict['billing'] = None

        # set to None if auto_fulfill (nullable) is None
        # and model_fields_set contains the field
        if self.auto_fulfill is None and "auto_fulfill" in self.model_fields_set:
            _dict['auto_fulfill'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict['customer'] = None

        # set to None if return_url (nullable) is None
        # and model_fields_set contains the field
        if self.return_url is None and "return_url" in self.model_fields_set:
            _dict['return_url'] = None

        # set to None if business_country (nullable) is None
        # and model_fields_set contains the field
        if self.business_country is None and "business_country" in self.model_fields_set:
            _dict['business_country'] = None

        # set to None if business_label (nullable) is None
        # and model_fields_set contains the field
        if self.business_label is None and "business_label" in self.model_fields_set:
            _dict['business_label'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if entity_type (nullable) is None
        # and model_fields_set contains the field
        if self.entity_type is None and "entity_type" in self.model_fields_set:
            _dict['entity_type'] = None

        # set to None if recurring (nullable) is None
        # and model_fields_set contains the field
        if self.recurring is None and "recurring" in self.model_fields_set:
            _dict['recurring'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if payout_token (nullable) is None
        # and model_fields_set contains the field
        if self.payout_token is None and "payout_token" in self.model_fields_set:
            _dict['payout_token'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profile_id'] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        # set to None if payout_link (nullable) is None
        # and model_fields_set contains the field
        if self.payout_link is None and "payout_link" in self.model_fields_set:
            _dict['payout_link'] = None

        # set to None if payout_link_config (nullable) is None
        # and model_fields_set contains the field
        if self.payout_link_config is None and "payout_link_config" in self.model_fields_set:
            _dict['payout_link_config'] = None

        # set to None if session_expiry (nullable) is None
        # and model_fields_set contains the field
        if self.session_expiry is None and "session_expiry" in self.model_fields_set:
            _dict['session_expiry'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if phone_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.phone_country_code is None and "phone_country_code" in self.model_fields_set:
            _dict['phone_country_code'] = None

        # set to None if payout_method_id (nullable) is None
        # and model_fields_set contains the field
        if self.payout_method_id is None and "payout_method_id" in self.model_fields_set:
            _dict['payout_method_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayoutConfirmRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "routing": RoutingAlgorithm.from_dict(obj["routing"]) if obj.get("routing") is not None else None,
            "connector": obj.get("connector"),
            "payout_type": obj.get("payout_type"),
            "payout_method_data": PayoutMethodData.from_dict(obj["payout_method_data"]) if obj.get("payout_method_data") is not None else None,
            "billing": Address.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "auto_fulfill": obj.get("auto_fulfill") if obj.get("auto_fulfill") is not None else False,
            "customer_id": obj.get("customer_id"),
            "customer": CustomerDetails.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "client_secret": obj.get("client_secret"),
            "return_url": obj.get("return_url"),
            "business_country": obj.get("business_country"),
            "business_label": obj.get("business_label"),
            "description": obj.get("description"),
            "entity_type": obj.get("entity_type"),
            "recurring": obj.get("recurring") if obj.get("recurring") is not None else False,
            "metadata": obj.get("metadata"),
            "payout_token": obj.get("payout_token"),
            "profile_id": obj.get("profile_id"),
            "priority": obj.get("priority"),
            "payout_link": obj.get("payout_link") if obj.get("payout_link") is not None else False,
            "payout_link_config": PayoutCreatePayoutLinkConfig.from_dict(obj["payout_link_config"]) if obj.get("payout_link_config") is not None else None,
            "session_expiry": obj.get("session_expiry"),
            "email": obj.get("email"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "phone_country_code": obj.get("phone_country_code"),
            "payout_method_id": obj.get("payout_method_id")
        })
        return _obj



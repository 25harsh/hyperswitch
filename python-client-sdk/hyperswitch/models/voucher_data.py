# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.voucher_data_one_of import VoucherDataOneOf
from hyperswitch.models.voucher_data_one_of1 import VoucherDataOneOf1
from hyperswitch.models.voucher_data_one_of2 import VoucherDataOneOf2
from hyperswitch.models.voucher_data_one_of3 import VoucherDataOneOf3
from hyperswitch.models.voucher_data_one_of4 import VoucherDataOneOf4
from hyperswitch.models.voucher_data_one_of5 import VoucherDataOneOf5
from hyperswitch.models.voucher_data_one_of6 import VoucherDataOneOf6
from hyperswitch.models.voucher_data_one_of7 import VoucherDataOneOf7
from hyperswitch.models.voucher_data_one_of8 import VoucherDataOneOf8
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

VOUCHERDATA_ONE_OF_SCHEMAS = ["VoucherDataOneOf", "VoucherDataOneOf1", "VoucherDataOneOf2", "VoucherDataOneOf3", "VoucherDataOneOf4", "VoucherDataOneOf5", "VoucherDataOneOf6", "VoucherDataOneOf7", "VoucherDataOneOf8", "str"]

class VoucherData(BaseModel):
    """
    VoucherData
    """
    # data type: VoucherDataOneOf
    oneof_schema_1_validator: Optional[VoucherDataOneOf] = None
    # data type: str
    oneof_schema_2_validator: Optional[StrictStr] = None
    # data type: str
    oneof_schema_3_validator: Optional[StrictStr] = None
    # data type: str
    oneof_schema_4_validator: Optional[StrictStr] = None
    # data type: str
    oneof_schema_5_validator: Optional[StrictStr] = None
    # data type: VoucherDataOneOf1
    oneof_schema_6_validator: Optional[VoucherDataOneOf1] = None
    # data type: VoucherDataOneOf2
    oneof_schema_7_validator: Optional[VoucherDataOneOf2] = None
    # data type: str
    oneof_schema_8_validator: Optional[StrictStr] = None
    # data type: VoucherDataOneOf3
    oneof_schema_9_validator: Optional[VoucherDataOneOf3] = None
    # data type: VoucherDataOneOf4
    oneof_schema_10_validator: Optional[VoucherDataOneOf4] = None
    # data type: VoucherDataOneOf5
    oneof_schema_11_validator: Optional[VoucherDataOneOf5] = None
    # data type: VoucherDataOneOf6
    oneof_schema_12_validator: Optional[VoucherDataOneOf6] = None
    # data type: VoucherDataOneOf7
    oneof_schema_13_validator: Optional[VoucherDataOneOf7] = None
    # data type: VoucherDataOneOf8
    oneof_schema_14_validator: Optional[VoucherDataOneOf8] = None
    actual_instance: Optional[Union[VoucherDataOneOf, VoucherDataOneOf1, VoucherDataOneOf2, VoucherDataOneOf3, VoucherDataOneOf4, VoucherDataOneOf5, VoucherDataOneOf6, VoucherDataOneOf7, VoucherDataOneOf8, str]] = None
    one_of_schemas: Set[str] = { "VoucherDataOneOf", "VoucherDataOneOf1", "VoucherDataOneOf2", "VoucherDataOneOf3", "VoucherDataOneOf4", "VoucherDataOneOf5", "VoucherDataOneOf6", "VoucherDataOneOf7", "VoucherDataOneOf8", "str" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = VoucherData.model_construct()
        error_messages = []
        match = 0
        # validate data type: VoucherDataOneOf
        if not isinstance(v, VoucherDataOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf`")
        else:
            match += 1
        # validate data type: str
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: str
        try:
            instance.oneof_schema_3_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: str
        try:
            instance.oneof_schema_4_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: str
        try:
            instance.oneof_schema_5_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: VoucherDataOneOf1
        if not isinstance(v, VoucherDataOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf1`")
        else:
            match += 1
        # validate data type: VoucherDataOneOf2
        if not isinstance(v, VoucherDataOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf2`")
        else:
            match += 1
        # validate data type: str
        try:
            instance.oneof_schema_8_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: VoucherDataOneOf3
        if not isinstance(v, VoucherDataOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf3`")
        else:
            match += 1
        # validate data type: VoucherDataOneOf4
        if not isinstance(v, VoucherDataOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf4`")
        else:
            match += 1
        # validate data type: VoucherDataOneOf5
        if not isinstance(v, VoucherDataOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf5`")
        else:
            match += 1
        # validate data type: VoucherDataOneOf6
        if not isinstance(v, VoucherDataOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf6`")
        else:
            match += 1
        # validate data type: VoucherDataOneOf7
        if not isinstance(v, VoucherDataOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf7`")
        else:
            match += 1
        # validate data type: VoucherDataOneOf8
        if not isinstance(v, VoucherDataOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VoucherDataOneOf8`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in VoucherData with oneOf schemas: VoucherDataOneOf, VoucherDataOneOf1, VoucherDataOneOf2, VoucherDataOneOf3, VoucherDataOneOf4, VoucherDataOneOf5, VoucherDataOneOf6, VoucherDataOneOf7, VoucherDataOneOf8, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in VoucherData with oneOf schemas: VoucherDataOneOf, VoucherDataOneOf1, VoucherDataOneOf2, VoucherDataOneOf3, VoucherDataOneOf4, VoucherDataOneOf5, VoucherDataOneOf6, VoucherDataOneOf7, VoucherDataOneOf8, str. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into VoucherDataOneOf
        try:
            instance.actual_instance = VoucherDataOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_3_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_3_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_4_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_4_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_5_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_5_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf1
        try:
            instance.actual_instance = VoucherDataOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf2
        try:
            instance.actual_instance = VoucherDataOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_8_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_8_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf3
        try:
            instance.actual_instance = VoucherDataOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf4
        try:
            instance.actual_instance = VoucherDataOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf5
        try:
            instance.actual_instance = VoucherDataOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf6
        try:
            instance.actual_instance = VoucherDataOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf7
        try:
            instance.actual_instance = VoucherDataOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into VoucherDataOneOf8
        try:
            instance.actual_instance = VoucherDataOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into VoucherData with oneOf schemas: VoucherDataOneOf, VoucherDataOneOf1, VoucherDataOneOf2, VoucherDataOneOf3, VoucherDataOneOf4, VoucherDataOneOf5, VoucherDataOneOf6, VoucherDataOneOf7, VoucherDataOneOf8, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into VoucherData with oneOf schemas: VoucherDataOneOf, VoucherDataOneOf1, VoucherDataOneOf2, VoucherDataOneOf3, VoucherDataOneOf4, VoucherDataOneOf5, VoucherDataOneOf6, VoucherDataOneOf7, VoucherDataOneOf8, str. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], VoucherDataOneOf, VoucherDataOneOf1, VoucherDataOneOf2, VoucherDataOneOf3, VoucherDataOneOf4, VoucherDataOneOf5, VoucherDataOneOf6, VoucherDataOneOf7, VoucherDataOneOf8, str]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



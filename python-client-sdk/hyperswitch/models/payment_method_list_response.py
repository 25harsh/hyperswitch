# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.currency import Currency
from hyperswitch.models.mandate_type import MandateType
from hyperswitch.models.payment_type import PaymentType
from hyperswitch.models.response_payment_methods_enabled import ResponsePaymentMethodsEnabled
from typing import Optional, Set
from typing_extensions import Self

class PaymentMethodListResponse(BaseModel):
    """
    PaymentMethodListResponse
    """ # noqa: E501
    redirect_url: Optional[StrictStr] = Field(default=None, description="Redirect URL of the merchant")
    currency: Currency
    payment_methods: List[ResponsePaymentMethodsEnabled] = Field(description="Information about the payment method")
    mandate_payment: MandateType
    merchant_name: Optional[StrictStr] = None
    show_surcharge_breakup_screen: StrictBool = Field(description="flag to indicate if surcharge and tax breakup screen should be shown or not")
    payment_type: Optional[PaymentType] = None
    request_external_three_ds_authentication: StrictBool = Field(description="flag to indicate whether to perform external 3ds authentication")
    collect_shipping_details_from_wallets: Optional[StrictBool] = Field(default=None, description="flag that indicates whether to collect shipping details from wallets or from the customer")
    collect_billing_details_from_wallets: Optional[StrictBool] = Field(default=None, description="flag that indicates whether to collect billing details from wallets or from the customer")
    is_tax_calculation_enabled: StrictBool = Field(description="flag that indicates whether to calculate tax on the order amount")
    __properties: ClassVar[List[str]] = ["redirect_url", "currency", "payment_methods", "mandate_payment", "merchant_name", "show_surcharge_breakup_screen", "payment_type", "request_external_three_ds_authentication", "collect_shipping_details_from_wallets", "collect_billing_details_from_wallets", "is_tax_calculation_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentMethodListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_methods (list)
        _items = []
        if self.payment_methods:
            for _item_payment_methods in self.payment_methods:
                if _item_payment_methods:
                    _items.append(_item_payment_methods.to_dict())
            _dict['payment_methods'] = _items
        # override the default output from pydantic by calling `to_dict()` of mandate_payment
        if self.mandate_payment:
            _dict['mandate_payment'] = self.mandate_payment.to_dict()
        # set to None if redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_url is None and "redirect_url" in self.model_fields_set:
            _dict['redirect_url'] = None

        # set to None if merchant_name (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_name is None and "merchant_name" in self.model_fields_set:
            _dict['merchant_name'] = None

        # set to None if payment_type (nullable) is None
        # and model_fields_set contains the field
        if self.payment_type is None and "payment_type" in self.model_fields_set:
            _dict['payment_type'] = None

        # set to None if collect_shipping_details_from_wallets (nullable) is None
        # and model_fields_set contains the field
        if self.collect_shipping_details_from_wallets is None and "collect_shipping_details_from_wallets" in self.model_fields_set:
            _dict['collect_shipping_details_from_wallets'] = None

        # set to None if collect_billing_details_from_wallets (nullable) is None
        # and model_fields_set contains the field
        if self.collect_billing_details_from_wallets is None and "collect_billing_details_from_wallets" in self.model_fields_set:
            _dict['collect_billing_details_from_wallets'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentMethodListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "redirect_url": obj.get("redirect_url"),
            "currency": obj.get("currency"),
            "payment_methods": [ResponsePaymentMethodsEnabled.from_dict(_item) for _item in obj["payment_methods"]] if obj.get("payment_methods") is not None else None,
            "mandate_payment": MandateType.from_dict(obj["mandate_payment"]) if obj.get("mandate_payment") is not None else None,
            "merchant_name": obj.get("merchant_name"),
            "show_surcharge_breakup_screen": obj.get("show_surcharge_breakup_screen"),
            "payment_type": obj.get("payment_type"),
            "request_external_three_ds_authentication": obj.get("request_external_three_ds_authentication"),
            "collect_shipping_details_from_wallets": obj.get("collect_shipping_details_from_wallets"),
            "collect_billing_details_from_wallets": obj.get("collect_billing_details_from_wallets"),
            "is_tax_calculation_enabled": obj.get("is_tax_calculation_enabled")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.currency import Currency
from hyperswitch.models.payout_connectors import PayoutConnectors
from hyperswitch.models.payout_entity_type import PayoutEntityType
from hyperswitch.models.payout_status import PayoutStatus
from hyperswitch.models.payout_type import PayoutType
from typing import Optional, Set
from typing_extensions import Self

class PayoutListFilterConstraints(BaseModel):
    """
    PayoutListFilterConstraints
    """ # noqa: E501
    start_time: datetime = Field(description="The start time to filter payments list or to get list of filters. To get list of filters start time is needed to be passed")
    end_time: Optional[datetime] = Field(default=None, description="The end time to filter payments list or to get list of filters. If not passed the default time is now")
    payout_id: Optional[Annotated[str, Field(min_length=30, strict=True, max_length=30)]] = Field(default=None, description="The identifier for payout")
    profile_id: Optional[StrictStr] = Field(default=None, description="The identifier for business profile")
    customer_id: Optional[StrictStr] = Field(default=None, description="The identifier for customer")
    limit: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The limit on the number of objects. The default limit is 10 and max limit is 20")
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The starting point within a list of objects")
    connector: Optional[List[PayoutConnectors]] = Field(default=None, description="The list of connectors to filter payouts list")
    currency: Currency
    status: Optional[List[PayoutStatus]] = Field(default=None, description="The list of payout status to filter payouts list")
    payout_method: Optional[List[PayoutType]] = Field(default=None, description="The list of payout methods to filter payouts list")
    entity_type: PayoutEntityType
    __properties: ClassVar[List[str]] = ["start_time", "end_time", "payout_id", "profile_id", "customer_id", "limit", "offset", "connector", "currency", "status", "payout_method", "entity_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayoutListFilterConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if end_time (nullable) is None
        # and model_fields_set contains the field
        if self.end_time is None and "end_time" in self.model_fields_set:
            _dict['end_time'] = None

        # set to None if payout_id (nullable) is None
        # and model_fields_set contains the field
        if self.payout_id is None and "payout_id" in self.model_fields_set:
            _dict['payout_id'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profile_id'] = None

        # set to None if customer_id (nullable) is None
        # and model_fields_set contains the field
        if self.customer_id is None and "customer_id" in self.model_fields_set:
            _dict['customer_id'] = None

        # set to None if offset (nullable) is None
        # and model_fields_set contains the field
        if self.offset is None and "offset" in self.model_fields_set:
            _dict['offset'] = None

        # set to None if connector (nullable) is None
        # and model_fields_set contains the field
        if self.connector is None and "connector" in self.model_fields_set:
            _dict['connector'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if payout_method (nullable) is None
        # and model_fields_set contains the field
        if self.payout_method is None and "payout_method" in self.model_fields_set:
            _dict['payout_method'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayoutListFilterConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "start_time": obj.get("start_time"),
            "end_time": obj.get("end_time"),
            "payout_id": obj.get("payout_id"),
            "profile_id": obj.get("profile_id"),
            "customer_id": obj.get("customer_id"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "connector": obj.get("connector"),
            "currency": obj.get("currency"),
            "status": obj.get("status"),
            "payout_method": obj.get("payout_method"),
            "entity_type": obj.get("entity_type")
        })
        return _obj



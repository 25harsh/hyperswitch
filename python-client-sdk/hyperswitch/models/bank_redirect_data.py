# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.bank_redirect_data_one_of import BankRedirectDataOneOf
from hyperswitch.models.bank_redirect_data_one_of1 import BankRedirectDataOneOf1
from hyperswitch.models.bank_redirect_data_one_of10 import BankRedirectDataOneOf10
from hyperswitch.models.bank_redirect_data_one_of11 import BankRedirectDataOneOf11
from hyperswitch.models.bank_redirect_data_one_of12 import BankRedirectDataOneOf12
from hyperswitch.models.bank_redirect_data_one_of13 import BankRedirectDataOneOf13
from hyperswitch.models.bank_redirect_data_one_of14 import BankRedirectDataOneOf14
from hyperswitch.models.bank_redirect_data_one_of15 import BankRedirectDataOneOf15
from hyperswitch.models.bank_redirect_data_one_of16 import BankRedirectDataOneOf16
from hyperswitch.models.bank_redirect_data_one_of17 import BankRedirectDataOneOf17
from hyperswitch.models.bank_redirect_data_one_of18 import BankRedirectDataOneOf18
from hyperswitch.models.bank_redirect_data_one_of2 import BankRedirectDataOneOf2
from hyperswitch.models.bank_redirect_data_one_of3 import BankRedirectDataOneOf3
from hyperswitch.models.bank_redirect_data_one_of4 import BankRedirectDataOneOf4
from hyperswitch.models.bank_redirect_data_one_of5 import BankRedirectDataOneOf5
from hyperswitch.models.bank_redirect_data_one_of6 import BankRedirectDataOneOf6
from hyperswitch.models.bank_redirect_data_one_of7 import BankRedirectDataOneOf7
from hyperswitch.models.bank_redirect_data_one_of8 import BankRedirectDataOneOf8
from hyperswitch.models.bank_redirect_data_one_of9 import BankRedirectDataOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BANKREDIRECTDATA_ONE_OF_SCHEMAS = ["BankRedirectDataOneOf", "BankRedirectDataOneOf1", "BankRedirectDataOneOf10", "BankRedirectDataOneOf11", "BankRedirectDataOneOf12", "BankRedirectDataOneOf13", "BankRedirectDataOneOf14", "BankRedirectDataOneOf15", "BankRedirectDataOneOf16", "BankRedirectDataOneOf17", "BankRedirectDataOneOf18", "BankRedirectDataOneOf2", "BankRedirectDataOneOf3", "BankRedirectDataOneOf4", "BankRedirectDataOneOf5", "BankRedirectDataOneOf6", "BankRedirectDataOneOf7", "BankRedirectDataOneOf8", "BankRedirectDataOneOf9"]

class BankRedirectData(BaseModel):
    """
    BankRedirectData
    """
    # data type: BankRedirectDataOneOf
    oneof_schema_1_validator: Optional[BankRedirectDataOneOf] = None
    # data type: BankRedirectDataOneOf1
    oneof_schema_2_validator: Optional[BankRedirectDataOneOf1] = None
    # data type: BankRedirectDataOneOf2
    oneof_schema_3_validator: Optional[BankRedirectDataOneOf2] = None
    # data type: BankRedirectDataOneOf3
    oneof_schema_4_validator: Optional[BankRedirectDataOneOf3] = None
    # data type: BankRedirectDataOneOf4
    oneof_schema_5_validator: Optional[BankRedirectDataOneOf4] = None
    # data type: BankRedirectDataOneOf5
    oneof_schema_6_validator: Optional[BankRedirectDataOneOf5] = None
    # data type: BankRedirectDataOneOf6
    oneof_schema_7_validator: Optional[BankRedirectDataOneOf6] = None
    # data type: BankRedirectDataOneOf7
    oneof_schema_8_validator: Optional[BankRedirectDataOneOf7] = None
    # data type: BankRedirectDataOneOf8
    oneof_schema_9_validator: Optional[BankRedirectDataOneOf8] = None
    # data type: BankRedirectDataOneOf9
    oneof_schema_10_validator: Optional[BankRedirectDataOneOf9] = None
    # data type: BankRedirectDataOneOf10
    oneof_schema_11_validator: Optional[BankRedirectDataOneOf10] = None
    # data type: BankRedirectDataOneOf11
    oneof_schema_12_validator: Optional[BankRedirectDataOneOf11] = None
    # data type: BankRedirectDataOneOf12
    oneof_schema_13_validator: Optional[BankRedirectDataOneOf12] = None
    # data type: BankRedirectDataOneOf13
    oneof_schema_14_validator: Optional[BankRedirectDataOneOf13] = None
    # data type: BankRedirectDataOneOf14
    oneof_schema_15_validator: Optional[BankRedirectDataOneOf14] = None
    # data type: BankRedirectDataOneOf15
    oneof_schema_16_validator: Optional[BankRedirectDataOneOf15] = None
    # data type: BankRedirectDataOneOf16
    oneof_schema_17_validator: Optional[BankRedirectDataOneOf16] = None
    # data type: BankRedirectDataOneOf17
    oneof_schema_18_validator: Optional[BankRedirectDataOneOf17] = None
    # data type: BankRedirectDataOneOf18
    oneof_schema_19_validator: Optional[BankRedirectDataOneOf18] = None
    actual_instance: Optional[Union[BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf18, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9]] = None
    one_of_schemas: Set[str] = { "BankRedirectDataOneOf", "BankRedirectDataOneOf1", "BankRedirectDataOneOf10", "BankRedirectDataOneOf11", "BankRedirectDataOneOf12", "BankRedirectDataOneOf13", "BankRedirectDataOneOf14", "BankRedirectDataOneOf15", "BankRedirectDataOneOf16", "BankRedirectDataOneOf17", "BankRedirectDataOneOf18", "BankRedirectDataOneOf2", "BankRedirectDataOneOf3", "BankRedirectDataOneOf4", "BankRedirectDataOneOf5", "BankRedirectDataOneOf6", "BankRedirectDataOneOf7", "BankRedirectDataOneOf8", "BankRedirectDataOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BankRedirectData.model_construct()
        error_messages = []
        match = 0
        # validate data type: BankRedirectDataOneOf
        if not isinstance(v, BankRedirectDataOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf1
        if not isinstance(v, BankRedirectDataOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf1`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf2
        if not isinstance(v, BankRedirectDataOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf2`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf3
        if not isinstance(v, BankRedirectDataOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf3`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf4
        if not isinstance(v, BankRedirectDataOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf4`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf5
        if not isinstance(v, BankRedirectDataOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf5`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf6
        if not isinstance(v, BankRedirectDataOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf6`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf7
        if not isinstance(v, BankRedirectDataOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf7`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf8
        if not isinstance(v, BankRedirectDataOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf8`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf9
        if not isinstance(v, BankRedirectDataOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf9`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf10
        if not isinstance(v, BankRedirectDataOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf10`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf11
        if not isinstance(v, BankRedirectDataOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf11`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf12
        if not isinstance(v, BankRedirectDataOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf12`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf13
        if not isinstance(v, BankRedirectDataOneOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf13`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf14
        if not isinstance(v, BankRedirectDataOneOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf14`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf15
        if not isinstance(v, BankRedirectDataOneOf15):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf15`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf16
        if not isinstance(v, BankRedirectDataOneOf16):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf16`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf17
        if not isinstance(v, BankRedirectDataOneOf17):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf17`")
        else:
            match += 1
        # validate data type: BankRedirectDataOneOf18
        if not isinstance(v, BankRedirectDataOneOf18):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirectDataOneOf18`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BankRedirectData with oneOf schemas: BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf18, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BankRedirectData with oneOf schemas: BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf18, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BankRedirectDataOneOf
        try:
            instance.actual_instance = BankRedirectDataOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf1
        try:
            instance.actual_instance = BankRedirectDataOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf2
        try:
            instance.actual_instance = BankRedirectDataOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf3
        try:
            instance.actual_instance = BankRedirectDataOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf4
        try:
            instance.actual_instance = BankRedirectDataOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf5
        try:
            instance.actual_instance = BankRedirectDataOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf6
        try:
            instance.actual_instance = BankRedirectDataOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf7
        try:
            instance.actual_instance = BankRedirectDataOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf8
        try:
            instance.actual_instance = BankRedirectDataOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf9
        try:
            instance.actual_instance = BankRedirectDataOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf10
        try:
            instance.actual_instance = BankRedirectDataOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf11
        try:
            instance.actual_instance = BankRedirectDataOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf12
        try:
            instance.actual_instance = BankRedirectDataOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf13
        try:
            instance.actual_instance = BankRedirectDataOneOf13.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf14
        try:
            instance.actual_instance = BankRedirectDataOneOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf15
        try:
            instance.actual_instance = BankRedirectDataOneOf15.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf16
        try:
            instance.actual_instance = BankRedirectDataOneOf16.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf17
        try:
            instance.actual_instance = BankRedirectDataOneOf17.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirectDataOneOf18
        try:
            instance.actual_instance = BankRedirectDataOneOf18.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BankRedirectData with oneOf schemas: BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf18, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BankRedirectData with oneOf schemas: BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf18, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BankRedirectDataOneOf, BankRedirectDataOneOf1, BankRedirectDataOneOf10, BankRedirectDataOneOf11, BankRedirectDataOneOf12, BankRedirectDataOneOf13, BankRedirectDataOneOf14, BankRedirectDataOneOf15, BankRedirectDataOneOf16, BankRedirectDataOneOf17, BankRedirectDataOneOf18, BankRedirectDataOneOf2, BankRedirectDataOneOf3, BankRedirectDataOneOf4, BankRedirectDataOneOf5, BankRedirectDataOneOf6, BankRedirectDataOneOf7, BankRedirectDataOneOf8, BankRedirectDataOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



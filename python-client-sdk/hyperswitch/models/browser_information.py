# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BrowserInformation(BaseModel):
    """
    Browser information to be used for 3DS 2.0
    """ # noqa: E501
    color_depth: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Color depth supported by the browser")
    java_enabled: Optional[StrictBool] = Field(default=None, description="Whether java is enabled in the browser")
    java_script_enabled: Optional[StrictBool] = Field(default=None, description="Whether javascript is enabled in the browser")
    language: Optional[StrictStr] = Field(default=None, description="Language supported")
    screen_height: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The screen height in pixels")
    screen_width: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The screen width in pixels")
    time_zone: Optional[StrictInt] = Field(default=None, description="Time zone of the client")
    ip_address: Optional[StrictStr] = Field(default=None, description="Ip address of the client")
    accept_header: Optional[StrictStr] = Field(default=None, description="List of headers that are accepted")
    user_agent: Optional[StrictStr] = Field(default=None, description="User-agent of the browser")
    os_type: Optional[StrictStr] = Field(default=None, description="The os type of the client device")
    os_version: Optional[StrictStr] = Field(default=None, description="The os version of the client device")
    device_model: Optional[StrictStr] = Field(default=None, description="The device model of the client")
    __properties: ClassVar[List[str]] = ["color_depth", "java_enabled", "java_script_enabled", "language", "screen_height", "screen_width", "time_zone", "ip_address", "accept_header", "user_agent", "os_type", "os_version", "device_model"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BrowserInformation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if color_depth (nullable) is None
        # and model_fields_set contains the field
        if self.color_depth is None and "color_depth" in self.model_fields_set:
            _dict['color_depth'] = None

        # set to None if java_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.java_enabled is None and "java_enabled" in self.model_fields_set:
            _dict['java_enabled'] = None

        # set to None if java_script_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.java_script_enabled is None and "java_script_enabled" in self.model_fields_set:
            _dict['java_script_enabled'] = None

        # set to None if language (nullable) is None
        # and model_fields_set contains the field
        if self.language is None and "language" in self.model_fields_set:
            _dict['language'] = None

        # set to None if screen_height (nullable) is None
        # and model_fields_set contains the field
        if self.screen_height is None and "screen_height" in self.model_fields_set:
            _dict['screen_height'] = None

        # set to None if screen_width (nullable) is None
        # and model_fields_set contains the field
        if self.screen_width is None and "screen_width" in self.model_fields_set:
            _dict['screen_width'] = None

        # set to None if time_zone (nullable) is None
        # and model_fields_set contains the field
        if self.time_zone is None and "time_zone" in self.model_fields_set:
            _dict['time_zone'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ip_address'] = None

        # set to None if accept_header (nullable) is None
        # and model_fields_set contains the field
        if self.accept_header is None and "accept_header" in self.model_fields_set:
            _dict['accept_header'] = None

        # set to None if user_agent (nullable) is None
        # and model_fields_set contains the field
        if self.user_agent is None and "user_agent" in self.model_fields_set:
            _dict['user_agent'] = None

        # set to None if os_type (nullable) is None
        # and model_fields_set contains the field
        if self.os_type is None and "os_type" in self.model_fields_set:
            _dict['os_type'] = None

        # set to None if os_version (nullable) is None
        # and model_fields_set contains the field
        if self.os_version is None and "os_version" in self.model_fields_set:
            _dict['os_version'] = None

        # set to None if device_model (nullable) is None
        # and model_fields_set contains the field
        if self.device_model is None and "device_model" in self.model_fields_set:
            _dict['device_model'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BrowserInformation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "color_depth": obj.get("color_depth"),
            "java_enabled": obj.get("java_enabled"),
            "java_script_enabled": obj.get("java_script_enabled"),
            "language": obj.get("language"),
            "screen_height": obj.get("screen_height"),
            "screen_width": obj.get("screen_width"),
            "time_zone": obj.get("time_zone"),
            "ip_address": obj.get("ip_address"),
            "accept_header": obj.get("accept_header"),
            "user_agent": obj.get("user_agent"),
            "os_type": obj.get("os_type"),
            "os_version": obj.get("os_version"),
            "device_model": obj.get("device_model")
        })
        return _obj



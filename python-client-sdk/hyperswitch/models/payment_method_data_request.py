# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.address import Address
from hyperswitch.models.bank_debit_data import BankDebitData
from hyperswitch.models.bank_redirect_data import BankRedirectData
from hyperswitch.models.bank_transfer_data import BankTransferData
from hyperswitch.models.card import Card
from hyperswitch.models.card_redirect_data import CardRedirectData
from hyperswitch.models.card_token import CardToken
from hyperswitch.models.crypto_data import CryptoData
from hyperswitch.models.gift_card_data import GiftCardData
from hyperswitch.models.mobile_payment_data import MobilePaymentData
from hyperswitch.models.open_banking_data import OpenBankingData
from hyperswitch.models.pay_later_data import PayLaterData
from hyperswitch.models.real_time_payment_data import RealTimePaymentData
from hyperswitch.models.upi_data import UpiData
from hyperswitch.models.voucher_data import VoucherData
from hyperswitch.models.wallet_data import WalletData
from typing import Optional, Set
from typing_extensions import Self

class PaymentMethodDataRequest(BaseModel):
    """
    The payment method information provided for making a payment
    """ # noqa: E501
    card: Card
    card_redirect: CardRedirectData
    wallet: WalletData
    pay_later: PayLaterData
    bank_redirect: BankRedirectData
    bank_debit: BankDebitData
    bank_transfer: BankTransferData
    real_time_payment: RealTimePaymentData
    crypto: CryptoData
    upi: UpiData
    voucher: VoucherData
    gift_card: GiftCardData
    card_token: CardToken
    open_banking: OpenBankingData
    mobile_payment: MobilePaymentData
    billing: Optional[Address] = None
    __properties: ClassVar[List[str]] = ["card", "card_redirect", "wallet", "pay_later", "bank_redirect", "bank_debit", "bank_transfer", "real_time_payment", "crypto", "upi", "voucher", "gift_card", "card_token", "open_banking", "mobile_payment", "billing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentMethodDataRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_redirect
        if self.card_redirect:
            _dict['card_redirect'] = self.card_redirect.to_dict()
        # override the default output from pydantic by calling `to_dict()` of wallet
        if self.wallet:
            _dict['wallet'] = self.wallet.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_later
        if self.pay_later:
            _dict['pay_later'] = self.pay_later.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_redirect
        if self.bank_redirect:
            _dict['bank_redirect'] = self.bank_redirect.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_debit
        if self.bank_debit:
            _dict['bank_debit'] = self.bank_debit.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_transfer
        if self.bank_transfer:
            _dict['bank_transfer'] = self.bank_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of real_time_payment
        if self.real_time_payment:
            _dict['real_time_payment'] = self.real_time_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of crypto
        if self.crypto:
            _dict['crypto'] = self.crypto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of upi
        if self.upi:
            _dict['upi'] = self.upi.to_dict()
        # override the default output from pydantic by calling `to_dict()` of voucher
        if self.voucher:
            _dict['voucher'] = self.voucher.to_dict()
        # override the default output from pydantic by calling `to_dict()` of gift_card
        if self.gift_card:
            _dict['gift_card'] = self.gift_card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_token
        if self.card_token:
            _dict['card_token'] = self.card_token.to_dict()
        # override the default output from pydantic by calling `to_dict()` of open_banking
        if self.open_banking:
            _dict['open_banking'] = self.open_banking.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mobile_payment
        if self.mobile_payment:
            _dict['mobile_payment'] = self.mobile_payment.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # set to None if billing (nullable) is None
        # and model_fields_set contains the field
        if self.billing is None and "billing" in self.model_fields_set:
            _dict['billing'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentMethodDataRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "card": Card.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "card_redirect": CardRedirectData.from_dict(obj["card_redirect"]) if obj.get("card_redirect") is not None else None,
            "wallet": WalletData.from_dict(obj["wallet"]) if obj.get("wallet") is not None else None,
            "pay_later": PayLaterData.from_dict(obj["pay_later"]) if obj.get("pay_later") is not None else None,
            "bank_redirect": BankRedirectData.from_dict(obj["bank_redirect"]) if obj.get("bank_redirect") is not None else None,
            "bank_debit": BankDebitData.from_dict(obj["bank_debit"]) if obj.get("bank_debit") is not None else None,
            "bank_transfer": BankTransferData.from_dict(obj["bank_transfer"]) if obj.get("bank_transfer") is not None else None,
            "real_time_payment": RealTimePaymentData.from_dict(obj["real_time_payment"]) if obj.get("real_time_payment") is not None else None,
            "crypto": CryptoData.from_dict(obj["crypto"]) if obj.get("crypto") is not None else None,
            "upi": UpiData.from_dict(obj["upi"]) if obj.get("upi") is not None else None,
            "voucher": VoucherData.from_dict(obj["voucher"]) if obj.get("voucher") is not None else None,
            "gift_card": GiftCardData.from_dict(obj["gift_card"]) if obj.get("gift_card") is not None else None,
            "card_token": CardToken.from_dict(obj["card_token"]) if obj.get("card_token") is not None else None,
            "open_banking": OpenBankingData.from_dict(obj["open_banking"]) if obj.get("open_banking") is not None else None,
            "mobile_payment": MobilePaymentData.from_dict(obj["mobile_payment"]) if obj.get("mobile_payment") is not None else None,
            "billing": Address.from_dict(obj["billing"]) if obj.get("billing") is not None else None
        })
        return _obj



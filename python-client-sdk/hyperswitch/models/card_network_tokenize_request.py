# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.address import Address
from hyperswitch.models.customer_details import CustomerDetails
from hyperswitch.models.tokenize_card_request import TokenizeCardRequest
from hyperswitch.models.tokenize_payment_method_request import TokenizePaymentMethodRequest
from typing import Optional, Set
from typing_extensions import Self

class CardNetworkTokenizeRequest(BaseModel):
    """
    CardNetworkTokenizeRequest
    """ # noqa: E501
    card: TokenizeCardRequest
    existing_payment_method: TokenizePaymentMethodRequest
    merchant_id: StrictStr = Field(description="Merchant ID associated with the tokenization request")
    customer: CustomerDetails
    billing: Optional[Address] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.")
    payment_method_issuer: Optional[StrictStr] = Field(default=None, description="The name of the bank/ provider issuing the payment method to the end user")
    __properties: ClassVar[List[str]] = ["card", "existing_payment_method", "merchant_id", "customer", "billing", "metadata", "payment_method_issuer"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CardNetworkTokenizeRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of existing_payment_method
        if self.existing_payment_method:
            _dict['existing_payment_method'] = self.existing_payment_method.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # set to None if billing (nullable) is None
        # and model_fields_set contains the field
        if self.billing is None and "billing" in self.model_fields_set:
            _dict['billing'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if payment_method_issuer (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method_issuer is None and "payment_method_issuer" in self.model_fields_set:
            _dict['payment_method_issuer'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CardNetworkTokenizeRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "card": TokenizeCardRequest.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "existing_payment_method": TokenizePaymentMethodRequest.from_dict(obj["existing_payment_method"]) if obj.get("existing_payment_method") is not None else None,
            "merchant_id": obj.get("merchant_id"),
            "customer": CustomerDetails.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "billing": Address.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "metadata": obj.get("metadata"),
            "payment_method_issuer": obj.get("payment_method_issuer")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing import Any, ClassVar, Dict, List
from hyperswitch.models.card_testing_guard_status import CardTestingGuardStatus
from typing import Optional, Set
from typing_extensions import Self

class CardTestingGuardConfig(BaseModel):
    """
    CardTestingGuardConfig
    """ # noqa: E501
    card_ip_blocking_status: CardTestingGuardStatus
    card_ip_blocking_threshold: StrictInt = Field(description="Determines the unsuccessful payment threshold for Card IP Blocking for profile")
    guest_user_card_blocking_status: CardTestingGuardStatus
    guest_user_card_blocking_threshold: StrictInt = Field(description="Determines the unsuccessful payment threshold for Guest User Card Blocking for profile")
    customer_id_blocking_status: CardTestingGuardStatus
    customer_id_blocking_threshold: StrictInt = Field(description="Determines the unsuccessful payment threshold for Customer Id Blocking for profile")
    card_testing_guard_expiry: StrictInt = Field(description="Determines Redis Expiry for Card Testing Guard for profile")
    __properties: ClassVar[List[str]] = ["card_ip_blocking_status", "card_ip_blocking_threshold", "guest_user_card_blocking_status", "guest_user_card_blocking_threshold", "customer_id_blocking_status", "customer_id_blocking_threshold", "card_testing_guard_expiry"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CardTestingGuardConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CardTestingGuardConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "card_ip_blocking_status": obj.get("card_ip_blocking_status"),
            "card_ip_blocking_threshold": obj.get("card_ip_blocking_threshold"),
            "guest_user_card_blocking_status": obj.get("guest_user_card_blocking_status"),
            "guest_user_card_blocking_threshold": obj.get("guest_user_card_blocking_threshold"),
            "customer_id_blocking_status": obj.get("customer_id_blocking_status"),
            "customer_id_blocking_threshold": obj.get("customer_id_blocking_threshold"),
            "card_testing_guard_expiry": obj.get("card_testing_guard_expiry")
        })
        return _obj



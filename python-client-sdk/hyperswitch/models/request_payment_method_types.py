# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.accepted_countries import AcceptedCountries
from hyperswitch.models.accepted_currencies import AcceptedCurrencies
from hyperswitch.models.card_network import CardNetwork
from hyperswitch.models.payment_experience import PaymentExperience
from hyperswitch.models.payment_method_type import PaymentMethodType
from typing import Optional, Set
from typing_extensions import Self

class RequestPaymentMethodTypes(BaseModel):
    """
    RequestPaymentMethodTypes
    """ # noqa: E501
    payment_method_type: PaymentMethodType
    payment_experience: Optional[PaymentExperience] = None
    card_networks: Optional[List[CardNetwork]] = None
    accepted_currencies: Optional[AcceptedCurrencies] = None
    accepted_countries: Optional[AcceptedCountries] = None
    minimum_amount: Optional[StrictInt] = Field(default=None, description="This Unit struct represents MinorUnit in which core amount works")
    maximum_amount: Optional[StrictInt] = Field(default=None, description="This Unit struct represents MinorUnit in which core amount works")
    recurring_enabled: StrictBool = Field(description="Boolean to enable recurring payments / mandates. Default is true.")
    installment_payment_enabled: StrictBool = Field(description="Boolean to enable installment / EMI / BNPL payments. Default is true.")
    __properties: ClassVar[List[str]] = ["payment_method_type", "payment_experience", "card_networks", "accepted_currencies", "accepted_countries", "minimum_amount", "maximum_amount", "recurring_enabled", "installment_payment_enabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RequestPaymentMethodTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of accepted_currencies
        if self.accepted_currencies:
            _dict['accepted_currencies'] = self.accepted_currencies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of accepted_countries
        if self.accepted_countries:
            _dict['accepted_countries'] = self.accepted_countries.to_dict()
        # set to None if payment_experience (nullable) is None
        # and model_fields_set contains the field
        if self.payment_experience is None and "payment_experience" in self.model_fields_set:
            _dict['payment_experience'] = None

        # set to None if card_networks (nullable) is None
        # and model_fields_set contains the field
        if self.card_networks is None and "card_networks" in self.model_fields_set:
            _dict['card_networks'] = None

        # set to None if accepted_currencies (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_currencies is None and "accepted_currencies" in self.model_fields_set:
            _dict['accepted_currencies'] = None

        # set to None if accepted_countries (nullable) is None
        # and model_fields_set contains the field
        if self.accepted_countries is None and "accepted_countries" in self.model_fields_set:
            _dict['accepted_countries'] = None

        # set to None if minimum_amount (nullable) is None
        # and model_fields_set contains the field
        if self.minimum_amount is None and "minimum_amount" in self.model_fields_set:
            _dict['minimum_amount'] = None

        # set to None if maximum_amount (nullable) is None
        # and model_fields_set contains the field
        if self.maximum_amount is None and "maximum_amount" in self.model_fields_set:
            _dict['maximum_amount'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RequestPaymentMethodTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_method_type": obj.get("payment_method_type"),
            "payment_experience": obj.get("payment_experience"),
            "card_networks": obj.get("card_networks"),
            "accepted_currencies": AcceptedCurrencies.from_dict(obj["accepted_currencies"]) if obj.get("accepted_currencies") is not None else None,
            "accepted_countries": AcceptedCountries.from_dict(obj["accepted_countries"]) if obj.get("accepted_countries") is not None else None,
            "minimum_amount": obj.get("minimum_amount"),
            "maximum_amount": obj.get("maximum_amount"),
            "recurring_enabled": obj.get("recurring_enabled") if obj.get("recurring_enabled") is not None else True,
            "installment_payment_enabled": obj.get("installment_payment_enabled") if obj.get("installment_payment_enabled") is not None else True
        })
        return _obj



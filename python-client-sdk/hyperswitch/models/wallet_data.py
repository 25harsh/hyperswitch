# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.wallet_data_one_of import WalletDataOneOf
from hyperswitch.models.wallet_data_one_of1 import WalletDataOneOf1
from hyperswitch.models.wallet_data_one_of10 import WalletDataOneOf10
from hyperswitch.models.wallet_data_one_of11 import WalletDataOneOf11
from hyperswitch.models.wallet_data_one_of12 import WalletDataOneOf12
from hyperswitch.models.wallet_data_one_of13 import WalletDataOneOf13
from hyperswitch.models.wallet_data_one_of14 import WalletDataOneOf14
from hyperswitch.models.wallet_data_one_of15 import WalletDataOneOf15
from hyperswitch.models.wallet_data_one_of16 import WalletDataOneOf16
from hyperswitch.models.wallet_data_one_of17 import WalletDataOneOf17
from hyperswitch.models.wallet_data_one_of18 import WalletDataOneOf18
from hyperswitch.models.wallet_data_one_of19 import WalletDataOneOf19
from hyperswitch.models.wallet_data_one_of2 import WalletDataOneOf2
from hyperswitch.models.wallet_data_one_of20 import WalletDataOneOf20
from hyperswitch.models.wallet_data_one_of21 import WalletDataOneOf21
from hyperswitch.models.wallet_data_one_of22 import WalletDataOneOf22
from hyperswitch.models.wallet_data_one_of23 import WalletDataOneOf23
from hyperswitch.models.wallet_data_one_of24 import WalletDataOneOf24
from hyperswitch.models.wallet_data_one_of25 import WalletDataOneOf25
from hyperswitch.models.wallet_data_one_of26 import WalletDataOneOf26
from hyperswitch.models.wallet_data_one_of27 import WalletDataOneOf27
from hyperswitch.models.wallet_data_one_of28 import WalletDataOneOf28
from hyperswitch.models.wallet_data_one_of3 import WalletDataOneOf3
from hyperswitch.models.wallet_data_one_of4 import WalletDataOneOf4
from hyperswitch.models.wallet_data_one_of5 import WalletDataOneOf5
from hyperswitch.models.wallet_data_one_of6 import WalletDataOneOf6
from hyperswitch.models.wallet_data_one_of7 import WalletDataOneOf7
from hyperswitch.models.wallet_data_one_of8 import WalletDataOneOf8
from hyperswitch.models.wallet_data_one_of9 import WalletDataOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

WALLETDATA_ONE_OF_SCHEMAS = ["WalletDataOneOf", "WalletDataOneOf1", "WalletDataOneOf10", "WalletDataOneOf11", "WalletDataOneOf12", "WalletDataOneOf13", "WalletDataOneOf14", "WalletDataOneOf15", "WalletDataOneOf16", "WalletDataOneOf17", "WalletDataOneOf18", "WalletDataOneOf19", "WalletDataOneOf2", "WalletDataOneOf20", "WalletDataOneOf21", "WalletDataOneOf22", "WalletDataOneOf23", "WalletDataOneOf24", "WalletDataOneOf25", "WalletDataOneOf26", "WalletDataOneOf27", "WalletDataOneOf28", "WalletDataOneOf3", "WalletDataOneOf4", "WalletDataOneOf5", "WalletDataOneOf6", "WalletDataOneOf7", "WalletDataOneOf8", "WalletDataOneOf9"]

class WalletData(BaseModel):
    """
    WalletData
    """
    # data type: WalletDataOneOf
    oneof_schema_1_validator: Optional[WalletDataOneOf] = None
    # data type: WalletDataOneOf1
    oneof_schema_2_validator: Optional[WalletDataOneOf1] = None
    # data type: WalletDataOneOf2
    oneof_schema_3_validator: Optional[WalletDataOneOf2] = None
    # data type: WalletDataOneOf3
    oneof_schema_4_validator: Optional[WalletDataOneOf3] = None
    # data type: WalletDataOneOf4
    oneof_schema_5_validator: Optional[WalletDataOneOf4] = None
    # data type: WalletDataOneOf5
    oneof_schema_6_validator: Optional[WalletDataOneOf5] = None
    # data type: WalletDataOneOf6
    oneof_schema_7_validator: Optional[WalletDataOneOf6] = None
    # data type: WalletDataOneOf7
    oneof_schema_8_validator: Optional[WalletDataOneOf7] = None
    # data type: WalletDataOneOf8
    oneof_schema_9_validator: Optional[WalletDataOneOf8] = None
    # data type: WalletDataOneOf9
    oneof_schema_10_validator: Optional[WalletDataOneOf9] = None
    # data type: WalletDataOneOf10
    oneof_schema_11_validator: Optional[WalletDataOneOf10] = None
    # data type: WalletDataOneOf11
    oneof_schema_12_validator: Optional[WalletDataOneOf11] = None
    # data type: WalletDataOneOf12
    oneof_schema_13_validator: Optional[WalletDataOneOf12] = None
    # data type: WalletDataOneOf13
    oneof_schema_14_validator: Optional[WalletDataOneOf13] = None
    # data type: WalletDataOneOf14
    oneof_schema_15_validator: Optional[WalletDataOneOf14] = None
    # data type: WalletDataOneOf15
    oneof_schema_16_validator: Optional[WalletDataOneOf15] = None
    # data type: WalletDataOneOf16
    oneof_schema_17_validator: Optional[WalletDataOneOf16] = None
    # data type: WalletDataOneOf17
    oneof_schema_18_validator: Optional[WalletDataOneOf17] = None
    # data type: WalletDataOneOf18
    oneof_schema_19_validator: Optional[WalletDataOneOf18] = None
    # data type: WalletDataOneOf19
    oneof_schema_20_validator: Optional[WalletDataOneOf19] = None
    # data type: WalletDataOneOf20
    oneof_schema_21_validator: Optional[WalletDataOneOf20] = None
    # data type: WalletDataOneOf21
    oneof_schema_22_validator: Optional[WalletDataOneOf21] = None
    # data type: WalletDataOneOf22
    oneof_schema_23_validator: Optional[WalletDataOneOf22] = None
    # data type: WalletDataOneOf23
    oneof_schema_24_validator: Optional[WalletDataOneOf23] = None
    # data type: WalletDataOneOf24
    oneof_schema_25_validator: Optional[WalletDataOneOf24] = None
    # data type: WalletDataOneOf25
    oneof_schema_26_validator: Optional[WalletDataOneOf25] = None
    # data type: WalletDataOneOf26
    oneof_schema_27_validator: Optional[WalletDataOneOf26] = None
    # data type: WalletDataOneOf27
    oneof_schema_28_validator: Optional[WalletDataOneOf27] = None
    # data type: WalletDataOneOf28
    oneof_schema_29_validator: Optional[WalletDataOneOf28] = None
    actual_instance: Optional[Union[WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf28, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9]] = None
    one_of_schemas: Set[str] = { "WalletDataOneOf", "WalletDataOneOf1", "WalletDataOneOf10", "WalletDataOneOf11", "WalletDataOneOf12", "WalletDataOneOf13", "WalletDataOneOf14", "WalletDataOneOf15", "WalletDataOneOf16", "WalletDataOneOf17", "WalletDataOneOf18", "WalletDataOneOf19", "WalletDataOneOf2", "WalletDataOneOf20", "WalletDataOneOf21", "WalletDataOneOf22", "WalletDataOneOf23", "WalletDataOneOf24", "WalletDataOneOf25", "WalletDataOneOf26", "WalletDataOneOf27", "WalletDataOneOf28", "WalletDataOneOf3", "WalletDataOneOf4", "WalletDataOneOf5", "WalletDataOneOf6", "WalletDataOneOf7", "WalletDataOneOf8", "WalletDataOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = WalletData.model_construct()
        error_messages = []
        match = 0
        # validate data type: WalletDataOneOf
        if not isinstance(v, WalletDataOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf`")
        else:
            match += 1
        # validate data type: WalletDataOneOf1
        if not isinstance(v, WalletDataOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf1`")
        else:
            match += 1
        # validate data type: WalletDataOneOf2
        if not isinstance(v, WalletDataOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf2`")
        else:
            match += 1
        # validate data type: WalletDataOneOf3
        if not isinstance(v, WalletDataOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf3`")
        else:
            match += 1
        # validate data type: WalletDataOneOf4
        if not isinstance(v, WalletDataOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf4`")
        else:
            match += 1
        # validate data type: WalletDataOneOf5
        if not isinstance(v, WalletDataOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf5`")
        else:
            match += 1
        # validate data type: WalletDataOneOf6
        if not isinstance(v, WalletDataOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf6`")
        else:
            match += 1
        # validate data type: WalletDataOneOf7
        if not isinstance(v, WalletDataOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf7`")
        else:
            match += 1
        # validate data type: WalletDataOneOf8
        if not isinstance(v, WalletDataOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf8`")
        else:
            match += 1
        # validate data type: WalletDataOneOf9
        if not isinstance(v, WalletDataOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf9`")
        else:
            match += 1
        # validate data type: WalletDataOneOf10
        if not isinstance(v, WalletDataOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf10`")
        else:
            match += 1
        # validate data type: WalletDataOneOf11
        if not isinstance(v, WalletDataOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf11`")
        else:
            match += 1
        # validate data type: WalletDataOneOf12
        if not isinstance(v, WalletDataOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf12`")
        else:
            match += 1
        # validate data type: WalletDataOneOf13
        if not isinstance(v, WalletDataOneOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf13`")
        else:
            match += 1
        # validate data type: WalletDataOneOf14
        if not isinstance(v, WalletDataOneOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf14`")
        else:
            match += 1
        # validate data type: WalletDataOneOf15
        if not isinstance(v, WalletDataOneOf15):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf15`")
        else:
            match += 1
        # validate data type: WalletDataOneOf16
        if not isinstance(v, WalletDataOneOf16):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf16`")
        else:
            match += 1
        # validate data type: WalletDataOneOf17
        if not isinstance(v, WalletDataOneOf17):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf17`")
        else:
            match += 1
        # validate data type: WalletDataOneOf18
        if not isinstance(v, WalletDataOneOf18):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf18`")
        else:
            match += 1
        # validate data type: WalletDataOneOf19
        if not isinstance(v, WalletDataOneOf19):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf19`")
        else:
            match += 1
        # validate data type: WalletDataOneOf20
        if not isinstance(v, WalletDataOneOf20):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf20`")
        else:
            match += 1
        # validate data type: WalletDataOneOf21
        if not isinstance(v, WalletDataOneOf21):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf21`")
        else:
            match += 1
        # validate data type: WalletDataOneOf22
        if not isinstance(v, WalletDataOneOf22):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf22`")
        else:
            match += 1
        # validate data type: WalletDataOneOf23
        if not isinstance(v, WalletDataOneOf23):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf23`")
        else:
            match += 1
        # validate data type: WalletDataOneOf24
        if not isinstance(v, WalletDataOneOf24):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf24`")
        else:
            match += 1
        # validate data type: WalletDataOneOf25
        if not isinstance(v, WalletDataOneOf25):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf25`")
        else:
            match += 1
        # validate data type: WalletDataOneOf26
        if not isinstance(v, WalletDataOneOf26):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf26`")
        else:
            match += 1
        # validate data type: WalletDataOneOf27
        if not isinstance(v, WalletDataOneOf27):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf27`")
        else:
            match += 1
        # validate data type: WalletDataOneOf28
        if not isinstance(v, WalletDataOneOf28):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WalletDataOneOf28`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in WalletData with oneOf schemas: WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf28, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in WalletData with oneOf schemas: WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf28, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into WalletDataOneOf
        try:
            instance.actual_instance = WalletDataOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf1
        try:
            instance.actual_instance = WalletDataOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf2
        try:
            instance.actual_instance = WalletDataOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf3
        try:
            instance.actual_instance = WalletDataOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf4
        try:
            instance.actual_instance = WalletDataOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf5
        try:
            instance.actual_instance = WalletDataOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf6
        try:
            instance.actual_instance = WalletDataOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf7
        try:
            instance.actual_instance = WalletDataOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf8
        try:
            instance.actual_instance = WalletDataOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf9
        try:
            instance.actual_instance = WalletDataOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf10
        try:
            instance.actual_instance = WalletDataOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf11
        try:
            instance.actual_instance = WalletDataOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf12
        try:
            instance.actual_instance = WalletDataOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf13
        try:
            instance.actual_instance = WalletDataOneOf13.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf14
        try:
            instance.actual_instance = WalletDataOneOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf15
        try:
            instance.actual_instance = WalletDataOneOf15.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf16
        try:
            instance.actual_instance = WalletDataOneOf16.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf17
        try:
            instance.actual_instance = WalletDataOneOf17.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf18
        try:
            instance.actual_instance = WalletDataOneOf18.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf19
        try:
            instance.actual_instance = WalletDataOneOf19.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf20
        try:
            instance.actual_instance = WalletDataOneOf20.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf21
        try:
            instance.actual_instance = WalletDataOneOf21.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf22
        try:
            instance.actual_instance = WalletDataOneOf22.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf23
        try:
            instance.actual_instance = WalletDataOneOf23.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf24
        try:
            instance.actual_instance = WalletDataOneOf24.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf25
        try:
            instance.actual_instance = WalletDataOneOf25.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf26
        try:
            instance.actual_instance = WalletDataOneOf26.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf27
        try:
            instance.actual_instance = WalletDataOneOf27.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WalletDataOneOf28
        try:
            instance.actual_instance = WalletDataOneOf28.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into WalletData with oneOf schemas: WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf28, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into WalletData with oneOf schemas: WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf28, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], WalletDataOneOf, WalletDataOneOf1, WalletDataOneOf10, WalletDataOneOf11, WalletDataOneOf12, WalletDataOneOf13, WalletDataOneOf14, WalletDataOneOf15, WalletDataOneOf16, WalletDataOneOf17, WalletDataOneOf18, WalletDataOneOf19, WalletDataOneOf2, WalletDataOneOf20, WalletDataOneOf21, WalletDataOneOf22, WalletDataOneOf23, WalletDataOneOf24, WalletDataOneOf25, WalletDataOneOf26, WalletDataOneOf27, WalletDataOneOf28, WalletDataOneOf3, WalletDataOneOf4, WalletDataOneOf5, WalletDataOneOf6, WalletDataOneOf7, WalletDataOneOf8, WalletDataOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



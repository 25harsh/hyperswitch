# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.connector import Connector
from hyperswitch.models.connector_status import ConnectorStatus
from hyperswitch.models.connector_type import ConnectorType
from hyperswitch.models.country_alpha2 import CountryAlpha2
from hyperswitch.models.frm_configs import FrmConfigs
from hyperswitch.models.payment_methods_enabled import PaymentMethodsEnabled
from typing import Optional, Set
from typing_extensions import Self

class MerchantConnectorListResponse(BaseModel):
    """
    MerchantConnectorListResponse
    """ # noqa: E501
    connector_type: ConnectorType
    connector_name: Connector
    connector_label: Optional[StrictStr] = Field(default=None, description="A unique label to identify the connector account created under a profile")
    merchant_connector_id: StrictStr = Field(description="Unique ID of the merchant connector account")
    profile_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="Identifier for the profile, if not provided default will be chosen from merchant account")
    payment_methods_enabled: Optional[List[PaymentMethodsEnabled]] = Field(default=None, description="An object containing the details about the payment methods that need to be enabled under this merchant connector account")
    test_mode: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if the connector is in Test mode. By default, its value is false.")
    disabled: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if the connector is disabled. By default, its value is false.")
    frm_configs: Optional[List[FrmConfigs]] = Field(default=None, description="Contains the frm configs for the merchant connector")
    business_country: Optional[CountryAlpha2] = None
    business_label: Optional[StrictStr] = Field(default=None, description="The business label to which the connector account is attached. To be deprecated soon. Use the 'profile_id' instead")
    business_sub_label: Optional[StrictStr] = Field(default=None, description="The business sublabel to which the connector account is attached. To be deprecated soon. Use the 'profile_id' instead")
    applepay_verified_domains: Optional[List[StrictStr]] = Field(default=None, description="identifier for the verified domains of a particular connector account")
    pm_auth_config: Optional[Dict[str, Any]] = None
    status: ConnectorStatus
    __properties: ClassVar[List[str]] = ["connector_type", "connector_name", "connector_label", "merchant_connector_id", "profile_id", "payment_methods_enabled", "test_mode", "disabled", "frm_configs", "business_country", "business_label", "business_sub_label", "applepay_verified_domains", "pm_auth_config", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantConnectorListResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_methods_enabled (list)
        _items = []
        if self.payment_methods_enabled:
            for _item_payment_methods_enabled in self.payment_methods_enabled:
                if _item_payment_methods_enabled:
                    _items.append(_item_payment_methods_enabled.to_dict())
            _dict['payment_methods_enabled'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in frm_configs (list)
        _items = []
        if self.frm_configs:
            for _item_frm_configs in self.frm_configs:
                if _item_frm_configs:
                    _items.append(_item_frm_configs.to_dict())
            _dict['frm_configs'] = _items
        # set to None if connector_label (nullable) is None
        # and model_fields_set contains the field
        if self.connector_label is None and "connector_label" in self.model_fields_set:
            _dict['connector_label'] = None

        # set to None if payment_methods_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.payment_methods_enabled is None and "payment_methods_enabled" in self.model_fields_set:
            _dict['payment_methods_enabled'] = None

        # set to None if test_mode (nullable) is None
        # and model_fields_set contains the field
        if self.test_mode is None and "test_mode" in self.model_fields_set:
            _dict['test_mode'] = None

        # set to None if disabled (nullable) is None
        # and model_fields_set contains the field
        if self.disabled is None and "disabled" in self.model_fields_set:
            _dict['disabled'] = None

        # set to None if frm_configs (nullable) is None
        # and model_fields_set contains the field
        if self.frm_configs is None and "frm_configs" in self.model_fields_set:
            _dict['frm_configs'] = None

        # set to None if business_country (nullable) is None
        # and model_fields_set contains the field
        if self.business_country is None and "business_country" in self.model_fields_set:
            _dict['business_country'] = None

        # set to None if business_label (nullable) is None
        # and model_fields_set contains the field
        if self.business_label is None and "business_label" in self.model_fields_set:
            _dict['business_label'] = None

        # set to None if business_sub_label (nullable) is None
        # and model_fields_set contains the field
        if self.business_sub_label is None and "business_sub_label" in self.model_fields_set:
            _dict['business_sub_label'] = None

        # set to None if applepay_verified_domains (nullable) is None
        # and model_fields_set contains the field
        if self.applepay_verified_domains is None and "applepay_verified_domains" in self.model_fields_set:
            _dict['applepay_verified_domains'] = None

        # set to None if pm_auth_config (nullable) is None
        # and model_fields_set contains the field
        if self.pm_auth_config is None and "pm_auth_config" in self.model_fields_set:
            _dict['pm_auth_config'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantConnectorListResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connector_type": obj.get("connector_type"),
            "connector_name": obj.get("connector_name"),
            "connector_label": obj.get("connector_label"),
            "merchant_connector_id": obj.get("merchant_connector_id"),
            "profile_id": obj.get("profile_id"),
            "payment_methods_enabled": [PaymentMethodsEnabled.from_dict(_item) for _item in obj["payment_methods_enabled"]] if obj.get("payment_methods_enabled") is not None else None,
            "test_mode": obj.get("test_mode") if obj.get("test_mode") is not None else False,
            "disabled": obj.get("disabled") if obj.get("disabled") is not None else False,
            "frm_configs": [FrmConfigs.from_dict(_item) for _item in obj["frm_configs"]] if obj.get("frm_configs") is not None else None,
            "business_country": obj.get("business_country"),
            "business_label": obj.get("business_label"),
            "business_sub_label": obj.get("business_sub_label"),
            "applepay_verified_domains": obj.get("applepay_verified_domains"),
            "pm_auth_config": obj.get("pm_auth_config"),
            "status": obj.get("status")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.bank_debit_billing import BankDebitBilling
from typing import Optional, Set
from typing_extensions import Self

class BankDebitDataOneOfAchBankDebit(BaseModel):
    """
    Payment Method data for Ach bank debit
    """ # noqa: E501
    billing_details: Optional[BankDebitBilling] = None
    account_number: StrictStr = Field(description="Account number for ach bank debit payment")
    routing_number: StrictStr = Field(description="Routing number for ach bank debit payment")
    card_holder_name: StrictStr
    bank_account_holder_name: StrictStr
    bank_name: StrictStr
    bank_type: StrictStr
    bank_holder_type: StrictStr
    __properties: ClassVar[List[str]] = ["billing_details", "account_number", "routing_number", "card_holder_name", "bank_account_holder_name", "bank_name", "bank_type", "bank_holder_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BankDebitDataOneOfAchBankDebit from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_details
        if self.billing_details:
            _dict['billing_details'] = self.billing_details.to_dict()
        # set to None if billing_details (nullable) is None
        # and model_fields_set contains the field
        if self.billing_details is None and "billing_details" in self.model_fields_set:
            _dict['billing_details'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BankDebitDataOneOfAchBankDebit from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "billing_details": BankDebitBilling.from_dict(obj["billing_details"]) if obj.get("billing_details") is not None else None,
            "account_number": obj.get("account_number"),
            "routing_number": obj.get("routing_number"),
            "card_holder_name": obj.get("card_holder_name"),
            "bank_account_holder_name": obj.get("bank_account_holder_name"),
            "bank_name": obj.get("bank_name"),
            "bank_type": obj.get("bank_type"),
            "bank_holder_type": obj.get("bank_holder_type")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.bank_debit import BankDebit
from hyperswitch.models.bank_redirect import BankRedirect
from hyperswitch.models.bank_transfer import BankTransfer
from hyperswitch.models.card1 import Card1
from hyperswitch.models.card_redirect import CardRedirect
from hyperswitch.models.card_token1 import CardToken1
from hyperswitch.models.crypto import Crypto
from hyperswitch.models.gift_card import GiftCard
from hyperswitch.models.mobile_payment import MobilePayment
from hyperswitch.models.open_banking import OpenBanking
from hyperswitch.models.pay_later import PayLater
from hyperswitch.models.real_time_payment import RealTimePayment
from hyperswitch.models.upi import Upi
from hyperswitch.models.voucher import Voucher
from hyperswitch.models.wallet1 import Wallet1
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PAYMENTMETHODDATA_ONE_OF_SCHEMAS = ["BankDebit", "BankRedirect", "BankTransfer", "Card1", "CardRedirect", "CardToken1", "Crypto", "GiftCard", "MobilePayment", "OpenBanking", "PayLater", "RealTimePayment", "Upi", "Voucher", "Wallet1", "str"]

class PaymentMethodData(BaseModel):
    """
    PaymentMethodData
    """
    # data type: Card1
    oneof_schema_1_validator: Optional[Card1] = None
    # data type: CardRedirect
    oneof_schema_2_validator: Optional[CardRedirect] = None
    # data type: Wallet1
    oneof_schema_3_validator: Optional[Wallet1] = None
    # data type: PayLater
    oneof_schema_4_validator: Optional[PayLater] = None
    # data type: BankRedirect
    oneof_schema_5_validator: Optional[BankRedirect] = None
    # data type: BankDebit
    oneof_schema_6_validator: Optional[BankDebit] = None
    # data type: BankTransfer
    oneof_schema_7_validator: Optional[BankTransfer] = None
    # data type: RealTimePayment
    oneof_schema_8_validator: Optional[RealTimePayment] = None
    # data type: Crypto
    oneof_schema_9_validator: Optional[Crypto] = None
    # data type: str
    oneof_schema_10_validator: Optional[StrictStr] = None
    # data type: str
    oneof_schema_11_validator: Optional[StrictStr] = None
    # data type: Upi
    oneof_schema_12_validator: Optional[Upi] = None
    # data type: Voucher
    oneof_schema_13_validator: Optional[Voucher] = None
    # data type: GiftCard
    oneof_schema_14_validator: Optional[GiftCard] = None
    # data type: CardToken1
    oneof_schema_15_validator: Optional[CardToken1] = None
    # data type: OpenBanking
    oneof_schema_16_validator: Optional[OpenBanking] = None
    # data type: MobilePayment
    oneof_schema_17_validator: Optional[MobilePayment] = None
    actual_instance: Optional[Union[BankDebit, BankRedirect, BankTransfer, Card1, CardRedirect, CardToken1, Crypto, GiftCard, MobilePayment, OpenBanking, PayLater, RealTimePayment, Upi, Voucher, Wallet1, str]] = None
    one_of_schemas: Set[str] = { "BankDebit", "BankRedirect", "BankTransfer", "Card1", "CardRedirect", "CardToken1", "Crypto", "GiftCard", "MobilePayment", "OpenBanking", "PayLater", "RealTimePayment", "Upi", "Voucher", "Wallet1", "str" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PaymentMethodData.model_construct()
        error_messages = []
        match = 0
        # validate data type: Card1
        if not isinstance(v, Card1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Card1`")
        else:
            match += 1
        # validate data type: CardRedirect
        if not isinstance(v, CardRedirect):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CardRedirect`")
        else:
            match += 1
        # validate data type: Wallet1
        if not isinstance(v, Wallet1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Wallet1`")
        else:
            match += 1
        # validate data type: PayLater
        if not isinstance(v, PayLater):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PayLater`")
        else:
            match += 1
        # validate data type: BankRedirect
        if not isinstance(v, BankRedirect):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankRedirect`")
        else:
            match += 1
        # validate data type: BankDebit
        if not isinstance(v, BankDebit):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankDebit`")
        else:
            match += 1
        # validate data type: BankTransfer
        if not isinstance(v, BankTransfer):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransfer`")
        else:
            match += 1
        # validate data type: RealTimePayment
        if not isinstance(v, RealTimePayment):
            error_messages.append(f"Error! Input type `{type(v)}` is not `RealTimePayment`")
        else:
            match += 1
        # validate data type: Crypto
        if not isinstance(v, Crypto):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Crypto`")
        else:
            match += 1
        # validate data type: str
        try:
            instance.oneof_schema_10_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: str
        try:
            instance.oneof_schema_11_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: Upi
        if not isinstance(v, Upi):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Upi`")
        else:
            match += 1
        # validate data type: Voucher
        if not isinstance(v, Voucher):
            error_messages.append(f"Error! Input type `{type(v)}` is not `Voucher`")
        else:
            match += 1
        # validate data type: GiftCard
        if not isinstance(v, GiftCard):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GiftCard`")
        else:
            match += 1
        # validate data type: CardToken1
        if not isinstance(v, CardToken1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CardToken1`")
        else:
            match += 1
        # validate data type: OpenBanking
        if not isinstance(v, OpenBanking):
            error_messages.append(f"Error! Input type `{type(v)}` is not `OpenBanking`")
        else:
            match += 1
        # validate data type: MobilePayment
        if not isinstance(v, MobilePayment):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MobilePayment`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PaymentMethodData with oneOf schemas: BankDebit, BankRedirect, BankTransfer, Card1, CardRedirect, CardToken1, Crypto, GiftCard, MobilePayment, OpenBanking, PayLater, RealTimePayment, Upi, Voucher, Wallet1, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PaymentMethodData with oneOf schemas: BankDebit, BankRedirect, BankTransfer, Card1, CardRedirect, CardToken1, Crypto, GiftCard, MobilePayment, OpenBanking, PayLater, RealTimePayment, Upi, Voucher, Wallet1, str. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into Card1
        try:
            instance.actual_instance = Card1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CardRedirect
        try:
            instance.actual_instance = CardRedirect.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Wallet1
        try:
            instance.actual_instance = Wallet1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PayLater
        try:
            instance.actual_instance = PayLater.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankRedirect
        try:
            instance.actual_instance = BankRedirect.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankDebit
        try:
            instance.actual_instance = BankDebit.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransfer
        try:
            instance.actual_instance = BankTransfer.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into RealTimePayment
        try:
            instance.actual_instance = RealTimePayment.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Crypto
        try:
            instance.actual_instance = Crypto.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_10_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_10_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into str
        try:
            # validation
            instance.oneof_schema_11_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_11_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Upi
        try:
            instance.actual_instance = Upi.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into Voucher
        try:
            instance.actual_instance = Voucher.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GiftCard
        try:
            instance.actual_instance = GiftCard.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CardToken1
        try:
            instance.actual_instance = CardToken1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into OpenBanking
        try:
            instance.actual_instance = OpenBanking.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MobilePayment
        try:
            instance.actual_instance = MobilePayment.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PaymentMethodData with oneOf schemas: BankDebit, BankRedirect, BankTransfer, Card1, CardRedirect, CardToken1, Crypto, GiftCard, MobilePayment, OpenBanking, PayLater, RealTimePayment, Upi, Voucher, Wallet1, str. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PaymentMethodData with oneOf schemas: BankDebit, BankRedirect, BankTransfer, Card1, CardRedirect, CardToken1, Crypto, GiftCard, MobilePayment, OpenBanking, PayLater, RealTimePayment, Upi, Voucher, Wallet1, str. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BankDebit, BankRedirect, BankTransfer, Card1, CardRedirect, CardToken1, Crypto, GiftCard, MobilePayment, OpenBanking, PayLater, RealTimePayment, Upi, Voucher, Wallet1, str]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



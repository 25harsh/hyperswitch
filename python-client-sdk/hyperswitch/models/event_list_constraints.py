# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.event_class import EventClass
from hyperswitch.models.event_type import EventType
from typing import Optional, Set
from typing_extensions import Self

class EventListConstraints(BaseModel):
    """
    The constraints to apply when filtering events.
    """ # noqa: E501
    created_after: Optional[datetime] = Field(default=None, description="Filter events created after the specified time.")
    created_before: Optional[datetime] = Field(default=None, description="Filter events created before the specified time.")
    limit: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Include at most the specified number of events.")
    offset: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Include events after the specified offset.")
    object_id: Optional[StrictStr] = Field(default=None, description="Filter all events associated with the specified object identifier (Payment Intent ID, Refund ID, etc.)")
    profile_id: Optional[StrictStr] = Field(default=None, description="Filter all events associated with the specified business profile ID.")
    event_classes: Optional[List[EventClass]] = Field(default=None, description="Filter events by their class.")
    event_types: Optional[List[EventType]] = Field(default=None, description="Filter events by their type.")
    is_delivered: Optional[StrictBool] = Field(default=None, description="Filter all events by `is_overall_delivery_successful` field of the event.")
    __properties: ClassVar[List[str]] = ["created_after", "created_before", "limit", "offset", "object_id", "profile_id", "event_classes", "event_types", "is_delivered"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventListConstraints from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if created_after (nullable) is None
        # and model_fields_set contains the field
        if self.created_after is None and "created_after" in self.model_fields_set:
            _dict['created_after'] = None

        # set to None if created_before (nullable) is None
        # and model_fields_set contains the field
        if self.created_before is None and "created_before" in self.model_fields_set:
            _dict['created_before'] = None

        # set to None if limit (nullable) is None
        # and model_fields_set contains the field
        if self.limit is None and "limit" in self.model_fields_set:
            _dict['limit'] = None

        # set to None if offset (nullable) is None
        # and model_fields_set contains the field
        if self.offset is None and "offset" in self.model_fields_set:
            _dict['offset'] = None

        # set to None if object_id (nullable) is None
        # and model_fields_set contains the field
        if self.object_id is None and "object_id" in self.model_fields_set:
            _dict['object_id'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profile_id'] = None

        # set to None if event_classes (nullable) is None
        # and model_fields_set contains the field
        if self.event_classes is None and "event_classes" in self.model_fields_set:
            _dict['event_classes'] = None

        # set to None if event_types (nullable) is None
        # and model_fields_set contains the field
        if self.event_types is None and "event_types" in self.model_fields_set:
            _dict['event_types'] = None

        # set to None if is_delivered (nullable) is None
        # and model_fields_set contains the field
        if self.is_delivered is None and "is_delivered" in self.model_fields_set:
            _dict['is_delivered'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventListConstraints from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "created_after": obj.get("created_after"),
            "created_before": obj.get("created_before"),
            "limit": obj.get("limit"),
            "offset": obj.get("offset"),
            "object_id": obj.get("object_id"),
            "profile_id": obj.get("profile_id"),
            "event_classes": obj.get("event_classes"),
            "event_types": obj.get("event_types"),
            "is_delivered": obj.get("is_delivered")
        })
        return _obj



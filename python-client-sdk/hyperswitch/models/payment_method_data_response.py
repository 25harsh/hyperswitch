# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.payment_method_data_response_one_of import PaymentMethodDataResponseOneOf
from hyperswitch.models.payment_method_data_response_one_of1 import PaymentMethodDataResponseOneOf1
from hyperswitch.models.payment_method_data_response_one_of10 import PaymentMethodDataResponseOneOf10
from hyperswitch.models.payment_method_data_response_one_of11 import PaymentMethodDataResponseOneOf11
from hyperswitch.models.payment_method_data_response_one_of12 import PaymentMethodDataResponseOneOf12
from hyperswitch.models.payment_method_data_response_one_of13 import PaymentMethodDataResponseOneOf13
from hyperswitch.models.payment_method_data_response_one_of14 import PaymentMethodDataResponseOneOf14
from hyperswitch.models.payment_method_data_response_one_of15 import PaymentMethodDataResponseOneOf15
from hyperswitch.models.payment_method_data_response_one_of16 import PaymentMethodDataResponseOneOf16
from hyperswitch.models.payment_method_data_response_one_of2 import PaymentMethodDataResponseOneOf2
from hyperswitch.models.payment_method_data_response_one_of3 import PaymentMethodDataResponseOneOf3
from hyperswitch.models.payment_method_data_response_one_of4 import PaymentMethodDataResponseOneOf4
from hyperswitch.models.payment_method_data_response_one_of5 import PaymentMethodDataResponseOneOf5
from hyperswitch.models.payment_method_data_response_one_of6 import PaymentMethodDataResponseOneOf6
from hyperswitch.models.payment_method_data_response_one_of7 import PaymentMethodDataResponseOneOf7
from hyperswitch.models.payment_method_data_response_one_of8 import PaymentMethodDataResponseOneOf8
from hyperswitch.models.payment_method_data_response_one_of9 import PaymentMethodDataResponseOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

PAYMENTMETHODDATARESPONSE_ONE_OF_SCHEMAS = ["PaymentMethodDataResponseOneOf", "PaymentMethodDataResponseOneOf1", "PaymentMethodDataResponseOneOf10", "PaymentMethodDataResponseOneOf11", "PaymentMethodDataResponseOneOf12", "PaymentMethodDataResponseOneOf13", "PaymentMethodDataResponseOneOf14", "PaymentMethodDataResponseOneOf15", "PaymentMethodDataResponseOneOf16", "PaymentMethodDataResponseOneOf2", "PaymentMethodDataResponseOneOf3", "PaymentMethodDataResponseOneOf4", "PaymentMethodDataResponseOneOf5", "PaymentMethodDataResponseOneOf6", "PaymentMethodDataResponseOneOf7", "PaymentMethodDataResponseOneOf8", "PaymentMethodDataResponseOneOf9"]

class PaymentMethodDataResponse(BaseModel):
    """
    PaymentMethodDataResponse
    """
    # data type: PaymentMethodDataResponseOneOf
    oneof_schema_1_validator: Optional[PaymentMethodDataResponseOneOf] = None
    # data type: PaymentMethodDataResponseOneOf1
    oneof_schema_2_validator: Optional[PaymentMethodDataResponseOneOf1] = None
    # data type: PaymentMethodDataResponseOneOf2
    oneof_schema_3_validator: Optional[PaymentMethodDataResponseOneOf2] = None
    # data type: PaymentMethodDataResponseOneOf3
    oneof_schema_4_validator: Optional[PaymentMethodDataResponseOneOf3] = None
    # data type: PaymentMethodDataResponseOneOf4
    oneof_schema_5_validator: Optional[PaymentMethodDataResponseOneOf4] = None
    # data type: PaymentMethodDataResponseOneOf5
    oneof_schema_6_validator: Optional[PaymentMethodDataResponseOneOf5] = None
    # data type: PaymentMethodDataResponseOneOf6
    oneof_schema_7_validator: Optional[PaymentMethodDataResponseOneOf6] = None
    # data type: PaymentMethodDataResponseOneOf7
    oneof_schema_8_validator: Optional[PaymentMethodDataResponseOneOf7] = None
    # data type: PaymentMethodDataResponseOneOf8
    oneof_schema_9_validator: Optional[PaymentMethodDataResponseOneOf8] = None
    # data type: PaymentMethodDataResponseOneOf9
    oneof_schema_10_validator: Optional[PaymentMethodDataResponseOneOf9] = None
    # data type: PaymentMethodDataResponseOneOf10
    oneof_schema_11_validator: Optional[PaymentMethodDataResponseOneOf10] = None
    # data type: PaymentMethodDataResponseOneOf11
    oneof_schema_12_validator: Optional[PaymentMethodDataResponseOneOf11] = None
    # data type: PaymentMethodDataResponseOneOf12
    oneof_schema_13_validator: Optional[PaymentMethodDataResponseOneOf12] = None
    # data type: PaymentMethodDataResponseOneOf13
    oneof_schema_14_validator: Optional[PaymentMethodDataResponseOneOf13] = None
    # data type: PaymentMethodDataResponseOneOf14
    oneof_schema_15_validator: Optional[PaymentMethodDataResponseOneOf14] = None
    # data type: PaymentMethodDataResponseOneOf15
    oneof_schema_16_validator: Optional[PaymentMethodDataResponseOneOf15] = None
    # data type: PaymentMethodDataResponseOneOf16
    oneof_schema_17_validator: Optional[PaymentMethodDataResponseOneOf16] = None
    actual_instance: Optional[Union[PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf16, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9]] = None
    one_of_schemas: Set[str] = { "PaymentMethodDataResponseOneOf", "PaymentMethodDataResponseOneOf1", "PaymentMethodDataResponseOneOf10", "PaymentMethodDataResponseOneOf11", "PaymentMethodDataResponseOneOf12", "PaymentMethodDataResponseOneOf13", "PaymentMethodDataResponseOneOf14", "PaymentMethodDataResponseOneOf15", "PaymentMethodDataResponseOneOf16", "PaymentMethodDataResponseOneOf2", "PaymentMethodDataResponseOneOf3", "PaymentMethodDataResponseOneOf4", "PaymentMethodDataResponseOneOf5", "PaymentMethodDataResponseOneOf6", "PaymentMethodDataResponseOneOf7", "PaymentMethodDataResponseOneOf8", "PaymentMethodDataResponseOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = PaymentMethodDataResponse.model_construct()
        error_messages = []
        match = 0
        # validate data type: PaymentMethodDataResponseOneOf
        if not isinstance(v, PaymentMethodDataResponseOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf1
        if not isinstance(v, PaymentMethodDataResponseOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf1`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf2
        if not isinstance(v, PaymentMethodDataResponseOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf2`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf3
        if not isinstance(v, PaymentMethodDataResponseOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf3`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf4
        if not isinstance(v, PaymentMethodDataResponseOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf4`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf5
        if not isinstance(v, PaymentMethodDataResponseOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf5`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf6
        if not isinstance(v, PaymentMethodDataResponseOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf6`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf7
        if not isinstance(v, PaymentMethodDataResponseOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf7`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf8
        if not isinstance(v, PaymentMethodDataResponseOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf8`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf9
        if not isinstance(v, PaymentMethodDataResponseOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf9`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf10
        if not isinstance(v, PaymentMethodDataResponseOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf10`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf11
        if not isinstance(v, PaymentMethodDataResponseOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf11`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf12
        if not isinstance(v, PaymentMethodDataResponseOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf12`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf13
        if not isinstance(v, PaymentMethodDataResponseOneOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf13`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf14
        if not isinstance(v, PaymentMethodDataResponseOneOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf14`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf15
        if not isinstance(v, PaymentMethodDataResponseOneOf15):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf15`")
        else:
            match += 1
        # validate data type: PaymentMethodDataResponseOneOf16
        if not isinstance(v, PaymentMethodDataResponseOneOf16):
            error_messages.append(f"Error! Input type `{type(v)}` is not `PaymentMethodDataResponseOneOf16`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in PaymentMethodDataResponse with oneOf schemas: PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf16, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in PaymentMethodDataResponse with oneOf schemas: PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf16, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into PaymentMethodDataResponseOneOf
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf1
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf2
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf3
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf4
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf5
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf6
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf7
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf8
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf9
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf10
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf11
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf12
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf13
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf13.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf14
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf15
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf15.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into PaymentMethodDataResponseOneOf16
        try:
            instance.actual_instance = PaymentMethodDataResponseOneOf16.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into PaymentMethodDataResponse with oneOf schemas: PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf16, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PaymentMethodDataResponse with oneOf schemas: PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf16, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], PaymentMethodDataResponseOneOf, PaymentMethodDataResponseOneOf1, PaymentMethodDataResponseOneOf10, PaymentMethodDataResponseOneOf11, PaymentMethodDataResponseOneOf12, PaymentMethodDataResponseOneOf13, PaymentMethodDataResponseOneOf14, PaymentMethodDataResponseOneOf15, PaymentMethodDataResponseOneOf16, PaymentMethodDataResponseOneOf2, PaymentMethodDataResponseOneOf3, PaymentMethodDataResponseOneOf4, PaymentMethodDataResponseOneOf5, PaymentMethodDataResponseOneOf6, PaymentMethodDataResponseOneOf7, PaymentMethodDataResponseOneOf8, PaymentMethodDataResponseOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



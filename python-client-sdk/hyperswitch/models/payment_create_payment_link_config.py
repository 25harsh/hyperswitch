# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.payment_link_background_image_config import PaymentLinkBackgroundImageConfig
from hyperswitch.models.payment_link_details_layout import PaymentLinkDetailsLayout
from hyperswitch.models.payment_link_sdk_label_type import PaymentLinkSdkLabelType
from hyperswitch.models.payment_link_show_sdk_terms import PaymentLinkShowSdkTerms
from hyperswitch.models.payment_link_transaction_details import PaymentLinkTransactionDetails
from typing import Optional, Set
from typing_extensions import Self

class PaymentCreatePaymentLinkConfig(BaseModel):
    """
    Configure a custom payment link for the particular payment
    """ # noqa: E501
    theme: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="custom theme for the payment link")
    logo: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="merchant display logo")
    seller_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Custom merchant name for payment link")
    sdk_layout: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Custom layout for sdk")
    display_sdk_only: Optional[StrictBool] = Field(default=False, description="Display only the sdk for payment link")
    enabled_saved_payment_method: Optional[StrictBool] = Field(default=False, description="Enable saved payment method option for payment link")
    hide_card_nickname_field: Optional[StrictBool] = Field(default=False, description="Hide card nickname field option for payment link")
    show_card_form_by_default: Optional[StrictBool] = Field(default=True, description="Show card form by default for payment link")
    transaction_details: Optional[List[PaymentLinkTransactionDetails]] = Field(default=None, description="Dynamic details related to merchant to be rendered in payment link")
    background_image: Optional[PaymentLinkBackgroundImageConfig] = None
    details_layout: Optional[PaymentLinkDetailsLayout] = None
    payment_button_text: Optional[StrictStr] = Field(default=None, description="Text for payment link's handle confirm button")
    custom_message_for_card_terms: Optional[StrictStr] = Field(default=None, description="Text for customizing message for card terms")
    payment_button_colour: Optional[StrictStr] = Field(default=None, description="Custom background colour for payment link's handle confirm button")
    skip_status_screen: Optional[StrictBool] = Field(default=None, description="Skip the status screen after payment completion")
    payment_button_text_colour: Optional[StrictStr] = Field(default=None, description="Custom text colour for payment link's handle confirm button")
    background_colour: Optional[StrictStr] = Field(default=None, description="Custom background colour for the payment link")
    sdk_ui_rules: Optional[Dict[str, Dict[str, StrictStr]]] = Field(default=None, description="SDK configuration rules")
    payment_link_ui_rules: Optional[Dict[str, Dict[str, StrictStr]]] = Field(default=None, description="Payment link configuration rules")
    enable_button_only_on_form_ready: Optional[StrictBool] = Field(default=None, description="Flag to enable the button only when the payment form is ready for submission")
    payment_form_header_text: Optional[StrictStr] = Field(default=None, description="Optional header for the SDK's payment form")
    payment_form_label_type: Optional[PaymentLinkSdkLabelType] = None
    show_card_terms: Optional[PaymentLinkShowSdkTerms] = None
    __properties: ClassVar[List[str]] = ["theme", "logo", "seller_name", "sdk_layout", "display_sdk_only", "enabled_saved_payment_method", "hide_card_nickname_field", "show_card_form_by_default", "transaction_details", "background_image", "details_layout", "payment_button_text", "custom_message_for_card_terms", "payment_button_colour", "skip_status_screen", "payment_button_text_colour", "background_colour", "sdk_ui_rules", "payment_link_ui_rules", "enable_button_only_on_form_ready", "payment_form_header_text", "payment_form_label_type", "show_card_terms"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentCreatePaymentLinkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in transaction_details (list)
        _items = []
        if self.transaction_details:
            for _item_transaction_details in self.transaction_details:
                if _item_transaction_details:
                    _items.append(_item_transaction_details.to_dict())
            _dict['transaction_details'] = _items
        # override the default output from pydantic by calling `to_dict()` of background_image
        if self.background_image:
            _dict['background_image'] = self.background_image.to_dict()
        # set to None if theme (nullable) is None
        # and model_fields_set contains the field
        if self.theme is None and "theme" in self.model_fields_set:
            _dict['theme'] = None

        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if seller_name (nullable) is None
        # and model_fields_set contains the field
        if self.seller_name is None and "seller_name" in self.model_fields_set:
            _dict['seller_name'] = None

        # set to None if sdk_layout (nullable) is None
        # and model_fields_set contains the field
        if self.sdk_layout is None and "sdk_layout" in self.model_fields_set:
            _dict['sdk_layout'] = None

        # set to None if display_sdk_only (nullable) is None
        # and model_fields_set contains the field
        if self.display_sdk_only is None and "display_sdk_only" in self.model_fields_set:
            _dict['display_sdk_only'] = None

        # set to None if enabled_saved_payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.enabled_saved_payment_method is None and "enabled_saved_payment_method" in self.model_fields_set:
            _dict['enabled_saved_payment_method'] = None

        # set to None if hide_card_nickname_field (nullable) is None
        # and model_fields_set contains the field
        if self.hide_card_nickname_field is None and "hide_card_nickname_field" in self.model_fields_set:
            _dict['hide_card_nickname_field'] = None

        # set to None if show_card_form_by_default (nullable) is None
        # and model_fields_set contains the field
        if self.show_card_form_by_default is None and "show_card_form_by_default" in self.model_fields_set:
            _dict['show_card_form_by_default'] = None

        # set to None if transaction_details (nullable) is None
        # and model_fields_set contains the field
        if self.transaction_details is None and "transaction_details" in self.model_fields_set:
            _dict['transaction_details'] = None

        # set to None if background_image (nullable) is None
        # and model_fields_set contains the field
        if self.background_image is None and "background_image" in self.model_fields_set:
            _dict['background_image'] = None

        # set to None if details_layout (nullable) is None
        # and model_fields_set contains the field
        if self.details_layout is None and "details_layout" in self.model_fields_set:
            _dict['details_layout'] = None

        # set to None if payment_button_text (nullable) is None
        # and model_fields_set contains the field
        if self.payment_button_text is None and "payment_button_text" in self.model_fields_set:
            _dict['payment_button_text'] = None

        # set to None if custom_message_for_card_terms (nullable) is None
        # and model_fields_set contains the field
        if self.custom_message_for_card_terms is None and "custom_message_for_card_terms" in self.model_fields_set:
            _dict['custom_message_for_card_terms'] = None

        # set to None if payment_button_colour (nullable) is None
        # and model_fields_set contains the field
        if self.payment_button_colour is None and "payment_button_colour" in self.model_fields_set:
            _dict['payment_button_colour'] = None

        # set to None if skip_status_screen (nullable) is None
        # and model_fields_set contains the field
        if self.skip_status_screen is None and "skip_status_screen" in self.model_fields_set:
            _dict['skip_status_screen'] = None

        # set to None if payment_button_text_colour (nullable) is None
        # and model_fields_set contains the field
        if self.payment_button_text_colour is None and "payment_button_text_colour" in self.model_fields_set:
            _dict['payment_button_text_colour'] = None

        # set to None if background_colour (nullable) is None
        # and model_fields_set contains the field
        if self.background_colour is None and "background_colour" in self.model_fields_set:
            _dict['background_colour'] = None

        # set to None if sdk_ui_rules (nullable) is None
        # and model_fields_set contains the field
        if self.sdk_ui_rules is None and "sdk_ui_rules" in self.model_fields_set:
            _dict['sdk_ui_rules'] = None

        # set to None if payment_link_ui_rules (nullable) is None
        # and model_fields_set contains the field
        if self.payment_link_ui_rules is None and "payment_link_ui_rules" in self.model_fields_set:
            _dict['payment_link_ui_rules'] = None

        # set to None if enable_button_only_on_form_ready (nullable) is None
        # and model_fields_set contains the field
        if self.enable_button_only_on_form_ready is None and "enable_button_only_on_form_ready" in self.model_fields_set:
            _dict['enable_button_only_on_form_ready'] = None

        # set to None if payment_form_header_text (nullable) is None
        # and model_fields_set contains the field
        if self.payment_form_header_text is None and "payment_form_header_text" in self.model_fields_set:
            _dict['payment_form_header_text'] = None

        # set to None if payment_form_label_type (nullable) is None
        # and model_fields_set contains the field
        if self.payment_form_label_type is None and "payment_form_label_type" in self.model_fields_set:
            _dict['payment_form_label_type'] = None

        # set to None if show_card_terms (nullable) is None
        # and model_fields_set contains the field
        if self.show_card_terms is None and "show_card_terms" in self.model_fields_set:
            _dict['show_card_terms'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentCreatePaymentLinkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "theme": obj.get("theme"),
            "logo": obj.get("logo"),
            "seller_name": obj.get("seller_name"),
            "sdk_layout": obj.get("sdk_layout"),
            "display_sdk_only": obj.get("display_sdk_only") if obj.get("display_sdk_only") is not None else False,
            "enabled_saved_payment_method": obj.get("enabled_saved_payment_method") if obj.get("enabled_saved_payment_method") is not None else False,
            "hide_card_nickname_field": obj.get("hide_card_nickname_field") if obj.get("hide_card_nickname_field") is not None else False,
            "show_card_form_by_default": obj.get("show_card_form_by_default") if obj.get("show_card_form_by_default") is not None else True,
            "transaction_details": [PaymentLinkTransactionDetails.from_dict(_item) for _item in obj["transaction_details"]] if obj.get("transaction_details") is not None else None,
            "background_image": PaymentLinkBackgroundImageConfig.from_dict(obj["background_image"]) if obj.get("background_image") is not None else None,
            "details_layout": obj.get("details_layout"),
            "payment_button_text": obj.get("payment_button_text"),
            "custom_message_for_card_terms": obj.get("custom_message_for_card_terms"),
            "payment_button_colour": obj.get("payment_button_colour"),
            "skip_status_screen": obj.get("skip_status_screen"),
            "payment_button_text_colour": obj.get("payment_button_text_colour"),
            "background_colour": obj.get("background_colour"),
            "sdk_ui_rules": obj.get("sdk_ui_rules"),
            "payment_link_ui_rules": obj.get("payment_link_ui_rules"),
            "enable_button_only_on_form_ready": obj.get("enable_button_only_on_form_ready"),
            "payment_form_header_text": obj.get("payment_form_header_text"),
            "payment_form_label_type": obj.get("payment_form_label_type"),
            "show_card_terms": obj.get("show_card_terms")
        })
        return _obj



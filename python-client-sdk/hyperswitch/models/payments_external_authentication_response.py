# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.transaction_status import TransactionStatus
from typing import Optional, Set
from typing_extensions import Self

class PaymentsExternalAuthenticationResponse(BaseModel):
    """
    PaymentsExternalAuthenticationResponse
    """ # noqa: E501
    trans_status: TransactionStatus
    acs_url: Optional[StrictStr] = Field(default=None, description="Access Server URL to be used for challenge submission")
    challenge_request: Optional[StrictStr] = Field(default=None, description="Challenge request which should be sent to acs_url")
    acs_reference_number: Optional[StrictStr] = Field(default=None, description="Unique identifier assigned by the EMVCo(Europay, Mastercard and Visa)")
    acs_trans_id: Optional[StrictStr] = Field(default=None, description="Unique identifier assigned by the ACS to identify a single transaction")
    three_dsserver_trans_id: Optional[StrictStr] = Field(default=None, description="Unique identifier assigned by the 3DS Server to identify a single transaction")
    acs_signed_content: Optional[StrictStr] = Field(default=None, description="Contains the JWS object created by the ACS for the ARes(Authentication Response) message")
    three_ds_requestor_url: StrictStr = Field(description="Three DS Requestor URL")
    three_ds_requestor_app_url: Optional[StrictStr] = Field(default=None, description="Merchant app declaring their URL within the CReq message so that the Authentication app can call the Merchant app after OOB authentication has occurred")
    __properties: ClassVar[List[str]] = ["trans_status", "acs_url", "challenge_request", "acs_reference_number", "acs_trans_id", "three_dsserver_trans_id", "acs_signed_content", "three_ds_requestor_url", "three_ds_requestor_app_url"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PaymentsExternalAuthenticationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if acs_url (nullable) is None
        # and model_fields_set contains the field
        if self.acs_url is None and "acs_url" in self.model_fields_set:
            _dict['acs_url'] = None

        # set to None if challenge_request (nullable) is None
        # and model_fields_set contains the field
        if self.challenge_request is None and "challenge_request" in self.model_fields_set:
            _dict['challenge_request'] = None

        # set to None if acs_reference_number (nullable) is None
        # and model_fields_set contains the field
        if self.acs_reference_number is None and "acs_reference_number" in self.model_fields_set:
            _dict['acs_reference_number'] = None

        # set to None if acs_trans_id (nullable) is None
        # and model_fields_set contains the field
        if self.acs_trans_id is None and "acs_trans_id" in self.model_fields_set:
            _dict['acs_trans_id'] = None

        # set to None if three_dsserver_trans_id (nullable) is None
        # and model_fields_set contains the field
        if self.three_dsserver_trans_id is None and "three_dsserver_trans_id" in self.model_fields_set:
            _dict['three_dsserver_trans_id'] = None

        # set to None if acs_signed_content (nullable) is None
        # and model_fields_set contains the field
        if self.acs_signed_content is None and "acs_signed_content" in self.model_fields_set:
            _dict['acs_signed_content'] = None

        # set to None if three_ds_requestor_app_url (nullable) is None
        # and model_fields_set contains the field
        if self.three_ds_requestor_app_url is None and "three_ds_requestor_app_url" in self.model_fields_set:
            _dict['three_ds_requestor_app_url'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PaymentsExternalAuthenticationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "trans_status": obj.get("trans_status"),
            "acs_url": obj.get("acs_url"),
            "challenge_request": obj.get("challenge_request"),
            "acs_reference_number": obj.get("acs_reference_number"),
            "acs_trans_id": obj.get("acs_trans_id"),
            "three_dsserver_trans_id": obj.get("three_dsserver_trans_id"),
            "acs_signed_content": obj.get("acs_signed_content"),
            "three_ds_requestor_url": obj.get("three_ds_requestor_url"),
            "three_ds_requestor_app_url": obj.get("three_ds_requestor_app_url")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.address import Address
from hyperswitch.models.bank import Bank
from hyperswitch.models.card_detail_from_locker import CardDetailFromLocker
from hyperswitch.models.masked_bank_details import MaskedBankDetails
from hyperswitch.models.payment_experience import PaymentExperience
from hyperswitch.models.payment_method import PaymentMethod
from hyperswitch.models.payment_method_issuer_code import PaymentMethodIssuerCode
from hyperswitch.models.payment_method_type import PaymentMethodType
from hyperswitch.models.surcharge_details_response import SurchargeDetailsResponse
from typing import Optional, Set
from typing_extensions import Self

class CustomerPaymentMethod(BaseModel):
    """
    CustomerPaymentMethod
    """ # noqa: E501
    payment_token: StrictStr = Field(description="Token for payment method in temporary card locker which gets refreshed often")
    payment_method_id: StrictStr = Field(description="The unique identifier of the customer.")
    customer_id: Annotated[str, Field(min_length=1, strict=True, max_length=64)] = Field(description="The unique identifier of the customer.")
    payment_method: PaymentMethod
    payment_method_type: Optional[PaymentMethodType] = None
    payment_method_issuer: Optional[StrictStr] = Field(default=None, description="The name of the bank/ provider issuing the payment method to the end user")
    payment_method_issuer_code: Optional[PaymentMethodIssuerCode] = None
    recurring_enabled: StrictBool = Field(description="Indicates whether the payment method is eligible for recurring payments")
    installment_payment_enabled: StrictBool = Field(description="Indicates whether the payment method is eligible for installment payments")
    payment_experience: Optional[List[PaymentExperience]] = Field(default=None, description="Type of payment experience enabled with the connector")
    card: Optional[CardDetailFromLocker] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.")
    created: Optional[datetime] = Field(default=None, description="A timestamp (ISO 8601 code) that determines when the payment method was created")
    bank_transfer: Optional[Bank] = None
    bank: Optional[MaskedBankDetails] = None
    surcharge_details: Optional[SurchargeDetailsResponse] = None
    requires_cvv: StrictBool = Field(description="Whether this payment method requires CVV to be collected")
    last_used_at: Optional[datetime] = Field(default=None, description="A timestamp (ISO 8601 code) that determines when the payment method was last used")
    default_payment_method_set: StrictBool = Field(description="Indicates if the payment method has been set to default or not")
    billing: Optional[Address] = None
    __properties: ClassVar[List[str]] = ["payment_token", "payment_method_id", "customer_id", "payment_method", "payment_method_type", "payment_method_issuer", "payment_method_issuer_code", "recurring_enabled", "installment_payment_enabled", "payment_experience", "card", "metadata", "created", "bank_transfer", "bank", "surcharge_details", "requires_cvv", "last_used_at", "default_payment_method_set", "billing"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CustomerPaymentMethod from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of card
        if self.card:
            _dict['card'] = self.card.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_transfer
        if self.bank_transfer:
            _dict['bank_transfer'] = self.bank_transfer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank
        if self.bank:
            _dict['bank'] = self.bank.to_dict()
        # override the default output from pydantic by calling `to_dict()` of surcharge_details
        if self.surcharge_details:
            _dict['surcharge_details'] = self.surcharge_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # set to None if payment_method_type (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method_type is None and "payment_method_type" in self.model_fields_set:
            _dict['payment_method_type'] = None

        # set to None if payment_method_issuer (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method_issuer is None and "payment_method_issuer" in self.model_fields_set:
            _dict['payment_method_issuer'] = None

        # set to None if payment_method_issuer_code (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method_issuer_code is None and "payment_method_issuer_code" in self.model_fields_set:
            _dict['payment_method_issuer_code'] = None

        # set to None if payment_experience (nullable) is None
        # and model_fields_set contains the field
        if self.payment_experience is None and "payment_experience" in self.model_fields_set:
            _dict['payment_experience'] = None

        # set to None if card (nullable) is None
        # and model_fields_set contains the field
        if self.card is None and "card" in self.model_fields_set:
            _dict['card'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if bank_transfer (nullable) is None
        # and model_fields_set contains the field
        if self.bank_transfer is None and "bank_transfer" in self.model_fields_set:
            _dict['bank_transfer'] = None

        # set to None if bank (nullable) is None
        # and model_fields_set contains the field
        if self.bank is None and "bank" in self.model_fields_set:
            _dict['bank'] = None

        # set to None if surcharge_details (nullable) is None
        # and model_fields_set contains the field
        if self.surcharge_details is None and "surcharge_details" in self.model_fields_set:
            _dict['surcharge_details'] = None

        # set to None if last_used_at (nullable) is None
        # and model_fields_set contains the field
        if self.last_used_at is None and "last_used_at" in self.model_fields_set:
            _dict['last_used_at'] = None

        # set to None if billing (nullable) is None
        # and model_fields_set contains the field
        if self.billing is None and "billing" in self.model_fields_set:
            _dict['billing'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CustomerPaymentMethod from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_token": obj.get("payment_token"),
            "payment_method_id": obj.get("payment_method_id"),
            "customer_id": obj.get("customer_id"),
            "payment_method": obj.get("payment_method"),
            "payment_method_type": obj.get("payment_method_type"),
            "payment_method_issuer": obj.get("payment_method_issuer"),
            "payment_method_issuer_code": obj.get("payment_method_issuer_code"),
            "recurring_enabled": obj.get("recurring_enabled"),
            "installment_payment_enabled": obj.get("installment_payment_enabled"),
            "payment_experience": obj.get("payment_experience"),
            "card": CardDetailFromLocker.from_dict(obj["card"]) if obj.get("card") is not None else None,
            "metadata": obj.get("metadata"),
            "created": obj.get("created"),
            "bank_transfer": Bank.from_dict(obj["bank_transfer"]) if obj.get("bank_transfer") is not None else None,
            "bank": MaskedBankDetails.from_dict(obj["bank"]) if obj.get("bank") is not None else None,
            "surcharge_details": SurchargeDetailsResponse.from_dict(obj["surcharge_details"]) if obj.get("surcharge_details") is not None else None,
            "requires_cvv": obj.get("requires_cvv"),
            "last_used_at": obj.get("last_used_at"),
            "default_payment_method_set": obj.get("default_payment_method_set"),
            "billing": Address.from_dict(obj["billing"]) if obj.get("billing") is not None else None
        })
        return _obj



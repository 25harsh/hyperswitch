# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.refund_status import RefundStatus
from hyperswitch.models.split_refund import SplitRefund
from typing import Optional, Set
from typing_extensions import Self

class RefundResponse(BaseModel):
    """
    RefundResponse
    """ # noqa: E501
    refund_id: StrictStr = Field(description="Unique Identifier for the refund")
    payment_id: StrictStr = Field(description="The payment id against which refund is initiated")
    amount: Annotated[int, Field(strict=True, ge=100)] = Field(description="The refund amount, which should be less than or equal to the total payment amount. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc")
    currency: StrictStr = Field(description="The three-letter ISO currency code")
    status: RefundStatus
    reason: Optional[StrictStr] = Field(default=None, description="An arbitrary string attached to the object. Often useful for displaying to users and your customer support executive")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object")
    error_message: Optional[StrictStr] = Field(default=None, description="The error message")
    error_code: Optional[StrictStr] = Field(default=None, description="The code for the error")
    unified_code: Optional[StrictStr] = Field(default=None, description="Error code unified across the connectors is received here if there was an error while calling connector")
    unified_message: Optional[StrictStr] = Field(default=None, description="Error message unified across the connectors is received here if there was an error while calling connector")
    created_at: Optional[datetime] = Field(default=None, description="The timestamp at which refund is created")
    updated_at: Optional[datetime] = Field(default=None, description="The timestamp at which refund is updated")
    connector: StrictStr = Field(description="The connector used for the refund and the corresponding payment")
    profile_id: Optional[StrictStr] = Field(default=None, description="The id of business profile for this refund")
    merchant_connector_id: Optional[StrictStr] = Field(default=None, description="The merchant_connector_id of the processor through which this payment went through")
    split_refunds: Optional[SplitRefund] = None
    issuer_error_code: Optional[StrictStr] = Field(default=None, description="Error code received from the issuer in case of failed refunds")
    issuer_error_message: Optional[StrictStr] = Field(default=None, description="Error message received from the issuer in case of failed refunds")
    __properties: ClassVar[List[str]] = ["refund_id", "payment_id", "amount", "currency", "status", "reason", "metadata", "error_message", "error_code", "unified_code", "unified_message", "created_at", "updated_at", "connector", "profile_id", "merchant_connector_id", "split_refunds", "issuer_error_code", "issuer_error_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefundResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of split_refunds
        if self.split_refunds:
            _dict['split_refunds'] = self.split_refunds.to_dict()
        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['error_code'] = None

        # set to None if unified_code (nullable) is None
        # and model_fields_set contains the field
        if self.unified_code is None and "unified_code" in self.model_fields_set:
            _dict['unified_code'] = None

        # set to None if unified_message (nullable) is None
        # and model_fields_set contains the field
        if self.unified_message is None and "unified_message" in self.model_fields_set:
            _dict['unified_message'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if profile_id (nullable) is None
        # and model_fields_set contains the field
        if self.profile_id is None and "profile_id" in self.model_fields_set:
            _dict['profile_id'] = None

        # set to None if merchant_connector_id (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_connector_id is None and "merchant_connector_id" in self.model_fields_set:
            _dict['merchant_connector_id'] = None

        # set to None if split_refunds (nullable) is None
        # and model_fields_set contains the field
        if self.split_refunds is None and "split_refunds" in self.model_fields_set:
            _dict['split_refunds'] = None

        # set to None if issuer_error_code (nullable) is None
        # and model_fields_set contains the field
        if self.issuer_error_code is None and "issuer_error_code" in self.model_fields_set:
            _dict['issuer_error_code'] = None

        # set to None if issuer_error_message (nullable) is None
        # and model_fields_set contains the field
        if self.issuer_error_message is None and "issuer_error_message" in self.model_fields_set:
            _dict['issuer_error_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefundResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "refund_id": obj.get("refund_id"),
            "payment_id": obj.get("payment_id"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "status": obj.get("status"),
            "reason": obj.get("reason"),
            "metadata": obj.get("metadata"),
            "error_message": obj.get("error_message"),
            "error_code": obj.get("error_code"),
            "unified_code": obj.get("unified_code"),
            "unified_message": obj.get("unified_message"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "connector": obj.get("connector"),
            "profile_id": obj.get("profile_id"),
            "merchant_connector_id": obj.get("merchant_connector_id"),
            "split_refunds": SplitRefund.from_dict(obj["split_refunds"]) if obj.get("split_refunds") is not None else None,
            "issuer_error_code": obj.get("issuer_error_code"),
            "issuer_error_message": obj.get("issuer_error_message")
        })
        return _obj



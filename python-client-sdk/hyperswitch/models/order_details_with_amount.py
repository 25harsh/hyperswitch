# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from hyperswitch.models.product_type import ProductType
from typing import Optional, Set
from typing_extensions import Self

class OrderDetailsWithAmount(BaseModel):
    """
    OrderDetailsWithAmount
    """ # noqa: E501
    product_name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Name of the product that is being purchased")
    quantity: Annotated[int, Field(strict=True, ge=0)] = Field(description="The quantity of the product to be purchased")
    amount: StrictInt = Field(description="the amount per quantity of product")
    tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="tax rate applicable to the product")
    total_tax_amount: Optional[StrictInt] = Field(default=None, description="total tax amount applicable to the product")
    requires_shipping: Optional[StrictBool] = None
    product_img_link: Optional[StrictStr] = Field(default=None, description="The image URL of the product")
    product_id: Optional[StrictStr] = Field(default=None, description="ID of the product that is being purchased")
    category: Optional[StrictStr] = Field(default=None, description="Category of the product that is being purchased")
    sub_category: Optional[StrictStr] = Field(default=None, description="Sub category of the product that is being purchased")
    brand: Optional[StrictStr] = Field(default=None, description="Brand of the product that is being purchased")
    product_type: Optional[ProductType] = None
    product_tax_code: Optional[StrictStr] = Field(default=None, description="The tax code for the product")
    __properties: ClassVar[List[str]] = ["product_name", "quantity", "amount", "tax_rate", "total_tax_amount", "requires_shipping", "product_img_link", "product_id", "category", "sub_category", "brand", "product_type", "product_tax_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrderDetailsWithAmount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if tax_rate (nullable) is None
        # and model_fields_set contains the field
        if self.tax_rate is None and "tax_rate" in self.model_fields_set:
            _dict['tax_rate'] = None

        # set to None if total_tax_amount (nullable) is None
        # and model_fields_set contains the field
        if self.total_tax_amount is None and "total_tax_amount" in self.model_fields_set:
            _dict['total_tax_amount'] = None

        # set to None if requires_shipping (nullable) is None
        # and model_fields_set contains the field
        if self.requires_shipping is None and "requires_shipping" in self.model_fields_set:
            _dict['requires_shipping'] = None

        # set to None if product_img_link (nullable) is None
        # and model_fields_set contains the field
        if self.product_img_link is None and "product_img_link" in self.model_fields_set:
            _dict['product_img_link'] = None

        # set to None if product_id (nullable) is None
        # and model_fields_set contains the field
        if self.product_id is None and "product_id" in self.model_fields_set:
            _dict['product_id'] = None

        # set to None if category (nullable) is None
        # and model_fields_set contains the field
        if self.category is None and "category" in self.model_fields_set:
            _dict['category'] = None

        # set to None if sub_category (nullable) is None
        # and model_fields_set contains the field
        if self.sub_category is None and "sub_category" in self.model_fields_set:
            _dict['sub_category'] = None

        # set to None if brand (nullable) is None
        # and model_fields_set contains the field
        if self.brand is None and "brand" in self.model_fields_set:
            _dict['brand'] = None

        # set to None if product_type (nullable) is None
        # and model_fields_set contains the field
        if self.product_type is None and "product_type" in self.model_fields_set:
            _dict['product_type'] = None

        # set to None if product_tax_code (nullable) is None
        # and model_fields_set contains the field
        if self.product_tax_code is None and "product_tax_code" in self.model_fields_set:
            _dict['product_tax_code'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrderDetailsWithAmount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product_name": obj.get("product_name"),
            "quantity": obj.get("quantity"),
            "amount": obj.get("amount"),
            "tax_rate": obj.get("tax_rate"),
            "total_tax_amount": obj.get("total_tax_amount"),
            "requires_shipping": obj.get("requires_shipping"),
            "product_img_link": obj.get("product_img_link"),
            "product_id": obj.get("product_id"),
            "category": obj.get("category"),
            "sub_category": obj.get("sub_category"),
            "brand": obj.get("brand"),
            "product_type": obj.get("product_type"),
            "product_tax_code": obj.get("product_tax_code")
        })
        return _obj



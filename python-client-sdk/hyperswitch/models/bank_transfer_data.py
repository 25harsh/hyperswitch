# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.bank_transfer_additional_data_one_of12 import BankTransferAdditionalDataOneOf12
from hyperswitch.models.bank_transfer_additional_data_one_of14 import BankTransferAdditionalDataOneOf14
from hyperswitch.models.bank_transfer_data_one_of import BankTransferDataOneOf
from hyperswitch.models.bank_transfer_data_one_of1 import BankTransferDataOneOf1
from hyperswitch.models.bank_transfer_data_one_of10 import BankTransferDataOneOf10
from hyperswitch.models.bank_transfer_data_one_of11 import BankTransferDataOneOf11
from hyperswitch.models.bank_transfer_data_one_of12 import BankTransferDataOneOf12
from hyperswitch.models.bank_transfer_data_one_of2 import BankTransferDataOneOf2
from hyperswitch.models.bank_transfer_data_one_of3 import BankTransferDataOneOf3
from hyperswitch.models.bank_transfer_data_one_of4 import BankTransferDataOneOf4
from hyperswitch.models.bank_transfer_data_one_of5 import BankTransferDataOneOf5
from hyperswitch.models.bank_transfer_data_one_of6 import BankTransferDataOneOf6
from hyperswitch.models.bank_transfer_data_one_of7 import BankTransferDataOneOf7
from hyperswitch.models.bank_transfer_data_one_of8 import BankTransferDataOneOf8
from hyperswitch.models.bank_transfer_data_one_of9 import BankTransferDataOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BANKTRANSFERDATA_ONE_OF_SCHEMAS = ["BankTransferAdditionalDataOneOf12", "BankTransferAdditionalDataOneOf14", "BankTransferDataOneOf", "BankTransferDataOneOf1", "BankTransferDataOneOf10", "BankTransferDataOneOf11", "BankTransferDataOneOf12", "BankTransferDataOneOf2", "BankTransferDataOneOf3", "BankTransferDataOneOf4", "BankTransferDataOneOf5", "BankTransferDataOneOf6", "BankTransferDataOneOf7", "BankTransferDataOneOf8", "BankTransferDataOneOf9"]

class BankTransferData(BaseModel):
    """
    BankTransferData
    """
    # data type: BankTransferDataOneOf
    oneof_schema_1_validator: Optional[BankTransferDataOneOf] = None
    # data type: BankTransferDataOneOf1
    oneof_schema_2_validator: Optional[BankTransferDataOneOf1] = None
    # data type: BankTransferDataOneOf2
    oneof_schema_3_validator: Optional[BankTransferDataOneOf2] = None
    # data type: BankTransferDataOneOf3
    oneof_schema_4_validator: Optional[BankTransferDataOneOf3] = None
    # data type: BankTransferDataOneOf4
    oneof_schema_5_validator: Optional[BankTransferDataOneOf4] = None
    # data type: BankTransferDataOneOf5
    oneof_schema_6_validator: Optional[BankTransferDataOneOf5] = None
    # data type: BankTransferDataOneOf6
    oneof_schema_7_validator: Optional[BankTransferDataOneOf6] = None
    # data type: BankTransferDataOneOf7
    oneof_schema_8_validator: Optional[BankTransferDataOneOf7] = None
    # data type: BankTransferDataOneOf8
    oneof_schema_9_validator: Optional[BankTransferDataOneOf8] = None
    # data type: BankTransferDataOneOf9
    oneof_schema_10_validator: Optional[BankTransferDataOneOf9] = None
    # data type: BankTransferDataOneOf10
    oneof_schema_11_validator: Optional[BankTransferDataOneOf10] = None
    # data type: BankTransferDataOneOf11
    oneof_schema_12_validator: Optional[BankTransferDataOneOf11] = None
    # data type: BankTransferAdditionalDataOneOf12
    oneof_schema_13_validator: Optional[BankTransferAdditionalDataOneOf12] = None
    # data type: BankTransferDataOneOf12
    oneof_schema_14_validator: Optional[BankTransferDataOneOf12] = None
    # data type: BankTransferAdditionalDataOneOf14
    oneof_schema_15_validator: Optional[BankTransferAdditionalDataOneOf14] = None
    actual_instance: Optional[Union[BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf14, BankTransferDataOneOf, BankTransferDataOneOf1, BankTransferDataOneOf10, BankTransferDataOneOf11, BankTransferDataOneOf12, BankTransferDataOneOf2, BankTransferDataOneOf3, BankTransferDataOneOf4, BankTransferDataOneOf5, BankTransferDataOneOf6, BankTransferDataOneOf7, BankTransferDataOneOf8, BankTransferDataOneOf9]] = None
    one_of_schemas: Set[str] = { "BankTransferAdditionalDataOneOf12", "BankTransferAdditionalDataOneOf14", "BankTransferDataOneOf", "BankTransferDataOneOf1", "BankTransferDataOneOf10", "BankTransferDataOneOf11", "BankTransferDataOneOf12", "BankTransferDataOneOf2", "BankTransferDataOneOf3", "BankTransferDataOneOf4", "BankTransferDataOneOf5", "BankTransferDataOneOf6", "BankTransferDataOneOf7", "BankTransferDataOneOf8", "BankTransferDataOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BankTransferData.model_construct()
        error_messages = []
        match = 0
        # validate data type: BankTransferDataOneOf
        if not isinstance(v, BankTransferDataOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf1
        if not isinstance(v, BankTransferDataOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf1`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf2
        if not isinstance(v, BankTransferDataOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf2`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf3
        if not isinstance(v, BankTransferDataOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf3`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf4
        if not isinstance(v, BankTransferDataOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf4`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf5
        if not isinstance(v, BankTransferDataOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf5`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf6
        if not isinstance(v, BankTransferDataOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf6`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf7
        if not isinstance(v, BankTransferDataOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf7`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf8
        if not isinstance(v, BankTransferDataOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf8`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf9
        if not isinstance(v, BankTransferDataOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf9`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf10
        if not isinstance(v, BankTransferDataOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf10`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf11
        if not isinstance(v, BankTransferDataOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf11`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf12
        if not isinstance(v, BankTransferAdditionalDataOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf12`")
        else:
            match += 1
        # validate data type: BankTransferDataOneOf12
        if not isinstance(v, BankTransferDataOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferDataOneOf12`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf14
        if not isinstance(v, BankTransferAdditionalDataOneOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf14`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BankTransferData with oneOf schemas: BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf14, BankTransferDataOneOf, BankTransferDataOneOf1, BankTransferDataOneOf10, BankTransferDataOneOf11, BankTransferDataOneOf12, BankTransferDataOneOf2, BankTransferDataOneOf3, BankTransferDataOneOf4, BankTransferDataOneOf5, BankTransferDataOneOf6, BankTransferDataOneOf7, BankTransferDataOneOf8, BankTransferDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BankTransferData with oneOf schemas: BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf14, BankTransferDataOneOf, BankTransferDataOneOf1, BankTransferDataOneOf10, BankTransferDataOneOf11, BankTransferDataOneOf12, BankTransferDataOneOf2, BankTransferDataOneOf3, BankTransferDataOneOf4, BankTransferDataOneOf5, BankTransferDataOneOf6, BankTransferDataOneOf7, BankTransferDataOneOf8, BankTransferDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BankTransferDataOneOf
        try:
            instance.actual_instance = BankTransferDataOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf1
        try:
            instance.actual_instance = BankTransferDataOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf2
        try:
            instance.actual_instance = BankTransferDataOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf3
        try:
            instance.actual_instance = BankTransferDataOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf4
        try:
            instance.actual_instance = BankTransferDataOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf5
        try:
            instance.actual_instance = BankTransferDataOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf6
        try:
            instance.actual_instance = BankTransferDataOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf7
        try:
            instance.actual_instance = BankTransferDataOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf8
        try:
            instance.actual_instance = BankTransferDataOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf9
        try:
            instance.actual_instance = BankTransferDataOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf10
        try:
            instance.actual_instance = BankTransferDataOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf11
        try:
            instance.actual_instance = BankTransferDataOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf12
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferDataOneOf12
        try:
            instance.actual_instance = BankTransferDataOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf14
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BankTransferData with oneOf schemas: BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf14, BankTransferDataOneOf, BankTransferDataOneOf1, BankTransferDataOneOf10, BankTransferDataOneOf11, BankTransferDataOneOf12, BankTransferDataOneOf2, BankTransferDataOneOf3, BankTransferDataOneOf4, BankTransferDataOneOf5, BankTransferDataOneOf6, BankTransferDataOneOf7, BankTransferDataOneOf8, BankTransferDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BankTransferData with oneOf schemas: BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf14, BankTransferDataOneOf, BankTransferDataOneOf1, BankTransferDataOneOf10, BankTransferDataOneOf11, BankTransferDataOneOf12, BankTransferDataOneOf2, BankTransferDataOneOf3, BankTransferDataOneOf4, BankTransferDataOneOf5, BankTransferDataOneOf6, BankTransferDataOneOf7, BankTransferDataOneOf8, BankTransferDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf14, BankTransferDataOneOf, BankTransferDataOneOf1, BankTransferDataOneOf10, BankTransferDataOneOf11, BankTransferDataOneOf12, BankTransferDataOneOf2, BankTransferDataOneOf3, BankTransferDataOneOf4, BankTransferDataOneOf5, BankTransferDataOneOf6, BankTransferDataOneOf7, BankTransferDataOneOf8, BankTransferDataOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



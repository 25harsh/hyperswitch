# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.address import Address
from hyperswitch.models.country_alpha2 import CountryAlpha2
from hyperswitch.models.currency import Currency
from hyperswitch.models.customer_details_response import CustomerDetailsResponse
from hyperswitch.models.payout_attempt_response import PayoutAttemptResponse
from hyperswitch.models.payout_entity_type import PayoutEntityType
from hyperswitch.models.payout_link_response import PayoutLinkResponse
from hyperswitch.models.payout_method_data_response import PayoutMethodDataResponse
from hyperswitch.models.payout_send_priority import PayoutSendPriority
from hyperswitch.models.payout_status import PayoutStatus
from hyperswitch.models.payout_type import PayoutType
from typing import Optional, Set
from typing_extensions import Self

class PayoutCreateResponse(BaseModel):
    """
    PayoutCreateResponse
    """ # noqa: E501
    payout_id: Annotated[str, Field(min_length=30, strict=True, max_length=30)] = Field(description="Unique identifier for the payout. This ensures idempotency for multiple payouts that have been done by a single merchant. This field is auto generated and is returned in the API response.")
    merchant_id: Annotated[str, Field(strict=True, max_length=255)] = Field(description="This is an identifier for the merchant account. This is inferred from the API key provided during the request")
    amount: StrictInt = Field(description="The payout amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,")
    currency: Currency
    connector: Optional[StrictStr] = Field(default=None, description="The connector used for the payout")
    payout_type: Optional[PayoutType] = None
    payout_method_data: Optional[PayoutMethodDataResponse] = None
    billing: Optional[Address] = None
    auto_fulfill: StrictBool = Field(description="Set to true to confirm the payout without review, no further action required")
    customer_id: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The identifier for the customer object. If not provided the customer ID will be autogenerated.")
    customer: Optional[CustomerDetailsResponse] = None
    client_secret: StrictStr = Field(description="It's a token used for client side verification.")
    return_url: StrictStr = Field(description="The URL to redirect after the completion of the operation")
    business_country: CountryAlpha2
    business_label: Optional[StrictStr] = Field(default=None, description="Business label of the merchant for this payout")
    description: Optional[StrictStr] = Field(default=None, description="A description of the payout")
    entity_type: PayoutEntityType
    recurring: StrictBool = Field(description="Specifies whether or not the payout request is recurring")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.")
    merchant_connector_id: Optional[StrictStr] = Field(default=None, description="Unique identifier of the merchant connector account")
    status: PayoutStatus
    error_message: Optional[StrictStr] = Field(default=None, description="If there was an error while calling the connector the error message is received here")
    error_code: Optional[StrictStr] = Field(default=None, description="If there was an error while calling the connectors the code is received here")
    profile_id: StrictStr = Field(description="The business profile that is associated with this payout")
    created: Optional[datetime] = Field(default=None, description="Time when the payout was created")
    connector_transaction_id: Optional[StrictStr] = Field(default=None, description="Underlying processor's payout resource ID")
    priority: Optional[PayoutSendPriority] = None
    attempts: Optional[List[PayoutAttemptResponse]] = Field(default=None, description="List of attempts")
    payout_link: Optional[PayoutLinkResponse] = None
    email: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's email. _Deprecated: Use customer object instead._")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's name. _Deprecated: Use customer object instead._")
    phone: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's phone. _Deprecated: Use customer object instead._")
    phone_country_code: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Customer's phone country code. _Deprecated: Use customer object instead._")
    unified_code: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="(This field is not live yet) Error code unified across the connectors is received here in case of errors while calling the underlying connector")
    unified_message: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="(This field is not live yet) Error message unified across the connectors is received here in case of errors while calling the underlying connector")
    payout_method_id: Optional[StrictStr] = Field(default=None, description="Identifier for payout method")
    __properties: ClassVar[List[str]] = ["payout_id", "merchant_id", "amount", "currency", "connector", "payout_type", "payout_method_data", "billing", "auto_fulfill", "customer_id", "customer", "client_secret", "return_url", "business_country", "business_label", "description", "entity_type", "recurring", "metadata", "merchant_connector_id", "status", "error_message", "error_code", "profile_id", "created", "connector_transaction_id", "priority", "attempts", "payout_link", "email", "name", "phone", "phone_country_code", "unified_code", "unified_message", "payout_method_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayoutCreateResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of payout_method_data
        if self.payout_method_data:
            _dict['payout_method_data'] = self.payout_method_data.to_dict()
        # override the default output from pydantic by calling `to_dict()` of billing
        if self.billing:
            _dict['billing'] = self.billing.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in attempts (list)
        _items = []
        if self.attempts:
            for _item_attempts in self.attempts:
                if _item_attempts:
                    _items.append(_item_attempts.to_dict())
            _dict['attempts'] = _items
        # override the default output from pydantic by calling `to_dict()` of payout_link
        if self.payout_link:
            _dict['payout_link'] = self.payout_link.to_dict()
        # set to None if connector (nullable) is None
        # and model_fields_set contains the field
        if self.connector is None and "connector" in self.model_fields_set:
            _dict['connector'] = None

        # set to None if payout_type (nullable) is None
        # and model_fields_set contains the field
        if self.payout_type is None and "payout_type" in self.model_fields_set:
            _dict['payout_type'] = None

        # set to None if payout_method_data (nullable) is None
        # and model_fields_set contains the field
        if self.payout_method_data is None and "payout_method_data" in self.model_fields_set:
            _dict['payout_method_data'] = None

        # set to None if billing (nullable) is None
        # and model_fields_set contains the field
        if self.billing is None and "billing" in self.model_fields_set:
            _dict['billing'] = None

        # set to None if customer (nullable) is None
        # and model_fields_set contains the field
        if self.customer is None and "customer" in self.model_fields_set:
            _dict['customer'] = None

        # set to None if business_label (nullable) is None
        # and model_fields_set contains the field
        if self.business_label is None and "business_label" in self.model_fields_set:
            _dict['business_label'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if merchant_connector_id (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_connector_id is None and "merchant_connector_id" in self.model_fields_set:
            _dict['merchant_connector_id'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['error_code'] = None

        # set to None if created (nullable) is None
        # and model_fields_set contains the field
        if self.created is None and "created" in self.model_fields_set:
            _dict['created'] = None

        # set to None if connector_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.connector_transaction_id is None and "connector_transaction_id" in self.model_fields_set:
            _dict['connector_transaction_id'] = None

        # set to None if priority (nullable) is None
        # and model_fields_set contains the field
        if self.priority is None and "priority" in self.model_fields_set:
            _dict['priority'] = None

        # set to None if attempts (nullable) is None
        # and model_fields_set contains the field
        if self.attempts is None and "attempts" in self.model_fields_set:
            _dict['attempts'] = None

        # set to None if payout_link (nullable) is None
        # and model_fields_set contains the field
        if self.payout_link is None and "payout_link" in self.model_fields_set:
            _dict['payout_link'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if phone (nullable) is None
        # and model_fields_set contains the field
        if self.phone is None and "phone" in self.model_fields_set:
            _dict['phone'] = None

        # set to None if phone_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.phone_country_code is None and "phone_country_code" in self.model_fields_set:
            _dict['phone_country_code'] = None

        # set to None if unified_code (nullable) is None
        # and model_fields_set contains the field
        if self.unified_code is None and "unified_code" in self.model_fields_set:
            _dict['unified_code'] = None

        # set to None if unified_message (nullable) is None
        # and model_fields_set contains the field
        if self.unified_message is None and "unified_message" in self.model_fields_set:
            _dict['unified_message'] = None

        # set to None if payout_method_id (nullable) is None
        # and model_fields_set contains the field
        if self.payout_method_id is None and "payout_method_id" in self.model_fields_set:
            _dict['payout_method_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayoutCreateResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payout_id": obj.get("payout_id"),
            "merchant_id": obj.get("merchant_id"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "connector": obj.get("connector"),
            "payout_type": obj.get("payout_type"),
            "payout_method_data": PayoutMethodDataResponse.from_dict(obj["payout_method_data"]) if obj.get("payout_method_data") is not None else None,
            "billing": Address.from_dict(obj["billing"]) if obj.get("billing") is not None else None,
            "auto_fulfill": obj.get("auto_fulfill") if obj.get("auto_fulfill") is not None else False,
            "customer_id": obj.get("customer_id"),
            "customer": CustomerDetailsResponse.from_dict(obj["customer"]) if obj.get("customer") is not None else None,
            "client_secret": obj.get("client_secret"),
            "return_url": obj.get("return_url"),
            "business_country": obj.get("business_country"),
            "business_label": obj.get("business_label"),
            "description": obj.get("description"),
            "entity_type": obj.get("entity_type"),
            "recurring": obj.get("recurring") if obj.get("recurring") is not None else False,
            "metadata": obj.get("metadata"),
            "merchant_connector_id": obj.get("merchant_connector_id"),
            "status": obj.get("status"),
            "error_message": obj.get("error_message"),
            "error_code": obj.get("error_code"),
            "profile_id": obj.get("profile_id"),
            "created": obj.get("created"),
            "connector_transaction_id": obj.get("connector_transaction_id"),
            "priority": obj.get("priority"),
            "attempts": [PayoutAttemptResponse.from_dict(_item) for _item in obj["attempts"]] if obj.get("attempts") is not None else None,
            "payout_link": PayoutLinkResponse.from_dict(obj["payout_link"]) if obj.get("payout_link") is not None else None,
            "email": obj.get("email"),
            "name": obj.get("name"),
            "phone": obj.get("phone"),
            "phone_country_code": obj.get("phone_country_code"),
            "unified_code": obj.get("unified_code"),
            "unified_message": obj.get("unified_message"),
            "payout_method_id": obj.get("payout_method_id")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict
from typing import Any, ClassVar, Dict, List
from hyperswitch.models.alfamart_voucher_data import AlfamartVoucherData
from hyperswitch.models.boleto_voucher_data import BoletoVoucherData
from hyperswitch.models.indomaret_voucher_data import IndomaretVoucherData
from hyperswitch.models.jcs_voucher_data import JCSVoucherData
from typing import Optional, Set
from typing_extensions import Self

class VoucherResponse(BaseModel):
    """
    VoucherResponse
    """ # noqa: E501
    boleto: BoletoVoucherData
    alfamart: AlfamartVoucherData
    indomaret: IndomaretVoucherData
    seven_eleven: JCSVoucherData
    lawson: JCSVoucherData
    mini_stop: JCSVoucherData
    family_mart: JCSVoucherData
    seicomart: JCSVoucherData
    pay_easy: JCSVoucherData
    __properties: ClassVar[List[str]] = ["boleto", "alfamart", "indomaret", "seven_eleven", "lawson", "mini_stop", "family_mart", "seicomart", "pay_easy"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of VoucherResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of boleto
        if self.boleto:
            _dict['boleto'] = self.boleto.to_dict()
        # override the default output from pydantic by calling `to_dict()` of alfamart
        if self.alfamart:
            _dict['alfamart'] = self.alfamart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of indomaret
        if self.indomaret:
            _dict['indomaret'] = self.indomaret.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seven_eleven
        if self.seven_eleven:
            _dict['seven_eleven'] = self.seven_eleven.to_dict()
        # override the default output from pydantic by calling `to_dict()` of lawson
        if self.lawson:
            _dict['lawson'] = self.lawson.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mini_stop
        if self.mini_stop:
            _dict['mini_stop'] = self.mini_stop.to_dict()
        # override the default output from pydantic by calling `to_dict()` of family_mart
        if self.family_mart:
            _dict['family_mart'] = self.family_mart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of seicomart
        if self.seicomart:
            _dict['seicomart'] = self.seicomart.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pay_easy
        if self.pay_easy:
            _dict['pay_easy'] = self.pay_easy.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of VoucherResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "boleto": BoletoVoucherData.from_dict(obj["boleto"]) if obj.get("boleto") is not None else None,
            "alfamart": AlfamartVoucherData.from_dict(obj["alfamart"]) if obj.get("alfamart") is not None else None,
            "indomaret": IndomaretVoucherData.from_dict(obj["indomaret"]) if obj.get("indomaret") is not None else None,
            "seven_eleven": JCSVoucherData.from_dict(obj["seven_eleven"]) if obj.get("seven_eleven") is not None else None,
            "lawson": JCSVoucherData.from_dict(obj["lawson"]) if obj.get("lawson") is not None else None,
            "mini_stop": JCSVoucherData.from_dict(obj["mini_stop"]) if obj.get("mini_stop") is not None else None,
            "family_mart": JCSVoucherData.from_dict(obj["family_mart"]) if obj.get("family_mart") is not None else None,
            "seicomart": JCSVoucherData.from_dict(obj["seicomart"]) if obj.get("seicomart") is not None else None,
            "pay_easy": JCSVoucherData.from_dict(obj["pay_easy"]) if obj.get("pay_easy") is not None else None
        })
        return _obj



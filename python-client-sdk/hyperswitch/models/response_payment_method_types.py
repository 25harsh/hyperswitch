# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.bank_code_response import BankCodeResponse
from hyperswitch.models.bank_debit_types import BankDebitTypes
from hyperswitch.models.bank_transfer_types import BankTransferTypes
from hyperswitch.models.card_network_types import CardNetworkTypes
from hyperswitch.models.payment_experience_types import PaymentExperienceTypes
from hyperswitch.models.payment_method_type import PaymentMethodType
from hyperswitch.models.required_field_info import RequiredFieldInfo
from hyperswitch.models.surcharge_details_response import SurchargeDetailsResponse
from typing import Optional, Set
from typing_extensions import Self

class ResponsePaymentMethodTypes(BaseModel):
    """
    ResponsePaymentMethodTypes
    """ # noqa: E501
    payment_method_type: PaymentMethodType
    payment_experience: Optional[List[PaymentExperienceTypes]] = Field(default=None, description="The list of payment experiences enabled, if applicable for a payment method type")
    card_networks: Optional[List[CardNetworkTypes]] = Field(default=None, description="The list of card networks enabled, if applicable for a payment method type")
    bank_names: Optional[List[BankCodeResponse]] = Field(default=None, description="The list of banks enabled, if applicable for a payment method type")
    bank_debits: Optional[BankDebitTypes] = None
    bank_transfers: Optional[BankTransferTypes] = None
    required_fields: Optional[Dict[str, RequiredFieldInfo]] = Field(default=None, description="Required fields for the payment_method_type.")
    surcharge_details: Optional[SurchargeDetailsResponse] = None
    pm_auth_connector: Optional[StrictStr] = Field(default=None, description="auth service connector label for this payment method type, if exists")
    __properties: ClassVar[List[str]] = ["payment_method_type", "payment_experience", "card_networks", "bank_names", "bank_debits", "bank_transfers", "required_fields", "surcharge_details", "pm_auth_connector"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ResponsePaymentMethodTypes from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in payment_experience (list)
        _items = []
        if self.payment_experience:
            for _item_payment_experience in self.payment_experience:
                if _item_payment_experience:
                    _items.append(_item_payment_experience.to_dict())
            _dict['payment_experience'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in card_networks (list)
        _items = []
        if self.card_networks:
            for _item_card_networks in self.card_networks:
                if _item_card_networks:
                    _items.append(_item_card_networks.to_dict())
            _dict['card_networks'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in bank_names (list)
        _items = []
        if self.bank_names:
            for _item_bank_names in self.bank_names:
                if _item_bank_names:
                    _items.append(_item_bank_names.to_dict())
            _dict['bank_names'] = _items
        # override the default output from pydantic by calling `to_dict()` of bank_debits
        if self.bank_debits:
            _dict['bank_debits'] = self.bank_debits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of bank_transfers
        if self.bank_transfers:
            _dict['bank_transfers'] = self.bank_transfers.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in required_fields (dict)
        _field_dict = {}
        if self.required_fields:
            for _key_required_fields in self.required_fields:
                if self.required_fields[_key_required_fields]:
                    _field_dict[_key_required_fields] = self.required_fields[_key_required_fields].to_dict()
            _dict['required_fields'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of surcharge_details
        if self.surcharge_details:
            _dict['surcharge_details'] = self.surcharge_details.to_dict()
        # set to None if payment_experience (nullable) is None
        # and model_fields_set contains the field
        if self.payment_experience is None and "payment_experience" in self.model_fields_set:
            _dict['payment_experience'] = None

        # set to None if card_networks (nullable) is None
        # and model_fields_set contains the field
        if self.card_networks is None and "card_networks" in self.model_fields_set:
            _dict['card_networks'] = None

        # set to None if bank_names (nullable) is None
        # and model_fields_set contains the field
        if self.bank_names is None and "bank_names" in self.model_fields_set:
            _dict['bank_names'] = None

        # set to None if bank_debits (nullable) is None
        # and model_fields_set contains the field
        if self.bank_debits is None and "bank_debits" in self.model_fields_set:
            _dict['bank_debits'] = None

        # set to None if bank_transfers (nullable) is None
        # and model_fields_set contains the field
        if self.bank_transfers is None and "bank_transfers" in self.model_fields_set:
            _dict['bank_transfers'] = None

        # set to None if required_fields (nullable) is None
        # and model_fields_set contains the field
        if self.required_fields is None and "required_fields" in self.model_fields_set:
            _dict['required_fields'] = None

        # set to None if surcharge_details (nullable) is None
        # and model_fields_set contains the field
        if self.surcharge_details is None and "surcharge_details" in self.model_fields_set:
            _dict['surcharge_details'] = None

        # set to None if pm_auth_connector (nullable) is None
        # and model_fields_set contains the field
        if self.pm_auth_connector is None and "pm_auth_connector" in self.model_fields_set:
            _dict['pm_auth_connector'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ResponsePaymentMethodTypes from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_method_type": obj.get("payment_method_type"),
            "payment_experience": [PaymentExperienceTypes.from_dict(_item) for _item in obj["payment_experience"]] if obj.get("payment_experience") is not None else None,
            "card_networks": [CardNetworkTypes.from_dict(_item) for _item in obj["card_networks"]] if obj.get("card_networks") is not None else None,
            "bank_names": [BankCodeResponse.from_dict(_item) for _item in obj["bank_names"]] if obj.get("bank_names") is not None else None,
            "bank_debits": BankDebitTypes.from_dict(obj["bank_debits"]) if obj.get("bank_debits") is not None else None,
            "bank_transfers": BankTransferTypes.from_dict(obj["bank_transfers"]) if obj.get("bank_transfers") is not None else None,
            "required_fields": dict(
                (_k, RequiredFieldInfo.from_dict(_v))
                for _k, _v in obj["required_fields"].items()
            )
            if obj.get("required_fields") is not None
            else None,
            "surcharge_details": SurchargeDetailsResponse.from_dict(obj["surcharge_details"]) if obj.get("surcharge_details") is not None else None,
            "pm_auth_connector": obj.get("pm_auth_connector")
        })
        return _obj



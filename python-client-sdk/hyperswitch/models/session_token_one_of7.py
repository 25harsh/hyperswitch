# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.ctp_service_provider import CtpServiceProvider
from hyperswitch.models.currency import Currency
from typing import Optional, Set
from typing_extensions import Self

class SessionTokenOneOf7(BaseModel):
    """
    SessionTokenOneOf7
    """ # noqa: E501
    dpa_id: StrictStr
    dpa_name: StrictStr
    locale: StrictStr
    card_brands: List[StrictStr]
    acquirer_bin: StrictStr
    acquirer_merchant_id: StrictStr
    merchant_category_code: StrictStr
    merchant_country_code: StrictStr
    transaction_amount: StrictStr
    transaction_currency_code: Currency
    phone_number: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    email: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    phone_country_code: Optional[StrictStr] = None
    provider: Optional[CtpServiceProvider] = None
    dpa_client_id: Optional[StrictStr] = None
    wallet_name: StrictStr
    __properties: ClassVar[List[str]] = ["dpa_id", "dpa_name", "locale", "card_brands", "acquirer_bin", "acquirer_merchant_id", "merchant_category_code", "merchant_country_code", "transaction_amount", "transaction_currency_code", "phone_number", "email", "phone_country_code", "provider", "dpa_client_id", "wallet_name"]

    @field_validator('wallet_name')
    def wallet_name_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['click_to_pay']):
            raise ValueError("must be one of enum values ('click_to_pay')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SessionTokenOneOf7 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if phone_number (nullable) is None
        # and model_fields_set contains the field
        if self.phone_number is None and "phone_number" in self.model_fields_set:
            _dict['phone_number'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if phone_country_code (nullable) is None
        # and model_fields_set contains the field
        if self.phone_country_code is None and "phone_country_code" in self.model_fields_set:
            _dict['phone_country_code'] = None

        # set to None if provider (nullable) is None
        # and model_fields_set contains the field
        if self.provider is None and "provider" in self.model_fields_set:
            _dict['provider'] = None

        # set to None if dpa_client_id (nullable) is None
        # and model_fields_set contains the field
        if self.dpa_client_id is None and "dpa_client_id" in self.model_fields_set:
            _dict['dpa_client_id'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SessionTokenOneOf7 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "dpa_id": obj.get("dpa_id"),
            "dpa_name": obj.get("dpa_name"),
            "locale": obj.get("locale"),
            "card_brands": obj.get("card_brands"),
            "acquirer_bin": obj.get("acquirer_bin"),
            "acquirer_merchant_id": obj.get("acquirer_merchant_id"),
            "merchant_category_code": obj.get("merchant_category_code"),
            "merchant_country_code": obj.get("merchant_country_code"),
            "transaction_amount": obj.get("transaction_amount"),
            "transaction_currency_code": obj.get("transaction_currency_code"),
            "phone_number": obj.get("phone_number"),
            "email": obj.get("email"),
            "phone_country_code": obj.get("phone_country_code"),
            "provider": obj.get("provider"),
            "dpa_client_id": obj.get("dpa_client_id"),
            "wallet_name": obj.get("wallet_name")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from hyperswitch.models.bank_transfer_additional_data_one_of import BankTransferAdditionalDataOneOf
from hyperswitch.models.bank_transfer_additional_data_one_of1 import BankTransferAdditionalDataOneOf1
from hyperswitch.models.bank_transfer_additional_data_one_of10 import BankTransferAdditionalDataOneOf10
from hyperswitch.models.bank_transfer_additional_data_one_of11 import BankTransferAdditionalDataOneOf11
from hyperswitch.models.bank_transfer_additional_data_one_of12 import BankTransferAdditionalDataOneOf12
from hyperswitch.models.bank_transfer_additional_data_one_of13 import BankTransferAdditionalDataOneOf13
from hyperswitch.models.bank_transfer_additional_data_one_of14 import BankTransferAdditionalDataOneOf14
from hyperswitch.models.bank_transfer_additional_data_one_of2 import BankTransferAdditionalDataOneOf2
from hyperswitch.models.bank_transfer_additional_data_one_of3 import BankTransferAdditionalDataOneOf3
from hyperswitch.models.bank_transfer_additional_data_one_of4 import BankTransferAdditionalDataOneOf4
from hyperswitch.models.bank_transfer_additional_data_one_of5 import BankTransferAdditionalDataOneOf5
from hyperswitch.models.bank_transfer_additional_data_one_of6 import BankTransferAdditionalDataOneOf6
from hyperswitch.models.bank_transfer_additional_data_one_of7 import BankTransferAdditionalDataOneOf7
from hyperswitch.models.bank_transfer_additional_data_one_of8 import BankTransferAdditionalDataOneOf8
from hyperswitch.models.bank_transfer_additional_data_one_of9 import BankTransferAdditionalDataOneOf9
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

BANKTRANSFERADDITIONALDATA_ONE_OF_SCHEMAS = ["BankTransferAdditionalDataOneOf", "BankTransferAdditionalDataOneOf1", "BankTransferAdditionalDataOneOf10", "BankTransferAdditionalDataOneOf11", "BankTransferAdditionalDataOneOf12", "BankTransferAdditionalDataOneOf13", "BankTransferAdditionalDataOneOf14", "BankTransferAdditionalDataOneOf2", "BankTransferAdditionalDataOneOf3", "BankTransferAdditionalDataOneOf4", "BankTransferAdditionalDataOneOf5", "BankTransferAdditionalDataOneOf6", "BankTransferAdditionalDataOneOf7", "BankTransferAdditionalDataOneOf8", "BankTransferAdditionalDataOneOf9"]

class BankTransferAdditionalData(BaseModel):
    """
    BankTransferAdditionalData
    """
    # data type: BankTransferAdditionalDataOneOf
    oneof_schema_1_validator: Optional[BankTransferAdditionalDataOneOf] = None
    # data type: BankTransferAdditionalDataOneOf1
    oneof_schema_2_validator: Optional[BankTransferAdditionalDataOneOf1] = None
    # data type: BankTransferAdditionalDataOneOf2
    oneof_schema_3_validator: Optional[BankTransferAdditionalDataOneOf2] = None
    # data type: BankTransferAdditionalDataOneOf3
    oneof_schema_4_validator: Optional[BankTransferAdditionalDataOneOf3] = None
    # data type: BankTransferAdditionalDataOneOf4
    oneof_schema_5_validator: Optional[BankTransferAdditionalDataOneOf4] = None
    # data type: BankTransferAdditionalDataOneOf5
    oneof_schema_6_validator: Optional[BankTransferAdditionalDataOneOf5] = None
    # data type: BankTransferAdditionalDataOneOf6
    oneof_schema_7_validator: Optional[BankTransferAdditionalDataOneOf6] = None
    # data type: BankTransferAdditionalDataOneOf7
    oneof_schema_8_validator: Optional[BankTransferAdditionalDataOneOf7] = None
    # data type: BankTransferAdditionalDataOneOf8
    oneof_schema_9_validator: Optional[BankTransferAdditionalDataOneOf8] = None
    # data type: BankTransferAdditionalDataOneOf9
    oneof_schema_10_validator: Optional[BankTransferAdditionalDataOneOf9] = None
    # data type: BankTransferAdditionalDataOneOf10
    oneof_schema_11_validator: Optional[BankTransferAdditionalDataOneOf10] = None
    # data type: BankTransferAdditionalDataOneOf11
    oneof_schema_12_validator: Optional[BankTransferAdditionalDataOneOf11] = None
    # data type: BankTransferAdditionalDataOneOf12
    oneof_schema_13_validator: Optional[BankTransferAdditionalDataOneOf12] = None
    # data type: BankTransferAdditionalDataOneOf13
    oneof_schema_14_validator: Optional[BankTransferAdditionalDataOneOf13] = None
    # data type: BankTransferAdditionalDataOneOf14
    oneof_schema_15_validator: Optional[BankTransferAdditionalDataOneOf14] = None
    actual_instance: Optional[Union[BankTransferAdditionalDataOneOf, BankTransferAdditionalDataOneOf1, BankTransferAdditionalDataOneOf10, BankTransferAdditionalDataOneOf11, BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf13, BankTransferAdditionalDataOneOf14, BankTransferAdditionalDataOneOf2, BankTransferAdditionalDataOneOf3, BankTransferAdditionalDataOneOf4, BankTransferAdditionalDataOneOf5, BankTransferAdditionalDataOneOf6, BankTransferAdditionalDataOneOf7, BankTransferAdditionalDataOneOf8, BankTransferAdditionalDataOneOf9]] = None
    one_of_schemas: Set[str] = { "BankTransferAdditionalDataOneOf", "BankTransferAdditionalDataOneOf1", "BankTransferAdditionalDataOneOf10", "BankTransferAdditionalDataOneOf11", "BankTransferAdditionalDataOneOf12", "BankTransferAdditionalDataOneOf13", "BankTransferAdditionalDataOneOf14", "BankTransferAdditionalDataOneOf2", "BankTransferAdditionalDataOneOf3", "BankTransferAdditionalDataOneOf4", "BankTransferAdditionalDataOneOf5", "BankTransferAdditionalDataOneOf6", "BankTransferAdditionalDataOneOf7", "BankTransferAdditionalDataOneOf8", "BankTransferAdditionalDataOneOf9" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = BankTransferAdditionalData.model_construct()
        error_messages = []
        match = 0
        # validate data type: BankTransferAdditionalDataOneOf
        if not isinstance(v, BankTransferAdditionalDataOneOf):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf1
        if not isinstance(v, BankTransferAdditionalDataOneOf1):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf1`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf2
        if not isinstance(v, BankTransferAdditionalDataOneOf2):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf2`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf3
        if not isinstance(v, BankTransferAdditionalDataOneOf3):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf3`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf4
        if not isinstance(v, BankTransferAdditionalDataOneOf4):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf4`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf5
        if not isinstance(v, BankTransferAdditionalDataOneOf5):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf5`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf6
        if not isinstance(v, BankTransferAdditionalDataOneOf6):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf6`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf7
        if not isinstance(v, BankTransferAdditionalDataOneOf7):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf7`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf8
        if not isinstance(v, BankTransferAdditionalDataOneOf8):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf8`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf9
        if not isinstance(v, BankTransferAdditionalDataOneOf9):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf9`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf10
        if not isinstance(v, BankTransferAdditionalDataOneOf10):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf10`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf11
        if not isinstance(v, BankTransferAdditionalDataOneOf11):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf11`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf12
        if not isinstance(v, BankTransferAdditionalDataOneOf12):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf12`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf13
        if not isinstance(v, BankTransferAdditionalDataOneOf13):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf13`")
        else:
            match += 1
        # validate data type: BankTransferAdditionalDataOneOf14
        if not isinstance(v, BankTransferAdditionalDataOneOf14):
            error_messages.append(f"Error! Input type `{type(v)}` is not `BankTransferAdditionalDataOneOf14`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in BankTransferAdditionalData with oneOf schemas: BankTransferAdditionalDataOneOf, BankTransferAdditionalDataOneOf1, BankTransferAdditionalDataOneOf10, BankTransferAdditionalDataOneOf11, BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf13, BankTransferAdditionalDataOneOf14, BankTransferAdditionalDataOneOf2, BankTransferAdditionalDataOneOf3, BankTransferAdditionalDataOneOf4, BankTransferAdditionalDataOneOf5, BankTransferAdditionalDataOneOf6, BankTransferAdditionalDataOneOf7, BankTransferAdditionalDataOneOf8, BankTransferAdditionalDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in BankTransferAdditionalData with oneOf schemas: BankTransferAdditionalDataOneOf, BankTransferAdditionalDataOneOf1, BankTransferAdditionalDataOneOf10, BankTransferAdditionalDataOneOf11, BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf13, BankTransferAdditionalDataOneOf14, BankTransferAdditionalDataOneOf2, BankTransferAdditionalDataOneOf3, BankTransferAdditionalDataOneOf4, BankTransferAdditionalDataOneOf5, BankTransferAdditionalDataOneOf6, BankTransferAdditionalDataOneOf7, BankTransferAdditionalDataOneOf8, BankTransferAdditionalDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into BankTransferAdditionalDataOneOf
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf1
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf1.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf2
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf2.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf3
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf3.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf4
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf4.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf5
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf5.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf6
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf6.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf7
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf7.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf8
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf8.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf9
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf9.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf10
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf10.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf11
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf11.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf12
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf12.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf13
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf13.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into BankTransferAdditionalDataOneOf14
        try:
            instance.actual_instance = BankTransferAdditionalDataOneOf14.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into BankTransferAdditionalData with oneOf schemas: BankTransferAdditionalDataOneOf, BankTransferAdditionalDataOneOf1, BankTransferAdditionalDataOneOf10, BankTransferAdditionalDataOneOf11, BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf13, BankTransferAdditionalDataOneOf14, BankTransferAdditionalDataOneOf2, BankTransferAdditionalDataOneOf3, BankTransferAdditionalDataOneOf4, BankTransferAdditionalDataOneOf5, BankTransferAdditionalDataOneOf6, BankTransferAdditionalDataOneOf7, BankTransferAdditionalDataOneOf8, BankTransferAdditionalDataOneOf9. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into BankTransferAdditionalData with oneOf schemas: BankTransferAdditionalDataOneOf, BankTransferAdditionalDataOneOf1, BankTransferAdditionalDataOneOf10, BankTransferAdditionalDataOneOf11, BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf13, BankTransferAdditionalDataOneOf14, BankTransferAdditionalDataOneOf2, BankTransferAdditionalDataOneOf3, BankTransferAdditionalDataOneOf4, BankTransferAdditionalDataOneOf5, BankTransferAdditionalDataOneOf6, BankTransferAdditionalDataOneOf7, BankTransferAdditionalDataOneOf8, BankTransferAdditionalDataOneOf9. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], BankTransferAdditionalDataOneOf, BankTransferAdditionalDataOneOf1, BankTransferAdditionalDataOneOf10, BankTransferAdditionalDataOneOf11, BankTransferAdditionalDataOneOf12, BankTransferAdditionalDataOneOf13, BankTransferAdditionalDataOneOf14, BankTransferAdditionalDataOneOf2, BankTransferAdditionalDataOneOf3, BankTransferAdditionalDataOneOf4, BankTransferAdditionalDataOneOf5, BankTransferAdditionalDataOneOf6, BankTransferAdditionalDataOneOf7, BankTransferAdditionalDataOneOf8, BankTransferAdditionalDataOneOf9]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())



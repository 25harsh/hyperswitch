# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.currency import Currency
from hyperswitch.models.payment_method_type import PaymentMethodType
from hyperswitch.models.payout_status import PayoutStatus
from hyperswitch.models.payout_type import PayoutType
from typing import Optional, Set
from typing_extensions import Self

class PayoutAttemptResponse(BaseModel):
    """
    PayoutAttemptResponse
    """ # noqa: E501
    attempt_id: StrictStr = Field(description="Unique identifier for the attempt")
    status: PayoutStatus
    amount: StrictInt = Field(description="The payout attempt amount. Amount for the payout in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc.,")
    currency: Optional[Currency] = None
    connector: Optional[StrictStr] = Field(default=None, description="The connector used for the payout")
    error_code: Optional[StrictStr] = Field(default=None, description="Connector's error code in case of failures")
    error_message: Optional[StrictStr] = Field(default=None, description="Connector's error message in case of failures")
    payment_method: Optional[PayoutType] = None
    payout_method_type: Optional[PaymentMethodType] = None
    connector_transaction_id: Optional[StrictStr] = Field(default=None, description="A unique identifier for a payout provided by the connector")
    cancellation_reason: Optional[StrictStr] = Field(default=None, description="If the payout was cancelled the reason provided here")
    unified_code: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="(This field is not live yet) Error code unified across the connectors is received here in case of errors while calling the underlying connector")
    unified_message: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="(This field is not live yet) Error message unified across the connectors is received here in case of errors while calling the underlying connector")
    __properties: ClassVar[List[str]] = ["attempt_id", "status", "amount", "currency", "connector", "error_code", "error_message", "payment_method", "payout_method_type", "connector_transaction_id", "cancellation_reason", "unified_code", "unified_message"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayoutAttemptResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if currency (nullable) is None
        # and model_fields_set contains the field
        if self.currency is None and "currency" in self.model_fields_set:
            _dict['currency'] = None

        # set to None if connector (nullable) is None
        # and model_fields_set contains the field
        if self.connector is None and "connector" in self.model_fields_set:
            _dict['connector'] = None

        # set to None if error_code (nullable) is None
        # and model_fields_set contains the field
        if self.error_code is None and "error_code" in self.model_fields_set:
            _dict['error_code'] = None

        # set to None if error_message (nullable) is None
        # and model_fields_set contains the field
        if self.error_message is None and "error_message" in self.model_fields_set:
            _dict['error_message'] = None

        # set to None if payment_method (nullable) is None
        # and model_fields_set contains the field
        if self.payment_method is None and "payment_method" in self.model_fields_set:
            _dict['payment_method'] = None

        # set to None if payout_method_type (nullable) is None
        # and model_fields_set contains the field
        if self.payout_method_type is None and "payout_method_type" in self.model_fields_set:
            _dict['payout_method_type'] = None

        # set to None if connector_transaction_id (nullable) is None
        # and model_fields_set contains the field
        if self.connector_transaction_id is None and "connector_transaction_id" in self.model_fields_set:
            _dict['connector_transaction_id'] = None

        # set to None if cancellation_reason (nullable) is None
        # and model_fields_set contains the field
        if self.cancellation_reason is None and "cancellation_reason" in self.model_fields_set:
            _dict['cancellation_reason'] = None

        # set to None if unified_code (nullable) is None
        # and model_fields_set contains the field
        if self.unified_code is None and "unified_code" in self.model_fields_set:
            _dict['unified_code'] = None

        # set to None if unified_message (nullable) is None
        # and model_fields_set contains the field
        if self.unified_message is None and "unified_message" in self.model_fields_set:
            _dict['unified_message'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayoutAttemptResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "attempt_id": obj.get("attempt_id"),
            "status": obj.get("status"),
            "amount": obj.get("amount"),
            "currency": obj.get("currency"),
            "connector": obj.get("connector"),
            "error_code": obj.get("error_code"),
            "error_message": obj.get("error_message"),
            "payment_method": obj.get("payment_method"),
            "payout_method_type": obj.get("payout_method_type"),
            "connector_transaction_id": obj.get("connector_transaction_id"),
            "cancellation_reason": obj.get("cancellation_reason"),
            "unified_code": obj.get("unified_code"),
            "unified_message": obj.get("unified_message")
        })
        return _obj



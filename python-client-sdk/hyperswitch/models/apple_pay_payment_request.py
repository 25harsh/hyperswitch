# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.amount_info import AmountInfo
from hyperswitch.models.apple_pay_address_parameters import ApplePayAddressParameters
from hyperswitch.models.apple_pay_recurring_payment_request import ApplePayRecurringPaymentRequest
from hyperswitch.models.country_alpha2 import CountryAlpha2
from hyperswitch.models.currency import Currency
from typing import Optional, Set
from typing_extensions import Self

class ApplePayPaymentRequest(BaseModel):
    """
    ApplePayPaymentRequest
    """ # noqa: E501
    country_code: CountryAlpha2
    currency_code: Currency
    total: AmountInfo
    merchant_capabilities: Optional[List[StrictStr]] = Field(default=None, description="The list of merchant capabilities(ex: whether capable of 3ds or no-3ds)")
    supported_networks: Optional[List[StrictStr]] = Field(default=None, description="The list of supported networks")
    merchant_identifier: Optional[StrictStr] = None
    required_billing_contact_fields: Optional[List[ApplePayAddressParameters]] = None
    required_shipping_contact_fields: Optional[List[ApplePayAddressParameters]] = None
    recurring_payment_request: Optional[ApplePayRecurringPaymentRequest] = None
    __properties: ClassVar[List[str]] = ["country_code", "currency_code", "total", "merchant_capabilities", "supported_networks", "merchant_identifier", "required_billing_contact_fields", "required_shipping_contact_fields", "recurring_payment_request"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ApplePayPaymentRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of recurring_payment_request
        if self.recurring_payment_request:
            _dict['recurring_payment_request'] = self.recurring_payment_request.to_dict()
        # set to None if merchant_capabilities (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_capabilities is None and "merchant_capabilities" in self.model_fields_set:
            _dict['merchant_capabilities'] = None

        # set to None if supported_networks (nullable) is None
        # and model_fields_set contains the field
        if self.supported_networks is None and "supported_networks" in self.model_fields_set:
            _dict['supported_networks'] = None

        # set to None if merchant_identifier (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_identifier is None and "merchant_identifier" in self.model_fields_set:
            _dict['merchant_identifier'] = None

        # set to None if required_billing_contact_fields (nullable) is None
        # and model_fields_set contains the field
        if self.required_billing_contact_fields is None and "required_billing_contact_fields" in self.model_fields_set:
            _dict['required_billing_contact_fields'] = None

        # set to None if required_shipping_contact_fields (nullable) is None
        # and model_fields_set contains the field
        if self.required_shipping_contact_fields is None and "required_shipping_contact_fields" in self.model_fields_set:
            _dict['required_shipping_contact_fields'] = None

        # set to None if recurring_payment_request (nullable) is None
        # and model_fields_set contains the field
        if self.recurring_payment_request is None and "recurring_payment_request" in self.model_fields_set:
            _dict['recurring_payment_request'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ApplePayPaymentRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "country_code": obj.get("country_code"),
            "currency_code": obj.get("currency_code"),
            "total": AmountInfo.from_dict(obj["total"]) if obj.get("total") is not None else None,
            "merchant_capabilities": obj.get("merchant_capabilities"),
            "supported_networks": obj.get("supported_networks"),
            "merchant_identifier": obj.get("merchant_identifier"),
            "required_billing_contact_fields": obj.get("required_billing_contact_fields"),
            "required_shipping_contact_fields": obj.get("required_shipping_contact_fields"),
            "recurring_payment_request": ApplePayRecurringPaymentRequest.from_dict(obj["recurring_payment_request"]) if obj.get("recurring_payment_request") is not None else None
        })
        return _obj



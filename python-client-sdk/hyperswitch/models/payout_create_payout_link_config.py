# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.enabled_payment_method import EnabledPaymentMethod
from hyperswitch.models.ui_widget_form_layout import UIWidgetFormLayout
from typing import Optional, Set
from typing_extensions import Self

class PayoutCreatePayoutLinkConfig(BaseModel):
    """
    Custom payout link config for the particular payout, if payout link is to be generated.
    """ # noqa: E501
    logo: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Merchant's display logo")
    merchant_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Custom merchant name for the link")
    theme: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Primary color to be used in the form represented in hex format")
    payout_link_id: Optional[StrictStr] = Field(default=None, description="The unique identifier for the collect link.")
    enabled_payment_methods: Optional[List[EnabledPaymentMethod]] = Field(default=None, description="List of payout methods shown on collect UI")
    form_layout: Optional[UIWidgetFormLayout] = None
    test_mode: Optional[StrictBool] = Field(default=None, description="`test_mode` allows for opening payout links without any restrictions. This removes - domain name validations - check for making sure link is accessed within an iframe")
    __properties: ClassVar[List[str]] = ["logo", "merchant_name", "theme", "payout_link_id", "enabled_payment_methods", "form_layout", "test_mode"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PayoutCreatePayoutLinkConfig from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in enabled_payment_methods (list)
        _items = []
        if self.enabled_payment_methods:
            for _item_enabled_payment_methods in self.enabled_payment_methods:
                if _item_enabled_payment_methods:
                    _items.append(_item_enabled_payment_methods.to_dict())
            _dict['enabled_payment_methods'] = _items
        # set to None if logo (nullable) is None
        # and model_fields_set contains the field
        if self.logo is None and "logo" in self.model_fields_set:
            _dict['logo'] = None

        # set to None if merchant_name (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_name is None and "merchant_name" in self.model_fields_set:
            _dict['merchant_name'] = None

        # set to None if theme (nullable) is None
        # and model_fields_set contains the field
        if self.theme is None and "theme" in self.model_fields_set:
            _dict['theme'] = None

        # set to None if payout_link_id (nullable) is None
        # and model_fields_set contains the field
        if self.payout_link_id is None and "payout_link_id" in self.model_fields_set:
            _dict['payout_link_id'] = None

        # set to None if enabled_payment_methods (nullable) is None
        # and model_fields_set contains the field
        if self.enabled_payment_methods is None and "enabled_payment_methods" in self.model_fields_set:
            _dict['enabled_payment_methods'] = None

        # set to None if form_layout (nullable) is None
        # and model_fields_set contains the field
        if self.form_layout is None and "form_layout" in self.model_fields_set:
            _dict['form_layout'] = None

        # set to None if test_mode (nullable) is None
        # and model_fields_set contains the field
        if self.test_mode is None and "test_mode" in self.model_fields_set:
            _dict['test_mode'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PayoutCreatePayoutLinkConfig from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "logo": obj.get("logo"),
            "merchant_name": obj.get("merchant_name"),
            "theme": obj.get("theme"),
            "payout_link_id": obj.get("payout_link_id"),
            "enabled_payment_methods": [EnabledPaymentMethod.from_dict(_item) for _item in obj["enabled_payment_methods"]] if obj.get("enabled_payment_methods") is not None else None,
            "form_layout": obj.get("form_layout"),
            "test_mode": obj.get("test_mode")
        })
        return _obj



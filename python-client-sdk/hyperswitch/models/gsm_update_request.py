# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.error_category import ErrorCategory
from hyperswitch.models.gsm_decision import GsmDecision
from typing import Optional, Set
from typing_extensions import Self

class GsmUpdateRequest(BaseModel):
    """
    GsmUpdateRequest
    """ # noqa: E501
    connector: StrictStr = Field(description="The connector through which payment has gone through")
    flow: StrictStr = Field(description="The flow in which the code and message occurred for a connector")
    sub_flow: StrictStr = Field(description="The sub_flow in which the code and message occurred  for a connector")
    code: StrictStr = Field(description="code received from the connector")
    message: StrictStr = Field(description="message received from the connector")
    status: Optional[StrictStr] = Field(default=None, description="status provided by the router")
    router_error: Optional[StrictStr] = Field(default=None, description="optional error provided by the router")
    decision: Optional[GsmDecision] = None
    step_up_possible: Optional[StrictBool] = Field(default=None, description="indicates if step_up retry is possible")
    unified_code: Optional[StrictStr] = Field(default=None, description="error code unified across the connectors")
    unified_message: Optional[StrictStr] = Field(default=None, description="error message unified across the connectors")
    error_category: Optional[ErrorCategory] = None
    clear_pan_possible: Optional[StrictBool] = Field(default=None, description="indicates if retry with pan is possible")
    __properties: ClassVar[List[str]] = ["connector", "flow", "sub_flow", "code", "message", "status", "router_error", "decision", "step_up_possible", "unified_code", "unified_message", "error_category", "clear_pan_possible"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GsmUpdateRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if router_error (nullable) is None
        # and model_fields_set contains the field
        if self.router_error is None and "router_error" in self.model_fields_set:
            _dict['router_error'] = None

        # set to None if decision (nullable) is None
        # and model_fields_set contains the field
        if self.decision is None and "decision" in self.model_fields_set:
            _dict['decision'] = None

        # set to None if step_up_possible (nullable) is None
        # and model_fields_set contains the field
        if self.step_up_possible is None and "step_up_possible" in self.model_fields_set:
            _dict['step_up_possible'] = None

        # set to None if unified_code (nullable) is None
        # and model_fields_set contains the field
        if self.unified_code is None and "unified_code" in self.model_fields_set:
            _dict['unified_code'] = None

        # set to None if unified_message (nullable) is None
        # and model_fields_set contains the field
        if self.unified_message is None and "unified_message" in self.model_fields_set:
            _dict['unified_message'] = None

        # set to None if error_category (nullable) is None
        # and model_fields_set contains the field
        if self.error_category is None and "error_category" in self.model_fields_set:
            _dict['error_category'] = None

        # set to None if clear_pan_possible (nullable) is None
        # and model_fields_set contains the field
        if self.clear_pan_possible is None and "clear_pan_possible" in self.model_fields_set:
            _dict['clear_pan_possible'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GsmUpdateRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "connector": obj.get("connector"),
            "flow": obj.get("flow"),
            "sub_flow": obj.get("sub_flow"),
            "code": obj.get("code"),
            "message": obj.get("message"),
            "status": obj.get("status"),
            "router_error": obj.get("router_error"),
            "decision": obj.get("decision"),
            "step_up_possible": obj.get("step_up_possible"),
            "unified_code": obj.get("unified_code"),
            "unified_message": obj.get("unified_message"),
            "error_category": obj.get("error_category"),
            "clear_pan_possible": obj.get("clear_pan_possible")
        })
        return _obj



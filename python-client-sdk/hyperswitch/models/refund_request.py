# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.merchant_connector_details_wrap import MerchantConnectorDetailsWrap
from hyperswitch.models.refund_type import RefundType
from hyperswitch.models.split_refund import SplitRefund
from typing import Optional, Set
from typing_extensions import Self

class RefundRequest(BaseModel):
    """
    RefundRequest
    """ # noqa: E501
    payment_id: Annotated[str, Field(min_length=30, strict=True, max_length=30)] = Field(description="The payment id against which refund is to be initiated")
    refund_id: Optional[Annotated[str, Field(min_length=30, strict=True, max_length=30)]] = Field(default=None, description="Unique Identifier for the Refund. This is to ensure idempotency for multiple partial refunds initiated against the same payment. If this is not passed by the merchant, this field shall be auto generated and provided in the API response. It is recommended to generate uuid(v4) as the refund_id.")
    merchant_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The identifier for the Merchant Account")
    amount: Optional[Annotated[int, Field(strict=True, ge=100)]] = Field(default=None, description="Total amount for which the refund is to be initiated. Amount for the payment in lowest denomination of the currency. (i.e) in cents for USD denomination, in paisa for INR denomination etc., If not provided, this will default to the full payment amount")
    reason: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Reason for the refund. Often useful for displaying to users and your customer support executive. In case the payment went through Stripe, this field needs to be passed with one of these enums: `duplicate`, `fraudulent`, or `requested_by_customer`")
    refund_type: Optional[RefundType] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="You can specify up to 50 keys, with key names up to 40 characters long and values up to 500 characters long. Metadata is useful for storing additional, structured information on an object.")
    merchant_connector_details: Optional[MerchantConnectorDetailsWrap] = None
    split_refunds: Optional[SplitRefund] = None
    __properties: ClassVar[List[str]] = ["payment_id", "refund_id", "merchant_id", "amount", "reason", "refund_type", "metadata", "merchant_connector_details", "split_refunds"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RefundRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of merchant_connector_details
        if self.merchant_connector_details:
            _dict['merchant_connector_details'] = self.merchant_connector_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of split_refunds
        if self.split_refunds:
            _dict['split_refunds'] = self.split_refunds.to_dict()
        # set to None if refund_id (nullable) is None
        # and model_fields_set contains the field
        if self.refund_id is None and "refund_id" in self.model_fields_set:
            _dict['refund_id'] = None

        # set to None if merchant_id (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_id is None and "merchant_id" in self.model_fields_set:
            _dict['merchant_id'] = None

        # set to None if amount (nullable) is None
        # and model_fields_set contains the field
        if self.amount is None and "amount" in self.model_fields_set:
            _dict['amount'] = None

        # set to None if reason (nullable) is None
        # and model_fields_set contains the field
        if self.reason is None and "reason" in self.model_fields_set:
            _dict['reason'] = None

        # set to None if refund_type (nullable) is None
        # and model_fields_set contains the field
        if self.refund_type is None and "refund_type" in self.model_fields_set:
            _dict['refund_type'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if merchant_connector_details (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_connector_details is None and "merchant_connector_details" in self.model_fields_set:
            _dict['merchant_connector_details'] = None

        # set to None if split_refunds (nullable) is None
        # and model_fields_set contains the field
        if self.split_refunds is None and "split_refunds" in self.model_fields_set:
            _dict['split_refunds'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RefundRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "payment_id": obj.get("payment_id"),
            "refund_id": obj.get("refund_id"),
            "merchant_id": obj.get("merchant_id"),
            "amount": obj.get("amount"),
            "reason": obj.get("reason"),
            "refund_type": obj.get("refund_type"),
            "metadata": obj.get("metadata"),
            "merchant_connector_details": MerchantConnectorDetailsWrap.from_dict(obj["merchant_connector_details"]) if obj.get("merchant_connector_details") is not None else None,
            "split_refunds": SplitRefund.from_dict(obj["split_refunds"]) if obj.get("split_refunds") is not None else None
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.authentication_connector_details import AuthenticationConnectorDetails
from hyperswitch.models.business_payment_link_config import BusinessPaymentLinkConfig
from hyperswitch.models.business_payout_link_config import BusinessPayoutLinkConfig
from hyperswitch.models.card_testing_guard_config import CardTestingGuardConfig
from hyperswitch.models.country_alpha2 import CountryAlpha2
from hyperswitch.models.routing_algorithm import RoutingAlgorithm
from hyperswitch.models.webhook_details import WebhookDetails
from typing import Optional, Set
from typing_extensions import Self

class ProfileCreate(BaseModel):
    """
    ProfileCreate
    """ # noqa: E501
    profile_name: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The name of profile")
    return_url: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The URL to redirect after the completion of the operation")
    enable_payment_response_hash: Optional[StrictBool] = Field(default=True, description="A boolean value to indicate if payment response hash needs to be enabled")
    payment_response_hash_key: Optional[StrictStr] = Field(default=None, description="Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a value is automatically generated.")
    redirect_to_merchant_with_http_post: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if redirect to merchant with http post needs to be enabled")
    webhook_details: Optional[WebhookDetails] = None
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata is useful for storing additional, unstructured information on an object.")
    routing_algorithm: Optional[Dict[str, Any]] = Field(default=None, description="The routing algorithm to be used for routing payments to desired connectors")
    intent_fulfillment_time: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Will be used to determine the time till which your payment will be active once the payment session starts")
    frm_routing_algorithm: Optional[Dict[str, Any]] = Field(default=None, description="The frm routing algorithm to be used for routing payments to desired FRM's")
    payout_routing_algorithm: Optional[RoutingAlgorithm] = None
    applepay_verified_domains: Optional[List[StrictStr]] = Field(default=None, description="Verified Apple Pay domains for a particular profile")
    session_expiry: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Client Secret Default expiry for all payments created under this profile")
    payment_link_config: Optional[BusinessPaymentLinkConfig] = None
    authentication_connector_details: Optional[AuthenticationConnectorDetails] = None
    use_billing_as_payment_method_billing: Optional[StrictBool] = Field(default=None, description="Whether to use the billing details passed when creating the intent as payment method billing")
    collect_shipping_details_from_wallet_connector: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if customer shipping details needs to be collected from wallet connector only if it is required field for connector (Eg. Apple Pay, Google Pay etc)")
    collect_billing_details_from_wallet_connector: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if customer billing details needs to be collected from wallet connector only if it is required field for connector (Eg. Apple Pay, Google Pay etc)")
    always_collect_shipping_details_from_wallet_connector: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if customer shipping details needs to be collected from wallet connector irrespective of connector required fields (Eg. Apple pay, Google pay etc)")
    always_collect_billing_details_from_wallet_connector: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if customer billing details needs to be collected from wallet connector irrespective of connector required fields (Eg. Apple pay, Google pay etc)")
    is_connector_agnostic_mit_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the MIT (merchant initiated transaction) payments can be made connector agnostic, i.e., MITs may be processed through different connector than CIT (customer initiated transaction) based on the routing rules. If set to `false`, MIT will go through the same connector as the CIT.")
    payout_link_config: Optional[BusinessPayoutLinkConfig] = None
    outgoing_webhook_custom_http_headers: Optional[Dict[str, Any]] = Field(default=None, description="These key-value pairs are sent as additional custom headers in the outgoing webhook request. It is recommended not to use more than four key-value pairs.")
    tax_connector_id: Optional[StrictStr] = Field(default=None, description="Merchant Connector id to be stored for tax_calculator connector")
    is_tax_connector_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if tax_calculator connector is enabled or not. If set to `true` tax_connector_id will be checked.")
    is_network_tokenization_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if network tokenization is enabled or not.")
    is_auto_retries_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if is_auto_retries_enabled is enabled or not.")
    max_auto_retries_enabled: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Maximum number of auto retries allowed for a payment")
    always_request_extended_authorization: Optional[StrictBool] = Field(default=None, description="Bool indicating if extended authentication must be requested for all payments")
    is_click_to_pay_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if click to pay is enabled or not.")
    authentication_product_ids: Optional[Dict[str, Any]] = Field(default=None, description="Product authentication ids")
    card_testing_guard_config: Optional[CardTestingGuardConfig] = None
    is_clear_pan_retries_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if clear pan retries is enabled or not.")
    force_3ds_challenge: Optional[StrictBool] = Field(default=None, description="Indicates if 3ds challenge is forced")
    is_debit_routing_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if debit routing is enabled or not")
    merchant_business_country: Optional[CountryAlpha2] = None
    __properties: ClassVar[List[str]] = ["profile_name", "return_url", "enable_payment_response_hash", "payment_response_hash_key", "redirect_to_merchant_with_http_post", "webhook_details", "metadata", "routing_algorithm", "intent_fulfillment_time", "frm_routing_algorithm", "payout_routing_algorithm", "applepay_verified_domains", "session_expiry", "payment_link_config", "authentication_connector_details", "use_billing_as_payment_method_billing", "collect_shipping_details_from_wallet_connector", "collect_billing_details_from_wallet_connector", "always_collect_shipping_details_from_wallet_connector", "always_collect_billing_details_from_wallet_connector", "is_connector_agnostic_mit_enabled", "payout_link_config", "outgoing_webhook_custom_http_headers", "tax_connector_id", "is_tax_connector_enabled", "is_network_tokenization_enabled", "is_auto_retries_enabled", "max_auto_retries_enabled", "always_request_extended_authorization", "is_click_to_pay_enabled", "authentication_product_ids", "card_testing_guard_config", "is_clear_pan_retries_enabled", "force_3ds_challenge", "is_debit_routing_enabled", "merchant_business_country"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ProfileCreate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of webhook_details
        if self.webhook_details:
            _dict['webhook_details'] = self.webhook_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payout_routing_algorithm
        if self.payout_routing_algorithm:
            _dict['payout_routing_algorithm'] = self.payout_routing_algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_link_config
        if self.payment_link_config:
            _dict['payment_link_config'] = self.payment_link_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of authentication_connector_details
        if self.authentication_connector_details:
            _dict['authentication_connector_details'] = self.authentication_connector_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payout_link_config
        if self.payout_link_config:
            _dict['payout_link_config'] = self.payout_link_config.to_dict()
        # override the default output from pydantic by calling `to_dict()` of card_testing_guard_config
        if self.card_testing_guard_config:
            _dict['card_testing_guard_config'] = self.card_testing_guard_config.to_dict()
        # set to None if profile_name (nullable) is None
        # and model_fields_set contains the field
        if self.profile_name is None and "profile_name" in self.model_fields_set:
            _dict['profile_name'] = None

        # set to None if return_url (nullable) is None
        # and model_fields_set contains the field
        if self.return_url is None and "return_url" in self.model_fields_set:
            _dict['return_url'] = None

        # set to None if enable_payment_response_hash (nullable) is None
        # and model_fields_set contains the field
        if self.enable_payment_response_hash is None and "enable_payment_response_hash" in self.model_fields_set:
            _dict['enable_payment_response_hash'] = None

        # set to None if payment_response_hash_key (nullable) is None
        # and model_fields_set contains the field
        if self.payment_response_hash_key is None and "payment_response_hash_key" in self.model_fields_set:
            _dict['payment_response_hash_key'] = None

        # set to None if redirect_to_merchant_with_http_post (nullable) is None
        # and model_fields_set contains the field
        if self.redirect_to_merchant_with_http_post is None and "redirect_to_merchant_with_http_post" in self.model_fields_set:
            _dict['redirect_to_merchant_with_http_post'] = None

        # set to None if webhook_details (nullable) is None
        # and model_fields_set contains the field
        if self.webhook_details is None and "webhook_details" in self.model_fields_set:
            _dict['webhook_details'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if routing_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.routing_algorithm is None and "routing_algorithm" in self.model_fields_set:
            _dict['routing_algorithm'] = None

        # set to None if intent_fulfillment_time (nullable) is None
        # and model_fields_set contains the field
        if self.intent_fulfillment_time is None and "intent_fulfillment_time" in self.model_fields_set:
            _dict['intent_fulfillment_time'] = None

        # set to None if frm_routing_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.frm_routing_algorithm is None and "frm_routing_algorithm" in self.model_fields_set:
            _dict['frm_routing_algorithm'] = None

        # set to None if payout_routing_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.payout_routing_algorithm is None and "payout_routing_algorithm" in self.model_fields_set:
            _dict['payout_routing_algorithm'] = None

        # set to None if applepay_verified_domains (nullable) is None
        # and model_fields_set contains the field
        if self.applepay_verified_domains is None and "applepay_verified_domains" in self.model_fields_set:
            _dict['applepay_verified_domains'] = None

        # set to None if session_expiry (nullable) is None
        # and model_fields_set contains the field
        if self.session_expiry is None and "session_expiry" in self.model_fields_set:
            _dict['session_expiry'] = None

        # set to None if payment_link_config (nullable) is None
        # and model_fields_set contains the field
        if self.payment_link_config is None and "payment_link_config" in self.model_fields_set:
            _dict['payment_link_config'] = None

        # set to None if authentication_connector_details (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_connector_details is None and "authentication_connector_details" in self.model_fields_set:
            _dict['authentication_connector_details'] = None

        # set to None if use_billing_as_payment_method_billing (nullable) is None
        # and model_fields_set contains the field
        if self.use_billing_as_payment_method_billing is None and "use_billing_as_payment_method_billing" in self.model_fields_set:
            _dict['use_billing_as_payment_method_billing'] = None

        # set to None if collect_shipping_details_from_wallet_connector (nullable) is None
        # and model_fields_set contains the field
        if self.collect_shipping_details_from_wallet_connector is None and "collect_shipping_details_from_wallet_connector" in self.model_fields_set:
            _dict['collect_shipping_details_from_wallet_connector'] = None

        # set to None if collect_billing_details_from_wallet_connector (nullable) is None
        # and model_fields_set contains the field
        if self.collect_billing_details_from_wallet_connector is None and "collect_billing_details_from_wallet_connector" in self.model_fields_set:
            _dict['collect_billing_details_from_wallet_connector'] = None

        # set to None if always_collect_shipping_details_from_wallet_connector (nullable) is None
        # and model_fields_set contains the field
        if self.always_collect_shipping_details_from_wallet_connector is None and "always_collect_shipping_details_from_wallet_connector" in self.model_fields_set:
            _dict['always_collect_shipping_details_from_wallet_connector'] = None

        # set to None if always_collect_billing_details_from_wallet_connector (nullable) is None
        # and model_fields_set contains the field
        if self.always_collect_billing_details_from_wallet_connector is None and "always_collect_billing_details_from_wallet_connector" in self.model_fields_set:
            _dict['always_collect_billing_details_from_wallet_connector'] = None

        # set to None if is_connector_agnostic_mit_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_connector_agnostic_mit_enabled is None and "is_connector_agnostic_mit_enabled" in self.model_fields_set:
            _dict['is_connector_agnostic_mit_enabled'] = None

        # set to None if payout_link_config (nullable) is None
        # and model_fields_set contains the field
        if self.payout_link_config is None and "payout_link_config" in self.model_fields_set:
            _dict['payout_link_config'] = None

        # set to None if outgoing_webhook_custom_http_headers (nullable) is None
        # and model_fields_set contains the field
        if self.outgoing_webhook_custom_http_headers is None and "outgoing_webhook_custom_http_headers" in self.model_fields_set:
            _dict['outgoing_webhook_custom_http_headers'] = None

        # set to None if tax_connector_id (nullable) is None
        # and model_fields_set contains the field
        if self.tax_connector_id is None and "tax_connector_id" in self.model_fields_set:
            _dict['tax_connector_id'] = None

        # set to None if is_auto_retries_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_auto_retries_enabled is None and "is_auto_retries_enabled" in self.model_fields_set:
            _dict['is_auto_retries_enabled'] = None

        # set to None if max_auto_retries_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.max_auto_retries_enabled is None and "max_auto_retries_enabled" in self.model_fields_set:
            _dict['max_auto_retries_enabled'] = None

        # set to None if always_request_extended_authorization (nullable) is None
        # and model_fields_set contains the field
        if self.always_request_extended_authorization is None and "always_request_extended_authorization" in self.model_fields_set:
            _dict['always_request_extended_authorization'] = None

        # set to None if authentication_product_ids (nullable) is None
        # and model_fields_set contains the field
        if self.authentication_product_ids is None and "authentication_product_ids" in self.model_fields_set:
            _dict['authentication_product_ids'] = None

        # set to None if card_testing_guard_config (nullable) is None
        # and model_fields_set contains the field
        if self.card_testing_guard_config is None and "card_testing_guard_config" in self.model_fields_set:
            _dict['card_testing_guard_config'] = None

        # set to None if is_clear_pan_retries_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_clear_pan_retries_enabled is None and "is_clear_pan_retries_enabled" in self.model_fields_set:
            _dict['is_clear_pan_retries_enabled'] = None

        # set to None if force_3ds_challenge (nullable) is None
        # and model_fields_set contains the field
        if self.force_3ds_challenge is None and "force_3ds_challenge" in self.model_fields_set:
            _dict['force_3ds_challenge'] = None

        # set to None if is_debit_routing_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.is_debit_routing_enabled is None and "is_debit_routing_enabled" in self.model_fields_set:
            _dict['is_debit_routing_enabled'] = None

        # set to None if merchant_business_country (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_business_country is None and "merchant_business_country" in self.model_fields_set:
            _dict['merchant_business_country'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ProfileCreate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "profile_name": obj.get("profile_name"),
            "return_url": obj.get("return_url"),
            "enable_payment_response_hash": obj.get("enable_payment_response_hash") if obj.get("enable_payment_response_hash") is not None else True,
            "payment_response_hash_key": obj.get("payment_response_hash_key"),
            "redirect_to_merchant_with_http_post": obj.get("redirect_to_merchant_with_http_post") if obj.get("redirect_to_merchant_with_http_post") is not None else False,
            "webhook_details": WebhookDetails.from_dict(obj["webhook_details"]) if obj.get("webhook_details") is not None else None,
            "metadata": obj.get("metadata"),
            "routing_algorithm": obj.get("routing_algorithm"),
            "intent_fulfillment_time": obj.get("intent_fulfillment_time"),
            "frm_routing_algorithm": obj.get("frm_routing_algorithm"),
            "payout_routing_algorithm": RoutingAlgorithm.from_dict(obj["payout_routing_algorithm"]) if obj.get("payout_routing_algorithm") is not None else None,
            "applepay_verified_domains": obj.get("applepay_verified_domains"),
            "session_expiry": obj.get("session_expiry"),
            "payment_link_config": BusinessPaymentLinkConfig.from_dict(obj["payment_link_config"]) if obj.get("payment_link_config") is not None else None,
            "authentication_connector_details": AuthenticationConnectorDetails.from_dict(obj["authentication_connector_details"]) if obj.get("authentication_connector_details") is not None else None,
            "use_billing_as_payment_method_billing": obj.get("use_billing_as_payment_method_billing"),
            "collect_shipping_details_from_wallet_connector": obj.get("collect_shipping_details_from_wallet_connector") if obj.get("collect_shipping_details_from_wallet_connector") is not None else False,
            "collect_billing_details_from_wallet_connector": obj.get("collect_billing_details_from_wallet_connector") if obj.get("collect_billing_details_from_wallet_connector") is not None else False,
            "always_collect_shipping_details_from_wallet_connector": obj.get("always_collect_shipping_details_from_wallet_connector") if obj.get("always_collect_shipping_details_from_wallet_connector") is not None else False,
            "always_collect_billing_details_from_wallet_connector": obj.get("always_collect_billing_details_from_wallet_connector") if obj.get("always_collect_billing_details_from_wallet_connector") is not None else False,
            "is_connector_agnostic_mit_enabled": obj.get("is_connector_agnostic_mit_enabled"),
            "payout_link_config": BusinessPayoutLinkConfig.from_dict(obj["payout_link_config"]) if obj.get("payout_link_config") is not None else None,
            "outgoing_webhook_custom_http_headers": obj.get("outgoing_webhook_custom_http_headers"),
            "tax_connector_id": obj.get("tax_connector_id"),
            "is_tax_connector_enabled": obj.get("is_tax_connector_enabled"),
            "is_network_tokenization_enabled": obj.get("is_network_tokenization_enabled"),
            "is_auto_retries_enabled": obj.get("is_auto_retries_enabled"),
            "max_auto_retries_enabled": obj.get("max_auto_retries_enabled"),
            "always_request_extended_authorization": obj.get("always_request_extended_authorization"),
            "is_click_to_pay_enabled": obj.get("is_click_to_pay_enabled"),
            "authentication_product_ids": obj.get("authentication_product_ids"),
            "card_testing_guard_config": CardTestingGuardConfig.from_dict(obj["card_testing_guard_config"]) if obj.get("card_testing_guard_config") is not None else None,
            "is_clear_pan_retries_enabled": obj.get("is_clear_pan_retries_enabled"),
            "force_3ds_challenge": obj.get("force_3ds_challenge"),
            "is_debit_routing_enabled": obj.get("is_debit_routing_enabled"),
            "merchant_business_country": obj.get("merchant_business_country")
        })
        return _obj



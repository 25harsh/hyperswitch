# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.business_collect_link_config import BusinessCollectLinkConfig
from hyperswitch.models.merchant_details import MerchantDetails
from hyperswitch.models.merchant_product_type import MerchantProductType
from hyperswitch.models.primary_business_details import PrimaryBusinessDetails
from hyperswitch.models.recon_status import ReconStatus
from hyperswitch.models.routing_algorithm import RoutingAlgorithm
from hyperswitch.models.webhook_details import WebhookDetails
from typing import Optional, Set
from typing_extensions import Self

class MerchantAccountResponse(BaseModel):
    """
    MerchantAccountResponse
    """ # noqa: E501
    merchant_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The identifier for the Merchant Account")
    merchant_name: Optional[StrictStr] = Field(default=None, description="Name of the Merchant Account")
    return_url: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The URL to redirect after completion of the payment")
    enable_payment_response_hash: StrictBool = Field(description="A boolean value to indicate if payment response hash needs to be enabled")
    payment_response_hash_key: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Refers to the hash key used for calculating the signature for webhooks and redirect response. If the value is not provided, a value is automatically generated.")
    redirect_to_merchant_with_http_post: StrictBool = Field(description="A boolean value to indicate if redirect to merchant with http post needs to be enabled")
    merchant_details: Optional[MerchantDetails] = None
    webhook_details: Optional[WebhookDetails] = None
    payout_routing_algorithm: Optional[RoutingAlgorithm] = None
    sub_merchants_enabled: Optional[StrictBool] = Field(default=False, description="A boolean value to indicate if the merchant is a sub-merchant under a master or a parent merchant. By default, its value is false.")
    parent_merchant_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Refers to the Parent Merchant ID if the merchant being created is a sub-merchant")
    publishable_key: Optional[StrictStr] = Field(default=None, description="API key that will be used for server side API access")
    metadata: Optional[Dict[str, Any]] = Field(default=None, description="Metadata is useful for storing additional, unstructured information on an object.")
    locker_id: Optional[StrictStr] = Field(default=None, description="An identifier for the vault used to store payment method information.")
    primary_business_details: List[PrimaryBusinessDetails] = Field(description="Details about the primary business unit of the merchant account")
    frm_routing_algorithm: Optional[RoutingAlgorithm] = None
    organization_id: Annotated[str, Field(min_length=1, strict=True, max_length=64)] = Field(description="The organization id merchant is associated with")
    is_recon_enabled: StrictBool = Field(description="A boolean value to indicate if the merchant has recon service is enabled or not, by default value is false")
    default_profile: Optional[Annotated[str, Field(strict=True, max_length=64)]] = Field(default=None, description="The default profile that must be used for creating merchant accounts and payments")
    recon_status: ReconStatus
    pm_collect_link_config: Optional[BusinessCollectLinkConfig] = None
    product_type: Optional[MerchantProductType] = None
    __properties: ClassVar[List[str]] = ["merchant_id", "merchant_name", "return_url", "enable_payment_response_hash", "payment_response_hash_key", "redirect_to_merchant_with_http_post", "merchant_details", "webhook_details", "payout_routing_algorithm", "sub_merchants_enabled", "parent_merchant_id", "publishable_key", "metadata", "locker_id", "primary_business_details", "frm_routing_algorithm", "organization_id", "is_recon_enabled", "default_profile", "recon_status", "pm_collect_link_config", "product_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MerchantAccountResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of merchant_details
        if self.merchant_details:
            _dict['merchant_details'] = self.merchant_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of webhook_details
        if self.webhook_details:
            _dict['webhook_details'] = self.webhook_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payout_routing_algorithm
        if self.payout_routing_algorithm:
            _dict['payout_routing_algorithm'] = self.payout_routing_algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in primary_business_details (list)
        _items = []
        if self.primary_business_details:
            for _item_primary_business_details in self.primary_business_details:
                if _item_primary_business_details:
                    _items.append(_item_primary_business_details.to_dict())
            _dict['primary_business_details'] = _items
        # override the default output from pydantic by calling `to_dict()` of frm_routing_algorithm
        if self.frm_routing_algorithm:
            _dict['frm_routing_algorithm'] = self.frm_routing_algorithm.to_dict()
        # override the default output from pydantic by calling `to_dict()` of pm_collect_link_config
        if self.pm_collect_link_config:
            _dict['pm_collect_link_config'] = self.pm_collect_link_config.to_dict()
        # set to None if merchant_name (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_name is None and "merchant_name" in self.model_fields_set:
            _dict['merchant_name'] = None

        # set to None if return_url (nullable) is None
        # and model_fields_set contains the field
        if self.return_url is None and "return_url" in self.model_fields_set:
            _dict['return_url'] = None

        # set to None if payment_response_hash_key (nullable) is None
        # and model_fields_set contains the field
        if self.payment_response_hash_key is None and "payment_response_hash_key" in self.model_fields_set:
            _dict['payment_response_hash_key'] = None

        # set to None if merchant_details (nullable) is None
        # and model_fields_set contains the field
        if self.merchant_details is None and "merchant_details" in self.model_fields_set:
            _dict['merchant_details'] = None

        # set to None if webhook_details (nullable) is None
        # and model_fields_set contains the field
        if self.webhook_details is None and "webhook_details" in self.model_fields_set:
            _dict['webhook_details'] = None

        # set to None if payout_routing_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.payout_routing_algorithm is None and "payout_routing_algorithm" in self.model_fields_set:
            _dict['payout_routing_algorithm'] = None

        # set to None if sub_merchants_enabled (nullable) is None
        # and model_fields_set contains the field
        if self.sub_merchants_enabled is None and "sub_merchants_enabled" in self.model_fields_set:
            _dict['sub_merchants_enabled'] = None

        # set to None if parent_merchant_id (nullable) is None
        # and model_fields_set contains the field
        if self.parent_merchant_id is None and "parent_merchant_id" in self.model_fields_set:
            _dict['parent_merchant_id'] = None

        # set to None if publishable_key (nullable) is None
        # and model_fields_set contains the field
        if self.publishable_key is None and "publishable_key" in self.model_fields_set:
            _dict['publishable_key'] = None

        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if locker_id (nullable) is None
        # and model_fields_set contains the field
        if self.locker_id is None and "locker_id" in self.model_fields_set:
            _dict['locker_id'] = None

        # set to None if frm_routing_algorithm (nullable) is None
        # and model_fields_set contains the field
        if self.frm_routing_algorithm is None and "frm_routing_algorithm" in self.model_fields_set:
            _dict['frm_routing_algorithm'] = None

        # set to None if default_profile (nullable) is None
        # and model_fields_set contains the field
        if self.default_profile is None and "default_profile" in self.model_fields_set:
            _dict['default_profile'] = None

        # set to None if pm_collect_link_config (nullable) is None
        # and model_fields_set contains the field
        if self.pm_collect_link_config is None and "pm_collect_link_config" in self.model_fields_set:
            _dict['pm_collect_link_config'] = None

        # set to None if product_type (nullable) is None
        # and model_fields_set contains the field
        if self.product_type is None and "product_type" in self.model_fields_set:
            _dict['product_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MerchantAccountResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "merchant_id": obj.get("merchant_id"),
            "merchant_name": obj.get("merchant_name"),
            "return_url": obj.get("return_url"),
            "enable_payment_response_hash": obj.get("enable_payment_response_hash") if obj.get("enable_payment_response_hash") is not None else False,
            "payment_response_hash_key": obj.get("payment_response_hash_key"),
            "redirect_to_merchant_with_http_post": obj.get("redirect_to_merchant_with_http_post") if obj.get("redirect_to_merchant_with_http_post") is not None else False,
            "merchant_details": MerchantDetails.from_dict(obj["merchant_details"]) if obj.get("merchant_details") is not None else None,
            "webhook_details": WebhookDetails.from_dict(obj["webhook_details"]) if obj.get("webhook_details") is not None else None,
            "payout_routing_algorithm": RoutingAlgorithm.from_dict(obj["payout_routing_algorithm"]) if obj.get("payout_routing_algorithm") is not None else None,
            "sub_merchants_enabled": obj.get("sub_merchants_enabled") if obj.get("sub_merchants_enabled") is not None else False,
            "parent_merchant_id": obj.get("parent_merchant_id"),
            "publishable_key": obj.get("publishable_key"),
            "metadata": obj.get("metadata"),
            "locker_id": obj.get("locker_id"),
            "primary_business_details": [PrimaryBusinessDetails.from_dict(_item) for _item in obj["primary_business_details"]] if obj.get("primary_business_details") is not None else None,
            "frm_routing_algorithm": RoutingAlgorithm.from_dict(obj["frm_routing_algorithm"]) if obj.get("frm_routing_algorithm") is not None else None,
            "organization_id": obj.get("organization_id"),
            "is_recon_enabled": obj.get("is_recon_enabled"),
            "default_profile": obj.get("default_profile"),
            "recon_status": obj.get("recon_status"),
            "pm_collect_link_config": BusinessCollectLinkConfig.from_dict(obj["pm_collect_link_config"]) if obj.get("pm_collect_link_config") is not None else None,
            "product_type": obj.get("product_type")
        })
        return _obj



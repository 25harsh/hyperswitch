# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hyperswitch.models.card_network import CardNetwork
from typing import Optional, Set
from typing_extensions import Self

class CardDetailFromLocker(BaseModel):
    """
    CardDetailFromLocker
    """ # noqa: E501
    scheme: Optional[StrictStr] = None
    issuer_country: Optional[StrictStr] = None
    last4_digits: Optional[StrictStr] = None
    expiry_month: Optional[StrictStr] = None
    expiry_year: Optional[StrictStr] = None
    card_token: Optional[StrictStr] = None
    card_holder_name: Optional[StrictStr] = None
    card_fingerprint: Optional[StrictStr] = None
    nick_name: Optional[StrictStr] = None
    card_network: Optional[CardNetwork] = None
    card_isin: Optional[StrictStr] = None
    card_issuer: Optional[StrictStr] = None
    card_type: Optional[StrictStr] = None
    saved_to_locker: StrictBool
    __properties: ClassVar[List[str]] = ["scheme", "issuer_country", "last4_digits", "expiry_month", "expiry_year", "card_token", "card_holder_name", "card_fingerprint", "nick_name", "card_network", "card_isin", "card_issuer", "card_type", "saved_to_locker"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CardDetailFromLocker from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if scheme (nullable) is None
        # and model_fields_set contains the field
        if self.scheme is None and "scheme" in self.model_fields_set:
            _dict['scheme'] = None

        # set to None if issuer_country (nullable) is None
        # and model_fields_set contains the field
        if self.issuer_country is None and "issuer_country" in self.model_fields_set:
            _dict['issuer_country'] = None

        # set to None if last4_digits (nullable) is None
        # and model_fields_set contains the field
        if self.last4_digits is None and "last4_digits" in self.model_fields_set:
            _dict['last4_digits'] = None

        # set to None if expiry_month (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_month is None and "expiry_month" in self.model_fields_set:
            _dict['expiry_month'] = None

        # set to None if expiry_year (nullable) is None
        # and model_fields_set contains the field
        if self.expiry_year is None and "expiry_year" in self.model_fields_set:
            _dict['expiry_year'] = None

        # set to None if card_token (nullable) is None
        # and model_fields_set contains the field
        if self.card_token is None and "card_token" in self.model_fields_set:
            _dict['card_token'] = None

        # set to None if card_holder_name (nullable) is None
        # and model_fields_set contains the field
        if self.card_holder_name is None and "card_holder_name" in self.model_fields_set:
            _dict['card_holder_name'] = None

        # set to None if card_fingerprint (nullable) is None
        # and model_fields_set contains the field
        if self.card_fingerprint is None and "card_fingerprint" in self.model_fields_set:
            _dict['card_fingerprint'] = None

        # set to None if nick_name (nullable) is None
        # and model_fields_set contains the field
        if self.nick_name is None and "nick_name" in self.model_fields_set:
            _dict['nick_name'] = None

        # set to None if card_network (nullable) is None
        # and model_fields_set contains the field
        if self.card_network is None and "card_network" in self.model_fields_set:
            _dict['card_network'] = None

        # set to None if card_isin (nullable) is None
        # and model_fields_set contains the field
        if self.card_isin is None and "card_isin" in self.model_fields_set:
            _dict['card_isin'] = None

        # set to None if card_issuer (nullable) is None
        # and model_fields_set contains the field
        if self.card_issuer is None and "card_issuer" in self.model_fields_set:
            _dict['card_issuer'] = None

        # set to None if card_type (nullable) is None
        # and model_fields_set contains the field
        if self.card_type is None and "card_type" in self.model_fields_set:
            _dict['card_type'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CardDetailFromLocker from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scheme": obj.get("scheme"),
            "issuer_country": obj.get("issuer_country"),
            "last4_digits": obj.get("last4_digits"),
            "expiry_month": obj.get("expiry_month"),
            "expiry_year": obj.get("expiry_year"),
            "card_token": obj.get("card_token"),
            "card_holder_name": obj.get("card_holder_name"),
            "card_fingerprint": obj.get("card_fingerprint"),
            "nick_name": obj.get("nick_name"),
            "card_network": obj.get("card_network"),
            "card_isin": obj.get("card_isin"),
            "card_issuer": obj.get("card_issuer"),
            "card_type": obj.get("card_type"),
            "saved_to_locker": obj.get("saved_to_locker")
        })
        return _obj



# coding: utf-8

"""
    Hyperswitch - API Documentation

     ## Get started  Hyperswitch provides a collection of APIs that enable you to process and manage payments. Our APIs accept and return JSON in the HTTP body, and return standard HTTP response codes.  You can consume the APIs directly using your favorite HTTP/REST library.  We have a testing environment referred to \"sandbox\", which you can setup to test API calls without affecting production data. Currently, our sandbox environment is live while our production environment is under development and will be available soon. You can sign up on our Dashboard to get API keys to access Hyperswitch API.  ### Environment  Use the following base URLs when making requests to the APIs:  | Environment   |  Base URL                          | |---------------|------------------------------------| | Sandbox       | <https://sandbox.hyperswitch.io>   | | Production    | <https://api.hyperswitch.io>       |  ## Authentication  When you sign up on our [dashboard](https://app.hyperswitch.io) and create a merchant account, you are given a secret key (also referred as api-key) and a publishable key. You may authenticate all API requests with Hyperswitch server by providing the appropriate key in the request Authorization header.  | Key             |  Description                                                                                  | |-----------------|-----------------------------------------------------------------------------------------------| | api-key         | Private key. Used to authenticate all API requests from your merchant server                  | | publishable key | Unique identifier for your account. Used to authenticate API requests from your app's client  |  Never share your secret api keys. Keep them guarded and secure. 

    The version of the OpenAPI document: 0.1.0
    Contact: hyperswitch@juspay.in
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hyperswitch.models.event_class import EventClass
from hyperswitch.models.event_type import EventType
from typing import Optional, Set
from typing_extensions import Self

class EventListItemResponse(BaseModel):
    """
    The response body for each item when listing events.
    """ # noqa: E501
    event_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The identifier for the Event.")
    merchant_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The identifier for the Merchant Account.")
    profile_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The identifier for the Business Profile.")
    object_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The identifier for the object (Payment Intent ID, Refund ID, etc.)")
    event_type: EventType
    event_class: EventClass
    is_delivery_successful: Optional[StrictBool] = Field(default=None, description="Indicates whether the webhook was ultimately delivered or not.")
    initial_attempt_id: Annotated[str, Field(strict=True, max_length=64)] = Field(description="The identifier for the initial delivery attempt. This will be the same as `event_id` for the initial delivery attempt.")
    created: datetime = Field(description="Time at which the event was created.")
    __properties: ClassVar[List[str]] = ["event_id", "merchant_id", "profile_id", "object_id", "event_type", "event_class", "is_delivery_successful", "initial_attempt_id", "created"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventListItemResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if is_delivery_successful (nullable) is None
        # and model_fields_set contains the field
        if self.is_delivery_successful is None and "is_delivery_successful" in self.model_fields_set:
            _dict['is_delivery_successful'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventListItemResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "merchant_id": obj.get("merchant_id"),
            "profile_id": obj.get("profile_id"),
            "object_id": obj.get("object_id"),
            "event_type": obj.get("event_type"),
            "event_class": obj.get("event_class"),
            "is_delivery_successful": obj.get("is_delivery_successful"),
            "initial_attempt_id": obj.get("initial_attempt_id"),
            "created": obj.get("created")
        })
        return _obj



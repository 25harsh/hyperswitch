from collections.abc import Mapping
from typing import TYPE_CHECKING, Any, TypeVar, Union, cast

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.sdk_type import SdkType
from ..types import UNSET, Unset

if TYPE_CHECKING:
    from ..models.sdk_information_sdk_ephem_pub_key import SdkInformationSdkEphemPubKey


T = TypeVar("T", bound="SdkInformation")


@_attrs_define
class SdkInformation:
    """SDK Information if request is from SDK

    Attributes:
        sdk_app_id (str): Unique ID created on installations of the 3DS Requestor App on a Consumer Device
        sdk_enc_data (str): JWE Object containing data encrypted by the SDK for the DS to decrypt
        sdk_ephem_pub_key (SdkInformationSdkEphemPubKey): Public key component of the ephemeral key pair generated by
            the 3DS SDK
        sdk_trans_id (str): Unique transaction identifier assigned by the 3DS SDK
        sdk_reference_number (str): Identifies the vendor and version for the 3DS SDK that is integrated in a 3DS
            Requestor App
        sdk_max_timeout (int): Indicates maximum amount of time in minutes
        sdk_type (Union[None, SdkType, Unset]):
    """

    sdk_app_id: str
    sdk_enc_data: str
    sdk_ephem_pub_key: "SdkInformationSdkEphemPubKey"
    sdk_trans_id: str
    sdk_reference_number: str
    sdk_max_timeout: int
    sdk_type: Union[None, SdkType, Unset] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        sdk_app_id = self.sdk_app_id

        sdk_enc_data = self.sdk_enc_data

        sdk_ephem_pub_key = self.sdk_ephem_pub_key.to_dict()

        sdk_trans_id = self.sdk_trans_id

        sdk_reference_number = self.sdk_reference_number

        sdk_max_timeout = self.sdk_max_timeout

        sdk_type: Union[None, Unset, str]
        if isinstance(self.sdk_type, Unset):
            sdk_type = UNSET
        elif isinstance(self.sdk_type, SdkType):
            sdk_type = self.sdk_type.value
        else:
            sdk_type = self.sdk_type

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update(
            {
                "sdk_app_id": sdk_app_id,
                "sdk_enc_data": sdk_enc_data,
                "sdk_ephem_pub_key": sdk_ephem_pub_key,
                "sdk_trans_id": sdk_trans_id,
                "sdk_reference_number": sdk_reference_number,
                "sdk_max_timeout": sdk_max_timeout,
            }
        )
        if sdk_type is not UNSET:
            field_dict["sdk_type"] = sdk_type

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: Mapping[str, Any]) -> T:
        from ..models.sdk_information_sdk_ephem_pub_key import SdkInformationSdkEphemPubKey

        d = dict(src_dict)
        sdk_app_id = d.pop("sdk_app_id")

        sdk_enc_data = d.pop("sdk_enc_data")

        sdk_ephem_pub_key = SdkInformationSdkEphemPubKey.from_dict(d.pop("sdk_ephem_pub_key"))

        sdk_trans_id = d.pop("sdk_trans_id")

        sdk_reference_number = d.pop("sdk_reference_number")

        sdk_max_timeout = d.pop("sdk_max_timeout")

        def _parse_sdk_type(data: object) -> Union[None, SdkType, Unset]:
            if data is None:
                return data
            if isinstance(data, Unset):
                return data
            try:
                if not isinstance(data, str):
                    raise TypeError()
                sdk_type_type_1 = SdkType(data)

                return sdk_type_type_1
            except:  # noqa: E722
                pass
            return cast(Union[None, SdkType, Unset], data)

        sdk_type = _parse_sdk_type(d.pop("sdk_type", UNSET))

        sdk_information = cls(
            sdk_app_id=sdk_app_id,
            sdk_enc_data=sdk_enc_data,
            sdk_ephem_pub_key=sdk_ephem_pub_key,
            sdk_trans_id=sdk_trans_id,
            sdk_reference_number=sdk_reference_number,
            sdk_max_timeout=sdk_max_timeout,
            sdk_type=sdk_type,
        )

        sdk_information.additional_properties = d
        return sdk_information

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties

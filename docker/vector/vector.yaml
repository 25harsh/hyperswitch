acknowledgements:
  enabled: true

api:
  enabled: true
  address: 0.0.0.0:8686

sources:
  kafka_payments:
    type: kafka
    bootstrap_servers: kafka0:29092
    group_id: sessionizer
    topics:
      - hyperswitch-consolidated-events
    decoding:
      codec: json

transforms:
  init_sessionizer_vars:
    type: remap
    inputs:
      - kafka_payments
    source: >-
      .sessionizer = {
        "table": "${CASSANDRA_TABLE:-payments}",
        "id": string!(.log.merchant_id) + "_" + string!(.log.payment_id),
        "db_log_type": "payment_intent"
      };

  buffer_with_reduce:
    type: reduce
    inputs:
      - init_sessionizer_vars
    group_by:
      - log.log_type
      - log.merchant_id
      - log.payment_id
      - log.attempt_id
      - log.refund_id
      - log.dispute_id
    merge_strategies:
      log: retain
    expire_after_ms: 5000

  cassandra_sessionize:
    type: lua
    inputs:
      - buffer_with_reduce
    version: "2"
    hooks:
      init: init
      process: process
      shutdown: shutdown
    source: |-
      local socket = require "socket"
      local cassandra = require "cassandra"
      local json = require "json"

      function sleep(sec)
        socket.select(nil, nil, sec)
      end

      function client_connect()
        assert(client:connect())
      end

      function client_close()
        assert(client:close())
      end

      function create_cassandra_connection()
        client = assert(cassandra.new {
          host = os.getenv("CASSANDRA_HOST") or "cassandra0",
          port = os.getenv("CASSANDRA_PORT") or 9042,
          keyspace = os.getenv("CASSANDRA_KEYSPACE") or "sessionizer",
          auth = cassandra.auth_providers.plain_text(os.getenv("CASSANDRA_USERNAME") or "cassandra", os.getenv("CASSANDRA_PASSWORD") or "cassandra"),
          ssl = os.getenv("CASSANDRA_SSL") or false,
          cert = os.getenv("CASSANDRA_CERT") or ""
        })

        client:settimeout(1000)
        client:setkeepalive(0)
        client_connect()
      end

      function db_get(table, id, version)
        local version = version or 1
        local rows = assert(client:execute(string.format("SELECT * FROM %s WHERE id = ?", table), {
          id
        }))
        return rows
      end

      function db_set(table, state, id, version)
        version = version or 1
        local res = assert(client:execute(string.format("INSERT INTO %s (id, state, version) VALUES (?, ?, ?)", table), {
          id,
          state,
          version
        },{consistency = cassandra.consistencies.local_quorum}))
        return res
      end

      function db_get_wait(table, id, version)
        local is_success, data = pcall(db_get, table, id, version)
        while not is_success do
          sleep(5)

          print(string.format("db_get - recreate cassandra connection start - reason - %s", data))
          local connection_closed, err = pcall(client_close)
          print(string.format("db_get - close old cassandra connection - result - %s, %s", connection_closed, err))
          local connection_success, err = pcall(create_cassandra_connection)
          print(string.format("db_get - recreate cassandra connection end - result - %s, %s", connection_success, err))

          is_success, data = pcall(db_get, table, id, version)
        end

        return data
      end

      function db_set_wait(table, state, id, version)
        local is_success, res = pcall(db_set, table, state, id, version)

        while not is_success do
          sleep(5)

          print(string.format("db_set - recreate cassandra connection start - reason - %s", res))
          local connection_closed, err = pcall(client_close)
          print(string.format("db_set - close old cassandra connection - result - %s, %s", connection_closed, err))
          local connection_success, err = pcall(create_cassandra_connection)
          print(string.format("db_set - recreate cassandra connection end - result - %s, %s", connection_success, err))

          is_success, res = pcall(db_set, table, state, id, version)
        end

        return res
      end

      function get_value(tb, path)
        local value = tb

        for i, v in ipairs(path) do
          value = value[v] or {}
        end

        return value
      end

      function set_value(tb, path, value, index)
        local index = index or 1

        if index > #path then
          return value
        else
          tb[path[index]] = set_value(tb[path[index]] or {}, path, value, index + 1)
        end
        
        return tb
      end

      function init(emit)
        create_cassandra_connection()  
      end

      function process(event, emit)
        local sessionizer = event.log.sessionizer
        local new_log_type = event.log.log_type
        local new_log = event.log.log
        local db_log = {}

        local data = db_get_wait(sessionizer.table, sessionizer.id)

        local traverse_map = nil

        if new_log_type == "payment_intent" then
          traverse_map = {}
        elseif new_log_type == "payment_attempt" then
          traverse_map = {"attempts", new_log.attempt_id}
        elseif new_log_type == "refund" then
          traverse_map = {"attempts", new_log.attempt_id, "refunds", new_log.refund_id}
        elseif new_log_type == "dispute" then
          traverse_map = {"attempts", new_log.attempt_id, "disputes", new_log.dispute_id}
        end

        if #data == 1 then
          event.log.old_log = data[1].state
          db_log = json.decode(data[1].state)
        end

        if type(traverse_map) ~= nil then
          local log = get_value(db_log, traverse_map)

          for k, v in pairs(new_log) do
            log[k] = v
          end

          db_log = set_value(db_log, traverse_map, log)
        end

        event.log.log = db_log

        local _new_event_insert = db_set_wait(sessionizer.table, json.encode(db_log), sessionizer.id)
        emit(event)

      end

      function shutdown(emit)
        client:close()
      end

  generate_signed_events:
    type: remap
    inputs:
      - cassandra_sessionize
    source: >-
      events = [];
      if exists(.old_log) {
        .old_log = parse_json(.old_log) ?? {};
        .old_log.sign_flag = -1;
        events = push(events, .old_log);
      };
      .log.sign_flag = 1;
      events = push(events, .log);
      . = events

  consolidate_events:
    type: remap
    inputs:
      - generate_signed_events
    source: >-
      attempts = object(.attempts) ?? {};
      attempt_total_count = 0;
      attempt_total_amount = 0;
      attempt_success_count = 0;
      attempt_success_amount = 0;

      for_each(attempts) -> |attempt_id, attempt| {

        attempt_log = object(attempt) ?? {};

        attempt_total_count = attempt_total_count + 1;
        attempt_total_amount = attempt_total_amount + to_float(attempt_log.amount) ?? 0;
        if attempt_log.status == "charged" {
          attempt_success_count = attempt_success_count + 1;
          attempt_success_amount = attempt_success_amount + to_float(attempt_log.amount) ?? 0;
        }

        refunds = object(attempt_log.refunds) ?? {};
        refund_total_count = 0;
        refund_total_amount = 0;
        refund_success_count = 0;
        refund_success_amount = 0;

        for_each(refunds) -> |_refund_id, refund| {
          refund_log = object(refund) ?? {};
          
          refund_total_count = refund_total_count + 1;
          refund_total_amount = refund_total_amount + to_float(refund_log.refund_amount) ?? 0;
          if refund_log.status == "succeeded" {
            refund_success_count = refund_success_count + 1;
            refund_success_amount = refund_success_amount + to_float(refund_log.refund_amount) ?? 0;
          }
        }

        .refund_total_count = refund_total_count + to_int(.refund_total_count) ?? 0;
        .refund_total_amount = refund_total_amount + to_float(.refund_total_amount) ?? 0;
        .refund_success_count = refund_success_count + to_int(.refund_success_count) ?? 0;
        .refund_success_amount = refund_success_amount + to_float(.refund_success_amount) ?? 0;

        attempt_log.refund_total_count = refund_total_count;
        attempt_log.refund_total_amount = refund_total_amount;
        attempt_log.refund_success_count = refund_success_count;
        attempt_log.refund_success_amount = refund_success_amount;

        disputes = object(attempt_log.disputes) ?? {};
        dispute_total_count = 0;
        dispute_total_amount = 0;
        dispute_success_count = 0;
        dispute_success_amount = 0;

        for_each(disputes) -> |_dispute_id, dispute| {
          dispute_log = object(dispute) ?? {};

          dispute_total_count = dispute_total_count + 1;
          dispute_total_amount = dispute_total_amount + to_float(dispute_log.dispute_amount) ?? 0;
          if dispute_log.dispute_status == "dispute_won" {
            dispute_success_count = dispute_success_count + 1;
            dispute_success_amount = dispute_success_amount + to_float(dispute_log.dispute_amount) ?? 0;
          }
        }

        .dispute_total_count = dispute_total_count + to_int(.dispute_total_count) ?? 0;
        .dispute_total_amount = dispute_total_amount + to_float(.dispute_total_amount) ?? 0;
        .dispute_success_count = dispute_success_count + to_int(.dispute_success_count) ?? 0;
        .dispute_success_amount = dispute_success_amount + to_float(.dispute_success_amount) ?? 0;

        attempt_log.dispute_total_count = dispute_total_count;
        attempt_log.dispute_total_amount = dispute_total_amount;
        attempt_log.dispute_success_count = dispute_success_count;
        attempt_log.dispute_success_amount = dispute_success_amount;

        .attempts = set!(.attempts, [attempt_id], attempt_log)
      }

      .attempt_total_count = attempt_total_count + to_int(.attempt_total_count) ?? 0;
      .attempt_total_amount = attempt_total_amount + to_float(.attempt_total_amount) ?? 0;
      .attempt_success_count = attempt_success_count + to_int(.attempt_success_count) ?? 0;
      .attempt_success_amount = attempt_success_amount + to_float(.attempt_success_amount) ?? 0;

  consolidate_events_intents:
    type: remap
    inputs:
      - consolidate_events
    source: >-
      if exists(.merchant_id) && exists(.payment_id) {
        del(.attempts);
        .sessionizer_key = string!(.merchant_id) + "_" + string!(.payment_id);
        # .log_type = "payment_intent";
      } else {
        . = []
      }

  consolidate_events_attempts:
    type: remap
    inputs:
      - consolidate_events
    source: >-
      . = flatten(map_values(values(object(.attempts) ?? {})) -> |a| {
        attempt = object(a) ?? {};
        if exists(attempt.merchant_id) && exists(attempt.payment_id) && exists(attempt.attempt_id) {
          del(attempt.refunds);
          del(attempt.disputes);
          attempt.sign_flag = .sign_flag;
          # attempt.log_type = "payment_attempt";
          attempt.sessionizer_key = string!(attempt.merchant_id) + "_" + string!(attempt.payment_id) + "_" + string!(attempt.attempt_id);
          attempt
        } else {
          []
        }
      })

  consolidate_events_refunds:
    type: remap
    inputs:
      - consolidate_events
    source: >-
      . = flatten(map_values(values(object(.attempts) ?? {})) -> |a| {
          attempt = object(a) ?? {};
          map_values(values(object(attempt.refunds) ?? {})) -> |r| {
            refund = object(r) ?? {};
            if exists(refund.merchant_id) && exists(refund.payment_id) && exists(refund.attempt_id) && exists(refund.refund_id) {
              refund.sign_flag = .sign_flag;
              # refund.log_type = "refund";
              refund.sessionizer_key = string!(refund.merchant_id) + "_" + string!(refund.payment_id) + "_" + string!(refund.attempt_id) + "_" + string!(refund.refund_id);
              refund
            } else {
              []
            }
          }
        })

  consolidate_events_disputes:
    type: remap
    inputs:
      - consolidate_events
    source: >-
      . = flatten(map_values(values(object(.attempts) ?? {})) -> |a| {
          attempt = object(a) ?? {};
          map_values(values(object(attempt.disputes) ?? {})) -> |d| {
            dispute = object(d) ?? {};
            if exists(dispute.merchant_id) && exists(dispute.payment_id) && exists(dispute.attempt_id) && exists(dispute.dispute_id) {
              dispute.sign_flag = .sign_flag;
              # dispute.log_type = "dispute";
              dispute.sessionizer_key = string!(dispute.merchant_id) + "_" + string!(dispute.payment_id) + "_" + string!(dispute.attempt_id) + "_" + string!(dispute.dispute_id);
              dispute
            } else {
              []
            }
          }
        })

sinks:
  # kafka_intents_sink:
  #   type: kafka
  #   inputs:
  #     - consolidate_events_intents
  #   bootstrap_servers: kafka0:29092
  #   topic: consolidated-intent-events
  #   key_field: sessionizer_key
  #   encoding:
  #     codec: json

  console_intents:
    inputs:
      - consolidate_events_intents
    target: stdout
    type: console
    encoding:
      codec: json

  console_attempts:
    inputs:
      - consolidate_events_attempts
    target: stdout
    type: console
    encoding:
      codec: json

  console_refunds:
    inputs:
      - consolidate_events_refunds
    target: stdout
    type: console
    encoding:
      codec: json

  console_disputes:
    inputs:
      - consolidate_events_disputes
    target: stdout
    type: console
    encoding:
      codec: json

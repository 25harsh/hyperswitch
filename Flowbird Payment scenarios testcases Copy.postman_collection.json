{
	"info": {
		"_postman_id": "2275550d-0054-4dc1-8f3a-568c3addcd45",
		"name": "Flowbird Payment scenarios testcases Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24774291"
	},
	"item": [
		{
			"name": "Create Merchant",
			"item": [
				{
					"name": "Merchant Account - Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/accounts - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/accounts - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set merchant_id as variable for jsonData.merchant_id",
									"if (jsonData?.merchant_id) {",
									"   pm.collectionVariables.set(\"merchant_id\", jsonData.merchant_id);",
									"   console.log(\"- use {{merchant_id}} as collection variable for value\",jsonData.merchant_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{merchant_id}}, as jsonData.merchant_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set pub_key as variable for jsonData.pub_key",
									"if (jsonData?.publishable_key) {",
									"   pm.collectionVariables.set(\"pub_key\", jsonData.publishable_key);",
									"   console.log(\"- use {{pub_key}} as collection variable for value\",jsonData.publishable_key);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{pub_key}}, as jsonData.publishable_key is undefined.');",
									"};",
									"",
									"if (jsonData?.profile_id) {",
									"   pm.collectionVariables.set(\"profile_id\", jsonData.profile_id);",
									"   console.log(\"- use {{profile_id}} as collection variable for value\",jsonData.profile_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{profile_id}}, as jsonData.profile_id is undefined.');",
									"};",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{admin_api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-tenant-id",
								"value": "{{tenant_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"merchant_id\": \"merchant_{{$timestamp}}\",\n  \"locker_id\": \"m0010\",\n  \"merchant_name\": \"NewAge Retailer\",\n  \"merchant_details\": {\n    \"primary_contact_person\": \"John Test\",\n    \"primary_email\": \"JohnTest@test.com\",\n    \"primary_phone\": \"sunt laborum\",\n    \"secondary_contact_person\": \"John Test2\",\n    \"secondary_email\": \"JohnTest2@test.com\",\n    \"secondary_phone\": \"cillum do dolor id\",\n    \"website\": \"www.example.com\",\n    \"about_business\": \"Online Retail with a wide selection of organic products for North America\",\n    \"address\": {\n      \"line1\": \"1467\",\n      \"line2\": \"Harrison Street\",\n      \"line3\": \"Harrison Street\",\n      \"city\": \"San Fransico\",\n      \"state\": \"California\",\n      \"zip\": \"94122\",\n      \"country\": \"US\"\n    }\n  },\n  \"return_url\": \"https://google.com/success\",\n  \"webhook_details\": {\n    \"webhook_version\": \"1.0.1\",\n    \"webhook_username\": \"ekart_retail\",\n    \"webhook_password\": \"password_ekart@123\",\n    \"payment_created_enabled\": true,\n    \"payment_succeeded_enabled\": true,\n    \"payment_failed_enabled\": true\n  },\n  \"sub_merchants_enabled\": false,\n  \"metadata\": {\n    \"city\": \"NY\",\n    \"unit\": \"245\"\n  },\n  \"primary_business_details\": [\n    {\n      \"country\": \"US\",\n      \"business\": \"default\"\n    }\n  ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/accounts",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"accounts"
							]
						},
						"description": "Create a new account for a merchant. The merchant could be a seller or retailer or client who likes to receive and send payments."
					},
					"response": []
				},
				{
					"name": "Create API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {",
									"  jsonData = pm.response.json();",
									"} catch(e) {",
									"}",
									"",
									"// pm.collectionVariables - Set api_key as variable for jsonData.key_id",
									"if (jsonData?.key_id) {",
									"   pm.collectionVariables.set(\"api_key\", jsonData.key_id);",
									"   console.log(\"- use {{api_key}} as collection variable for value\", jsonData.key_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{api_key}}, as jsonData.key_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set api_key as variable for jsonData.api_key",
									"if (jsonData?.api_key) {",
									"   pm.collectionVariables.set(\"api_key\", jsonData.api_key);",
									"   console.log(\"- use {{api_key}} as collection variable for value\", jsonData.api_key);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{api_key}}, as jsonData.api_key is undefined.');",
									"};"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{admin_api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"API Key 1\",\n  \"description\": null,\n  \"expiration\": \"2038-01-19T03:14:08.000Z\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api_keys/:merchant_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api_keys",
								":merchant_id"
							],
							"variable": [
								{
									"key": "merchant_id",
									"value": "{{merchant_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "create business_profile",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"if (jsonData?.profile_id) {",
									"   pm.collectionVariables.set(\"profile_id\", jsonData.profile_id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{admin_api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "api-key",
								"value": "<api-key>"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"profile_name\": \"{{$timestamp}}\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/account/{{merchant_id}}/business_profile",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"account",
								"{{merchant_id}}",
								"business_profile"
							]
						}
					},
					"response": []
				},
				{
					"name": "Payment Connector - Cybersource Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/account/:account_id/connectors - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/account/:account_id/connectors - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"if (jsonData?.profile_id) {",
									"   pm.collectionVariables.set(\"profile_id\", jsonData.profile_id);",
									"}",
									"// pm.collectionVariables - Set merchant_connector_id as variable for jsonData.merchant_connector_id",
									"if (jsonData?.merchant_connector_id) {",
									"   pm.collectionVariables.set(\"merchant_connector_id\", jsonData.merchant_connector_id);",
									"   console.log(\"- use {{merchant_connector_id}} as collection variable for value\",jsonData.merchant_connector_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{merchant_connector_id}}, as jsonData.merchant_connector_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"followOriginalHttpMethod": true,
						"disableUrlEncoding": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{admin_api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"connector_type\": \"payment_processor\",\n    \"connector_name\": \"cybersource\",\n    \"connector_account_details\": {\n        \"api_key\": \"4a754a42-3319-4c9e-97c6-994cabd79c02\",\n        \"key1\": \"mpptiscity1\",\n        \"api_secret\": \"R4Ceahui70/RYwOPbHER52S5XQOOYyuXpl0aakwr4zs=\",\n        \"auth_type\": \"SignatureKey\"\n    },\n    \"profile_id\":\"{{profile_id}}\",\n    \"test_mode\": false,\n    \"disabled\": false,\n    \"payment_methods_enabled\": [\n        {\n            \"payment_method\": \"card\",\n            \"payment_method_types\": [\n                {\n                    \"payment_method_type\": \"credit\",\n                    \"card_networks\": [\n                        \"Visa\",\n                        \"Mastercard\",\n                        \"DinersClub\",\n                        \"Discover\"\n                    ],\n                    \"minimum_amount\": -1,\n                    \"maximum_amount\": 68607706,\n                    \"recurring_enabled\": true,\n                    \"installment_payment_enabled\": true\n                },\n                {\n                    \"payment_method_type\": \"debit\",\n                    \"card_networks\": [\n                        \"Visa\",\n                        \"Mastercard\",\n                        \"DinersClub\",\n                        \"Discover\"\n                    ],\n                    \"minimum_amount\": -1,\n                    \"maximum_amount\": 68607706,\n                    \"recurring_enabled\": true,\n                    \"installment_payment_enabled\": true\n                }\n            ]\n        },\n        {\n            \"payment_method\": \"wallet\",\n            \"payment_method_types\": [\n                {\n                    \"payment_method_type\": \"google_pay\",\n                    \"minimum_amount\": 1,\n                    \"maximum_amount\": 68607706,\n                    \"recurring_enabled\": true,\n                    \"payment_experience\": \"redirect_to_url\",\n                    \"installment_payment_enabled\": true\n                },\n                {\n                    \"payment_method_type\": \"apple_pay\",\n                    \"minimum_amount\": 1,\n                    \"maximum_amount\": 68607706,\n                    \"recurring_enabled\": true,\n                    \"payment_experience\": \"invoke_sdk_client\",\n                    \"installment_payment_enabled\": true\n                }\n            ]\n        }\n    ],\n    \"metadata\": {\n        \"apple_pay\": {\n            \"session_token_data\": {\n                \"initiative\": \"web\",\n                \"certificate\": \"LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUdUakNDQlRhZ0F3SUJBZ0lRVkhMWnJxR200N1pRejRSMWNkMkp5VEFOQmdrcWhraUc5dzBCQVFzRkFEQjEKTVVRd1FnWURWUVFERER0QmNIQnNaU0JYYjNKc1pIZHBaR1VnUkdWMlpXeHZjR1Z5SUZKbGJHRjBhVzl1Y3lCRApaWEowYVdacFkyRjBhVzl1SUVGMWRHaHZjbWwwZVRFTE1Ba0dBMVVFQ3d3Q1J6TXhFekFSQmdOVkJBb01Da0Z3CmNHeGxJRWx1WXk0eEN6QUpCZ05WQkFZVEFsVlRNQjRYRFRJek1USXlNVEV5TlRNMU1Wb1hEVEkyTURFeE9URXkKTlRNMU1Gb3dnZEF4T2pBNEJnb0praWFKay9Jc1pBRUJEQ3B0WlhKamFHRnVkQzVqYjIwdVltRnVhMjltWVcxbApjbWxqWVM1aGNIQnNaWEJoZVM1dFlXNTFZV3d4VHpCTkJnTlZCQU1NUmtGd2NHeGxJRkJoZVNCTlpYSmphR0Z1CmRDQkpaR1Z1ZEdsMGVUcHRaWEpqYUdGdWRDNWpiMjB1WW1GdWEyOW1ZVzFsY21sallTNWhjSEJzWlhCaGVTNXQKWVc1MVlXd3hFekFSQmdOVkJBc01DbGxOT1ZVM00xb3lTazB4TERBcUJnTlZCQW9NSTBwVlUxQkJXU0JVUlVOSQpUazlNVDBkSlJWTWdVRkpKVmtGVVJTQk1TVTFKVkVWRU1JSUJJakFOQmdrcWhraUc5dzBCQVFFRkFBT0NBUThBCk1JSUJDZ0tDQVFFQTNkREF1VzVHakdVUHpVZWs5UVUrckk1dHV4MURsbEhCeU1sbHVqNjdFb1BoRGtRWDZ4ajEKT3NHdEpUMFNybVFTTDlobjdBb1ljWk5adUczOStnbEtmN0NNRkhXa1BtOEVXdXRZWU1KMmlTK2J4Q29vb0tjbQpvdVdpcEtKWEkwNVVPTm1FVFNRRWpoVDdiSTBJeHE4MGhpVy9ZdnV0QmhUYmtFZitXelRiQ1Fud0N0T04weWM1Ck91QWlRMW1NTHduOEpJdFVGZ1g1N0ZmRTllakxOZTdSOTIyZkg1djJNbEZaMWFvVHN2R3RxbDhWZ08yLzlydWoKbWZYU2JpWmljN3RrR3pKY3lMR2Y4SjhUNjE5VW0xWmRmTEJBRmNTQUtWWjQrdG04Y3JuM2g1QWZJdEFNcE5GSAp4Y0hUc3NuekJ0dHczNDBkdVJoeXVIRjhrY0daeWpyUlB3SURBUUFCbzRJQ2ZEQ0NBbmd3REFZRFZSMFRBUUgvCkJBSXdBREFmQmdOVkhTTUVHREFXZ0JRSi9zQVZrUG12WkFxU0Vya21LR01NbCt5bnNqQndCZ2dyQmdFRkJRY0IKQVFSa01HSXdMUVlJS3dZQkJRVUhNQUtHSVdoMGRIQTZMeTlqWlhKMGN5NWhjSEJzWlM1amIyMHZkM2RrY21jegpMbVJsY2pBeEJnZ3JCZ0VGQlFjd0FZWWxhSFIwY0RvdkwyOWpjM0F1WVhCd2JHVXVZMjl0TDI5amMzQXdNeTEzCmQyUnlaek13T1RDQ0FTMEdBMVVkSUFTQ0FTUXdnZ0VnTUlJQkhBWUpLb1pJaHZkalpBVUJNSUlCRFRDQjBRWUkKS3dZQkJRVUhBZ0l3Z2NRTWdjRlNaV3hwWVc1alpTQnZiaUIwYUdseklFTmxjblJwWm1sallYUmxJR0o1SUdGdQplU0J3WVhKMGVTQnZkR2hsY2lCMGFHRnVJRUZ3Y0d4bElHbHpJSEJ5YjJocFltbDBaV1F1SUZKbFptVnlJSFJ2CklIUm9aU0JoY0hCc2FXTmhZbXhsSUhOMFlXNWtZWEprSUhSbGNtMXpJR0Z1WkNCamIyNWthWFJwYjI1eklHOW0KSUhWelpTd2dZMlZ5ZEdsbWFXTmhkR1VnY0c5c2FXTjVJR0Z1WkNCalpYSjBhV1pwWTJGMGFXOXVJSEJ5WVdOMAphV05sSUhOMFlYUmxiV1Z1ZEhNdU1EY0dDQ3NHQVFVRkJ3SUJGaXRvZEhSd2N6b3ZMM2QzZHk1aGNIQnNaUzVqCmIyMHZZMlZ5ZEdsbWFXTmhkR1ZoZFhSb2IzSnBkSGt2TUJNR0ExVWRKUVFNTUFvR0NDc0dBUVVGQndNQ01CMEcKQTFVZERnUVdCQlRBc0FzckFiV0F0a2cvODFRM0tKdU9jWHJMUkRBT0JnTlZIUThCQWY4RUJBTUNCNEF3VHdZSgpLb1pJaHZkalpBWWdCRUlNUURnMVJETTFOMFk1TXpJek9EWTFRVGMzUmpWQ09ETkJOa000TVROQlJqRTNPRE0zClFrRXlNamt6TlVRd09EWTBPRVl5TXpoQ01VSXlORVU0TkRkQlFrWXdEd1lKS29aSWh2ZGpaQVl1QkFJRkFEQU4KQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBVjc5NnpzclcvNGl5R2lkVFg3aE4yRnpmbCtHN0FUb0VwTGZ5bGdlOApnRnowNHpjNWxsTHZtcmpIclkzSCt1ZkdHMGtueHpRdTVoWWtmcGJTSVdMTTdNZ04yL3BBYkpicjl6Umx3TSs4CkxibnJJSnNuMVdMUzNBb0NwZk1rUXh1NWtCd2p1NkliYTRTRlpnSGZ4TUl0Q3FYd2VEaWhYdk9HQTFqMldWNGUKbGx6ZWF5MzMzblJzYkxqOVQ1OFJrSHlTODhwQzY4ZEtkWnBZbkhMS3YrTFhsNDNSODhscUtmNjN2V1FrWFRoYgp5VjhsTEtDdlBYM0l1VE9JMzdLZ3kyTlBsdllIeWtqZDRVVFY4MXRsdXZiZURQdGlhR0dlQUU5T0FXN0VRL250CllLU0dlbVZRS2FQR1lBdnF5bkI4dkhSVW0rNVNLQ3MxT1dPZU1vU0VjUUFUbEE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t\",\n                \"display_name\": \"Getin Manual Apple Pay\",\n                \"certificate_keys\": \"LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRGQwTUM1YmthTVpRL04KUjZUMUJUNnNqbTI3SFVPV1VjSEl5V1c2UHJzU2crRU9SQmZyR1BVNndhMGxQUkt1WkJJdjJHZnNDaGh4azFtNApiZjM2Q1VwL3NJd1VkYVErYndSYTYxaGd3bmFKTDV2RUtpaWdweWFpNWFLa29sY2pUbFE0MllSTkpBU09GUHRzCmpRakdyelNHSmI5aSs2MEdGTnVRUi81Yk5Oc0pDZkFLMDQzVEp6azY0Q0pEV1l3dkNmd2tpMVFXQmZuc1Y4VDEKNk1zMTd0SDNiWjhmbS9ZeVVWblZxaE95OGEycVh4V0E3Yi8ydTZPWjlkSnVKbUp6dTJRYk1seklzWi93bnhQcgpYMVNiVmwxOHNFQVZ4SUFwVm5qNjJieHl1ZmVIa0I4aTBBeWswVWZGd2RPeXlmTUcyM0RmalIyNUdISzRjWHlSCndabktPdEUvQWdNQkFBRUNnZ0VBQ3VVRVhPeUpiMm1pM3cyYlY5eWFUc2ZTd014dEtTMlcwUU5qVUdEdmZ0UEIKSzVwdDdCZXkxWXJZMEQ4eHErdjRrbndpeDNJOXR1TE9GdUE1QjZ1S0NyK0FBZFd3NjdMRis4UGlGT3IvVkZZUAoxb0o0NndsUnkxL0ZXQ2hKRTE0djkrbjFVVmtUd1JYZForNWc5WWFXekxtNElJTmFxL3l2S1dULzFsVXlDajJGClFHZC9jL2cxR2NsWTA0eWpOb0dTRjBpenA0RjBCak5hbk5TZWpaQythNERRb1RrWGVtVjVCeG5JbWFMOWs3MmsKYnZ6VHFIRUFqUE5JaGpQUWdZZGdsbzZjYVRPeHJYaDRKdXcxK1Q4SGY1MisrY2k1cXkvcHJpekxmTHQrd3QyWQpLUjBIalExdUk1RnJmOTc3eE1ZOE5abDE1aVk1d3hwTjZKcGp6MUF1WVFLQmdRRC9BSDhhWDFhSDM5eks3S3RwCmhFWTZ6dlB6SWtTS2E3eTYybm41SHBhTmZieWZDMW92dWNZMWljanpremdKRjlLZzlzdStQbnVIUFNtT2NwMHQKcU1sMXRHSDZoMy8yVktPVEtrZCtmUXdRN2lNTGk3VVVoZ1NzTmowVnF1RmE4d3JUaXoyRUE1Q1JEMTI5b3lpNApOUVpRamxqUjU1c1BDTFhIem4wYUFJZnBKd0tCZ1FEZXJ3RXExdFRMMlRnTU5VamdhQnZZWWh5ZGJwR1lkaXk2ClVJT3IzZElTK0ZSYzk4RU9oK29jbVNMZ2VaTUFJaXdWNzc1TGRXUnI2aHhERmphdmY2N2ViaGFsclJVRHZWc2MKYXRwbkl3a0szY1ZsSkxELzFqd1V0YXpuRDY1cGtFUzVKWVR4YU1kY2hDQ2N4WUVYdlV1d25jOUM5YWhPdm1vaQpKRzRmWngzMktRS0JnSGxZOENOSnFURGhtLzFKSU0wR3NERCtHT0xqdE1BMlFzcWNleHpNckpKS2VuOG85Tkx2ClVkNWFZakZmSm5SVlROdGlkbFJqQVgrNjRGSzBRZzNmVzNkU3pxbGMzODBHUEEwbE9uNTczVWtWT2NJZHlwOG8KbzRLY0VQZUZxTllTQUYzb3plNUxqL2tuMmRFTG1xNEdOYW9TQXp4b1BjYXF1MjZJMmNtTTVTQlRBb0dBWFZoZQoxT1paTFZwUTlFMGh6Mi9VdkUva1R0b2FqaDU3Z1Y1ZTA1eVlndnMxNGdLNUdxNCtwTjVNa0d4bUFwaFFncUdNCjAzVFNNNnBmVG4veFRIL3BmYlFJS2tyemxDMjhFNTEzRCtUUDFZNUJRTFN3dlkzQWdhM21YTFZtRnpveWxLbjEKb0h5YmxWeU5qeW43ZzBnR2duS2tmeDBiQUdjeGRqNXZLeHErcElFQ2dZRUFnNFVTU1BpSlVDelNqc1NyMWJHZwo5N0s3ZzJyeEFCdG93ZHdxc3lQU0t1aXRsTThYNksrZUV1N0ljaUJFS2oxTGt4WGoxV2dCcisrejBmVWovMlVSCjdlVUh3bnduOHlUanRLZkh6NnkyNm9HV1J1VWJtTlRjeEhMSWtQeHdJelVPcFlKL0lsUFdhbkpJaHd6R0hQRHMKUDA1YWFjYUtYMlVUWWtzR05MaGtJM009Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0=\",\n                \"initiative_context\": \"sdk-test-app.netlify.app\",\n                \"merchant_identifier\": \"merchant.com.bankofamerica.applepay.manual\"\n            },\n            \"payment_request_data\": {\n                \"label\": \"applepay\",\n                \"supported_networks\": [\n                    \"visa\",\n                    \"masterCard\",\n                    \"amex\",\n                    \"discover\"\n                ],\n                \"merchant_capabilities\": [\n                    \"supports3DS\"\n                ]\n            }\n        }\n    },\n    \"connector_label\":\"cybersource_US_default1\",\n    \"connector_webhook_details\": {\n        \"merchant_secret\": \"MyWebhookSecret\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/account/:account_id/connectors",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"account",
								":account_id",
								"connectors"
							],
							"variable": [
								{
									"key": "account_id",
									"value": "{{merchant_id}}",
									"description": "(Required) The unique identifier for the merchant account"
								}
							]
						},
						"description": "Create a new Payment Connector for the merchant account. The connector could be a payment processor / facilitator / acquirer or specialised services like Fraud / Accounting etc."
					},
					"response": []
				}
			]
		},
		{
			"name": "Create Customer",
			"item": [
				{
					"name": "BO: Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// Response body should have \"customer_id\"",
									"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
									"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have a minimum length of \"1\" for \"customer_id\"",
									"if (jsonData?.customer_id) {",
									"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
									"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
									"})};",
									"",
									"",
									"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
									"if (jsonData?.customer_id) {",
									"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
									"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"First customer\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
					},
					"response": []
				}
			]
		},
		{
			"name": "Use Case 1 - New user payment",
			"item": [
				{
					"name": "BO: Customer books parking slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'payment_method_data' exists\", function() {",
									"   pm.expect((typeof jsonData.payment_method_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 dffdg\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"payment_type\": \"new_mandate\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.default_payment_method_set) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				}
			]
		},
		{
			"name": "Use Case 2 - Returning User Payment",
			"item": [
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.payment_token) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "BO: Customer books slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.payment_token) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/payment_methods?client_secret={{client_secret}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"payment_methods"
							],
							"query": [
								{
									"key": "client_secret",
									"value": "{{client_secret}}"
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm with default payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_token\": \"{{payment_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				}
			]
		},
		{
			"name": "Usecase 3- Save payment method and recurring payment",
			"item": [
				{
					"name": "BO: Save Payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 0,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 name\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"payment_type\": \"setup_mandate\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.default_payment_method_set) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "BO: Recurring Payments",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"payment_method_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'payment_method_data' exists\", function() {",
									"   pm.expect((typeof jsonData.payment_method_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 2000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"guest@example.com\",\n    \"setup_future_usage\": \"off_session\",\n    \"billing\": {\n        \"address\": {\n            \"city\": \"test\",\n            \"country\": \"US\",\n            \"line1\": \"here\",\n            \"line2\": \"there\",\n            \"line3\": \"anywhere\",\n            \"zip\": \"560095\",\n            \"state\": \"Washington\",\n            \"first_name\": \"One\",\n            \"last_name\": \"Two\"\n        },\n        \"phone\": {\n            \"number\": \"1234567890\",\n            \"country_code\": \"+1\"\n        },\n        \"email\": \"guest@example.com\"\n    },\n    \"authentication_type\": \"no_three_ds\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_token\": \"{{payment_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				}
			]
		},
		{
			"name": "I(b) Card Registration with zero dollar auth",
			"item": [
				{
					"name": "BO: Register card request- get client_secret",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 0,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    },\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 name\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"payment_type\": \"setup_mandate\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				},
				{
					"name": "BO: Payments retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id"
							],
							"query": [
								{
									"key": "client_secret",
									"value": "pay_1sIy7sTMzo8ibi00iOQB_secret_8wB9Wlfsd02oi0olPjvg",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
					},
					"response": []
				}
			]
		},
		{
			"name": "II(c) Direct Payment without saving card (card not registered)",
			"item": [
				{
					"name": "BO: Create Payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-feature",
								"value": "integ-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"p143@example.com\",\n    \"return_url\": \"https://google.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"preetam\",\n            \"last_name\": \"revankar\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 name\",\n            \"card_cvc\": \"737\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				},
				{
					"name": "BO: Payments retrieve",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id"
							],
							"query": [
								{
									"key": "client_secret",
									"value": "pay_1sIy7sTMzo8ibi00iOQB_secret_8wB9Wlfsd02oi0olPjvg",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
					},
					"response": []
				}
			]
		},
		{
			"name": "IV(c) Payment with Incremental pre-authorization (card registered)",
			"item": [
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.payment_token) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "BO: Customer books parking slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-feature",
								"value": "integ-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"p143@example.com\",\n    \"capture_method\": \"manual\",\n    \"setup_future_usage\": \"off_session\",\n    \"return_url\": \"https://google.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"preetam\",\n            \"last_name\": \"revankar\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Customer Clicks pay - Only Authorize",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// Response body should have \"customer_id\"",
									"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
									"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have a minimum length of \"1\" for \"customer_id\"",
									"if (jsonData?.customer_id) {",
									"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
									"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
									"})};",
									"",
									"",
									"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
									"if (jsonData?.customer_id) {",
									"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
									"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_token\": \"{{payment_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
					},
					"response": []
				},
				{
					"name": "BO: Incremental Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[POST]::/payments:id/incremental_authorizations - Content check if value for 'amount' matches '1300'\", function () {",
									"    // Parse the response JSON",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check if the 'amount' in the response matches the expected value",
									"    pm.expect(jsonData.incremental_authorizations[0].amount).to.eql(1300);",
									"});",
									"",
									"pm.test(\"[POST]::/payments:id/incremental_authorizations - Content check if value for 'status' matches 'success'\", function () {",
									"    // Parse the response JSON",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check if the 'status' in the response matches the expected value",
									"    pm.expect(jsonData.incremental_authorizations[0].status).to.eql(\"success\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/{{payment_id}}/incremental_authorization",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{payment_id}}",
								"incremental_authorization"
							]
						}
					},
					"response": []
				},
				{
					"name": "BO: Payments - Capture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments/:id/capture - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments/:id/capture - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]:://payments/:id/capture - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have value \"1300\" for \"amount\"",
									"if (jsonData?.amount){",
									"    pm.test(\"[post]:://payments/:id/capture - Content check if value for 'amount' matches '1300'\", function() {",
									"    pm.expect(jsonData.amount).to.eql(1300);",
									"    } )",
									"} ",
									"",
									"// Response body should have value \"1300\" for \"amount_received\"",
									"if (jsonData?.amount_received) {",
									"pm.test(\"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '1300'\", function() {",
									"  pm.expect(jsonData.amount_received).to.eql(1300);",
									"})};",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount_to_capture\":1300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/capture",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"capture"
							],
							"query": [
								{
									"key": "force_sync",
									"value": "true",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "To capture the funds for an uncaptured payment"
					},
					"response": []
				}
			]
		},
		{
			"name": "IV(d) Payment with Incremental pre-authorization (card not registered) Copy",
			"item": [
				{
					"name": "BO: Customer books parking slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							},
							{
								"key": "Authorization",
								"value": "",
								"type": "text",
								"disabled": true
							},
							{
								"key": "x-feature",
								"value": "integ-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"p143@example.com\",\n    \"capture_method\": \"manual\",\n    \"setup_future_usage\": \"off_session\",\n    \"return_url\": \"https://google.com\",\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"preetam\",\n            \"last_name\": \"revankar\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    },\n    \"shipping\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"PL\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"8056594427\",\n            \"country_code\": \"+91\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Customer clicks pay",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// Response body should have \"customer_id\"",
									"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
									"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have a minimum length of \"1\" for \"customer_id\"",
									"if (jsonData?.customer_id) {",
									"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
									"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
									"})};",
									"",
									"",
									"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
									"if (jsonData?.customer_id) {",
									"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
									"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n     \"confirm\": true,\n     \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4242424242424242\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 name\",\n            \"card_cvc\": \"737\"\n        }\n    },\n     \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
					},
					"response": []
				},
				{
					"name": "BO: Incremental Authorization",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"[POST]::/payments:id/incremental_authorizations - Content check if value for 'amount' matches '1300'\", function () {",
									"    // Parse the response JSON",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check if the 'amount' in the response matches the expected value",
									"    pm.expect(jsonData.incremental_authorizations[0].amount).to.eql(1300);",
									"});",
									"",
									"pm.test(\"[POST]::/payments:id/incremental_authorizations - Content check if value for 'status' matches 'success'\", function () {",
									"    // Parse the response JSON",
									"    var jsonData = pm.response.json();",
									"",
									"    // Check if the 'status' in the response matches the expected value",
									"    pm.expect(jsonData.incremental_authorizations[0].status).to.eql(\"success\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/{{payment_id}}/incremental_authorization",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"{{payment_id}}",
								"incremental_authorization"
							]
						}
					},
					"response": []
				},
				{
					"name": "BO: Payments - Capture",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments/:id/capture - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments/:id/capture - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments/:id/capture - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]:://payments/:id/capture - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have value \"1300\" for \"amount\"",
									"if (jsonData?.amount){",
									"    pm.test(\"[post]:://payments/:id/capture - Content check if value for 'amount' matches '1300'\", function() {",
									"    pm.expect(jsonData.amount).to.eql(1300);",
									"    } )",
									"} ",
									"",
									"// Response body should have value \"1300\" for \"amount_received\"",
									"if (jsonData?.amount_received) {",
									"pm.test(\"[POST]::/payments:id/capture - Content check if value for 'amount_received' matches '1300'\", function() {",
									"  pm.expect(jsonData.amount_received).to.eql(1300);",
									"})};",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"amount_to_capture\":1300\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/capture",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"capture"
							],
							"query": [
								{
									"key": "force_sync",
									"value": "true",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "To capture the funds for an uncaptured payment"
					},
					"response": []
				}
			]
		},
		{
			"name": "My account - Payment Method Actions",
			"item": [
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let payment_method_id = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.payment_method_id) {",
									"        payment_method_id = method.payment_method_id;",
									"        break;",
									"    }",
									"}",
									"if (payment_method_id) {",
									"   pm.collectionVariables.set(\"payment_method_id\", payment_method_id);",
									"   console.log(\"- use {{payment_method_id}} as collection variable for value\",payment_method_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_method_id}}, as payment_method_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "BO: Set a payment method as default",
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/customers/{{customer_id}}/payment_methods/:payment_method_id/default",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"{{customer_id}}",
								"payment_methods",
								":payment_method_id",
								"default"
							],
							"variable": [
								{
									"key": "payment_method_id",
									"value": "{{payment_method_id}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "BO: Delete PaymentMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payment_methods/:id/detach - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payment_methods/:id/detach - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/payment_methods/:payment_method_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payment_methods",
								":payment_method_id"
							],
							"variable": [
								{
									"key": "payment_method_id",
									"value": "{{payment_method_id}}"
								}
							]
						},
						"description": "Detaches a PaymentMethod object from a Customer."
					},
					"response": []
				}
			]
		},
		{
			"name": "Verify last_used_at update scenarios",
			"item": [
				{
					"name": "Save Google pay as off-session",
					"item": [
						{
							"name": "1) Save google pay as off_session",
							"item": [
								{
									"name": "BO: Create Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// Response body should have \"customer_id\"",
													"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
													"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have a minimum length of \"1\" for \"customer_id\"",
													"if (jsonData?.customer_id) {",
													"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
													"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
													"})};",
													"",
													"",
													"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"First customer\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/customers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers"
											]
										},
										"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
									},
									"response": []
								},
								{
									"name": "BO: Customer books parking slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Hyperswitch SDK: Payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{pub_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											},
											{
												"key": "publishable_key",
												"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_type\": \"new_mandate\",\n    \"payment_method\": \"wallet\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"online\",\n        \"accepted_at\": \"2024-07-02T08:16:30.415Z\",\n        \"online\": {\n            \"ip_address\": null,\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15\"\n        }\n    },\n    \"payment_method_type\": \"google_pay\",\n    \"payment_method_data\": {\n        \"wallet\": {{gpay_payload}},\n        \"billing\": {\n            \"address\": {\n                \"state\": \"California\",\n                \"first_name\": \"Card Holder\",\n                \"city\": \"Mountain View\",\n                \"country\": \"US\",\n                \"line1\": \"1600 Amphitheatre Parkway\",\n                \"zip\": \"94043\",\n                \"last_name\": \"Name\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"        pm.collectionVariables.set(\"last_used_at\", method.last_used_at);",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								}
							]
						},
						{
							"name": "2) Allow recurring with pm_method_id and only in S2S call",
							"item": [
								{
									"name": "BO: Customer books slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\":\"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"off_session\": true,\n    \"recurring_details\": {\n        \"type\": \"payment_method_id\",\n        \"data\": \"{{payment_method_id}}\"\n    },\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								}
							]
						},
						{
							"name": "3) Recurring with pm_data & CA",
							"item": [
								{
									"name": "BO: List all payment methods against a customer id Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"        pm.collectionVariables.set(\"last_used_at\", method.last_used_at);",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								},
								{
									"name": "BO: Customer books slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Hyperswitch SDK: Payments - Confirm with default payment method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'payment_method_id' exists\", function() {",
													"   pm.expect(jsonData.payment_method_id).to.be.not.undefined;",
													"   pm.expect(jsonData.payment_method_id).to.be.not.null;",
													"   pm.expect(jsonData.payment_method_id).to.be.equal(pm.collectionVariables.get('payment_method_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{pub_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											},
											{
												"key": "publishable_key",
												"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_type\": \"recurring_mandate\",\n    \"payment_method\": \"wallet\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"online\",\n        \"accepted_at\": \"2024-07-02T08:16:30.415Z\",\n        \"online\": {\n            \"ip_address\": null,\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15\"\n        }\n    },\n    \"payment_method_type\": \"google_pay\",\n    \"payment_method_data\": {\n        \"wallet\": {\n            \"google_pay\": {\n                \"type\": \"CARD\",\n                \"description\": \"Mastercard •••• 2268\",\n                \"info\": {\n                    \"assurance_details\": {\n                        \"account_verified\": true,\n                        \"card_holder_authenticated\": false\n                    },\n                    \"billing_address\": {\n                        \"address1\": \"1600 Amphitheatre Parkway\",\n                        \"address2\": \"\",\n                        \"address3\": \"\",\n                        \"administrative_area\": \"CA\",\n                        \"country_code\": \"US\",\n                        \"locality\": \"Mountain View\",\n                        \"name\": \"Card Holder Name\",\n                        \"phone_number\": \"6505555555\",\n                        \"postal_code\": \"94043\",\n                        \"sorting_code\": \"\"\n                    },\n                    \"card_details\": \"2268\",\n                    \"card_network\": \"MASTERCARD\"\n                },\n                \"tokenization_data\": {\n                    \"token\": \"{\\\"signature\\\":\\\"MEQCIGX33K7nrepi2niLJJxF3us1BGMQ/5COQ9XYjc0NH4llAiBKISAmxE2zaAnzU/Iqz0Dx9/s+NIOdAzuFC6G4JnfdxA\\\\u003d\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"UQxZH65ZoTWGcFq/Z3RShVvg66/h3UWFTNGkXBP4vX+jaY9/0BuzI1pQNZ/5tLq4QcKbSbIUvSYbGTKj9YAprt3IfFxJfDi02tTx0rJyWYAwnLgT+hhdM8b6sgrDUSOptmKif8ziMe0+G6KWkaDoGDSZiqd/AbKPhYnL9HqVVDlJTVgaWYtAXX8YvfF09eftcVx688f5nG4SL7EAgWvm8U6eBuujxz05CyWOvhPFk0uhE/yTpKyjMSBaB6HI5CJ1UBFIxy38p305z8cvefpI9gZV/T8ReMuvndodcyTTts2L2fgDnQyV/HC1cXCXGysh6Nb4uXxTJxSm/RR/kzPNlzRZU6W70CKZIhiNqy8yQiKhJdIhjPs5tmNjUbloFir9z79p1T7bXmUHxcTHvZmTnwO6wIdOfgqTYG4mhGwOFWw\\\\\\\\u003d\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BGVPjYnIC5Ylyipebj7adxtU4dJD/qOO7MDa1JkJBgn8gUXMk8o1dwGx77nwGIhKITRJ4xLVat5Aac4iZO7uOhQ\\\\\\\\u003d\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"jMxWUvS08OtmhIcqlV/PgpyGgm3iuuF2qRwbRmKgwVg\\\\\\\\u003d\\\\\\\"}\\\"}\",\n                    \"type\": \"PAYMENT_GATEWAY\"\n                }\n            }\n        },\n        \"billing\": {\n            \"address\": {\n                \"state\": \"California\",\n                \"first_name\": \"Card Holder\",\n                \"city\": \"Mountain View\",\n                \"country\": \"US\",\n                \"line1\": \"1600 Amphitheatre Parkway\",\n                \"zip\": \"94043\",\n                \"last_name\": \"Name\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"// Set response object as internal variable",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"",
													"        // Validate if response matches JSON schema ",
													"        pm.test(\"should check if last_used is updated\", function() {",
													"            let prev_last_used_at = new Date(pm.collectionVariables.get(\"last_used_at\"));",
													"            let curr_last_used_at = new Date(method.last_used_at);",
													"            console.log(prev_last_used_at);",
													"            console.log(curr_last_used_at);",
													"            pm.expect(curr_last_used_at).above(prev_last_used_at);",
													"        });",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								}
							]
						},
						{
							"name": "4) Recurring with pm_data & without CA",
							"item": [
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"        pm.collectionVariables.set(\"last_used_at\", method.last_used_at);",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								},
								{
									"name": "BO: Customer books slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Hyperswitch SDK: Payments - Confirm with default payment method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'payment_method_id' exists\", function() {",
													"   pm.expect(jsonData.payment_method_id).to.be.not.undefined;",
													"   pm.expect(jsonData.payment_method_id).to.be.not.null;",
													"   pm.expect(jsonData.payment_method_id).to.be.equal(pm.collectionVariables.get('payment_method_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{pub_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											},
											{
												"key": "publishable_key",
												"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_type\": \"recurring_mandate\",\n    \"payment_method\": \"wallet\",\n   \"payment_method_type\": \"google_pay\",\n    \"payment_method_data\": {\n        \"wallet\": {\n            \"google_pay\": {\n                \"type\": \"CARD\",\n                \"description\": \"Mastercard •••• 2268\",\n                \"info\": {\n                    \"assurance_details\": {\n                        \"account_verified\": true,\n                        \"card_holder_authenticated\": false\n                    },\n                    \"billing_address\": {\n                        \"address1\": \"1600 Amphitheatre Parkway\",\n                        \"address2\": \"\",\n                        \"address3\": \"\",\n                        \"administrative_area\": \"CA\",\n                        \"country_code\": \"US\",\n                        \"locality\": \"Mountain View\",\n                        \"name\": \"Card Holder Name\",\n                        \"phone_number\": \"6505555555\",\n                        \"postal_code\": \"94043\",\n                        \"sorting_code\": \"\"\n                    },\n                    \"card_details\": \"2268\",\n                    \"card_network\": \"MASTERCARD\"\n                },\n                \"tokenization_data\": {\n                    \"token\": \"{\\\"signature\\\":\\\"MEQCIGX33K7nrepi2niLJJxF3us1BGMQ/5COQ9XYjc0NH4llAiBKISAmxE2zaAnzU/Iqz0Dx9/s+NIOdAzuFC6G4JnfdxA\\\\u003d\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"UQxZH65ZoTWGcFq/Z3RShVvg66/h3UWFTNGkXBP4vX+jaY9/0BuzI1pQNZ/5tLq4QcKbSbIUvSYbGTKj9YAprt3IfFxJfDi02tTx0rJyWYAwnLgT+hhdM8b6sgrDUSOptmKif8ziMe0+G6KWkaDoGDSZiqd/AbKPhYnL9HqVVDlJTVgaWYtAXX8YvfF09eftcVx688f5nG4SL7EAgWvm8U6eBuujxz05CyWOvhPFk0uhE/yTpKyjMSBaB6HI5CJ1UBFIxy38p305z8cvefpI9gZV/T8ReMuvndodcyTTts2L2fgDnQyV/HC1cXCXGysh6Nb4uXxTJxSm/RR/kzPNlzRZU6W70CKZIhiNqy8yQiKhJdIhjPs5tmNjUbloFir9z79p1T7bXmUHxcTHvZmTnwO6wIdOfgqTYG4mhGwOFWw\\\\\\\\u003d\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BGVPjYnIC5Ylyipebj7adxtU4dJD/qOO7MDa1JkJBgn8gUXMk8o1dwGx77nwGIhKITRJ4xLVat5Aac4iZO7uOhQ\\\\\\\\u003d\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"jMxWUvS08OtmhIcqlV/PgpyGgm3iuuF2qRwbRmKgwVg\\\\\\\\u003d\\\\\\\"}\\\"}\",\n                    \"type\": \"PAYMENT_GATEWAY\"\n                }\n            }\n        },\n        \"billing\": {\n            \"address\": {\n                \"state\": \"California\",\n                \"first_name\": \"Card Holder\",\n                \"city\": \"Mountain View\",\n                \"country\": \"US\",\n                \"line1\": \"1600 Amphitheatre Parkway\",\n                \"zip\": \"94043\",\n                \"last_name\": \"Name\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"// Set response object as internal variable",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"",
													"        // Validate if response matches JSON schema ",
													"        pm.test(\"should check if last_used is updated\", function() {",
													"            let prev_last_used_at = new Date(pm.collectionVariables.get(\"last_used_at\"));",
													"            let curr_last_used_at = new Date(method.last_used_at);",
													"            pm.expect(curr_last_used_at).above(prev_last_used_at);",
													"        });",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Save Google pay as on-session",
					"item": [
						{
							"name": "1) Save google pay as on_session",
							"item": [
								{
									"name": "BO: Create Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// Response body should have \"customer_id\"",
													"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
													"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have a minimum length of \"1\" for \"customer_id\"",
													"if (jsonData?.customer_id) {",
													"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
													"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
													"})};",
													"",
													"",
													"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
													"if (jsonData?.customer_id) {",
													"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
													"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
													"};",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"First customer\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/customers",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers"
											]
										},
										"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
									},
									"response": []
								},
								{
									"name": "skip_saving_wallet_at_connector",
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "test_admin",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "api-key",
												"value": "test_admin"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"key\": \"skip_saving_wallet_at_connector_{{merchant_id}}\",\n    \"value\": \"[\\\"google_pay\\\"]\"\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/configs/",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"configs",
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "BO: Customer books parking slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Hyperswitch SDK: Payments - Confirm",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{pub_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											},
											{
												"key": "publishable_key",
												"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_type\": \"new_mandate\",\n    \"payment_method\": \"wallet\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"online\",\n        \"accepted_at\": \"2024-07-02T08:16:30.415Z\",\n        \"online\": {\n            \"ip_address\": null,\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15\"\n        }\n    },\n    \"payment_method_type\": \"google_pay\",\n    \"payment_method_data\": {\n        \"wallet\": {\n            \"google_pay\": {\n                \"type\": \"CARD\",\n                \"description\": \"Mastercard •••• 2268\",\n                \"info\": {\n                    \"assurance_details\": {\n                        \"account_verified\": true,\n                        \"card_holder_authenticated\": false\n                    },\n                    \"billing_address\": {\n                        \"address1\": \"1600 Amphitheatre Parkway\",\n                        \"address2\": \"\",\n                        \"address3\": \"\",\n                        \"administrative_area\": \"CA\",\n                        \"country_code\": \"US\",\n                        \"locality\": \"Mountain View\",\n                        \"name\": \"Card Holder Name\",\n                        \"phone_number\": \"6505555555\",\n                        \"postal_code\": \"94043\",\n                        \"sorting_code\": \"\"\n                    },\n                    \"card_details\": \"2268\",\n                    \"card_network\": \"MASTERCARD\"\n                },\n                \"tokenization_data\": {\n                    \"token\": \"{\\\"signature\\\":\\\"MEQCIGX33K7nrepi2niLJJxF3us1BGMQ/5COQ9XYjc0NH4llAiBKISAmxE2zaAnzU/Iqz0Dx9/s+NIOdAzuFC6G4JnfdxA\\\\u003d\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"UQxZH65ZoTWGcFq/Z3RShVvg66/h3UWFTNGkXBP4vX+jaY9/0BuzI1pQNZ/5tLq4QcKbSbIUvSYbGTKj9YAprt3IfFxJfDi02tTx0rJyWYAwnLgT+hhdM8b6sgrDUSOptmKif8ziMe0+G6KWkaDoGDSZiqd/AbKPhYnL9HqVVDlJTVgaWYtAXX8YvfF09eftcVx688f5nG4SL7EAgWvm8U6eBuujxz05CyWOvhPFk0uhE/yTpKyjMSBaB6HI5CJ1UBFIxy38p305z8cvefpI9gZV/T8ReMuvndodcyTTts2L2fgDnQyV/HC1cXCXGysh6Nb4uXxTJxSm/RR/kzPNlzRZU6W70CKZIhiNqy8yQiKhJdIhjPs5tmNjUbloFir9z79p1T7bXmUHxcTHvZmTnwO6wIdOfgqTYG4mhGwOFWw\\\\\\\\u003d\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BGVPjYnIC5Ylyipebj7adxtU4dJD/qOO7MDa1JkJBgn8gUXMk8o1dwGx77nwGIhKITRJ4xLVat5Aac4iZO7uOhQ\\\\\\\\u003d\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"jMxWUvS08OtmhIcqlV/PgpyGgm3iuuF2qRwbRmKgwVg\\\\\\\\u003d\\\\\\\"}\\\"}\",\n                    \"type\": \"PAYMENT_GATEWAY\"\n                }\n            }\n        },\n        \"billing\": {\n            \"address\": {\n                \"state\": \"California\",\n                \"first_name\": \"Card Holder\",\n                \"city\": \"Mountain View\",\n                \"country\": \"US\",\n                \"line1\": \"1600 Amphitheatre Parkway\",\n                \"zip\": \"94043\",\n                \"last_name\": \"Name\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"        pm.collectionVariables.set(\"last_used_at\", method.last_used_at);",
													"",
													"        pm.test(\"Google pay should be saved only at our side not with connector\", function () {",
													"            pm.expect(method.recurring_enabled).to.be.false;",
													"        });",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								}
							]
						},
						{
							"name": "2) Do not allow recurring with pm_method_id and only in S2S call",
							"item": [
								{
									"name": "BO: Customer books slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.error;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"pm.test(\"Check error status\", function () {",
													"    pm.expect(jsonData?.error?.message).to.be.equal(\"No eligible connector was found for the current payment method configuration\");",
													"    ",
													"})",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"off_session\": true,\n    \"recurring_details\": {\n        \"type\": \"payment_method_id\",\n        \"data\": \"{{payment_method_id}}\"\n    },\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								}
							]
						},
						{
							"name": "3) Recurring with pm_data & CA",
							"item": [
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"        pm.collectionVariables.set(\"last_used_at\", method.last_used_at);",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								},
								{
									"name": "BO: Customer books slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Hyperswitch SDK: Payments - Confirm with default payment method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'payment_method_id' exists\", function() {",
													"   pm.expect(jsonData.payment_method_id).to.be.not.undefined;",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{pub_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											},
											{
												"key": "publishable_key",
												"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_type\": \"recurring_mandate\",\n    \"payment_method\": \"wallet\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"online\",\n        \"accepted_at\": \"2024-07-02T08:16:30.415Z\",\n        \"online\": {\n            \"ip_address\": null,\n            \"user_agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/17.5 Safari/605.1.15\"\n        }\n    },\n    \"payment_method_type\": \"google_pay\",\n    \"payment_method_data\": {\n        \"wallet\": {\n            \"google_pay\": {\n                \"type\": \"CARD\",\n                \"description\": \"Mastercard •••• 2268\",\n                \"info\": {\n                    \"assurance_details\": {\n                        \"account_verified\": true,\n                        \"card_holder_authenticated\": false\n                    },\n                    \"billing_address\": {\n                        \"address1\": \"1600 Amphitheatre Parkway\",\n                        \"address2\": \"\",\n                        \"address3\": \"\",\n                        \"administrative_area\": \"CA\",\n                        \"country_code\": \"US\",\n                        \"locality\": \"Mountain View\",\n                        \"name\": \"Card Holder Name\",\n                        \"phone_number\": \"6505555555\",\n                        \"postal_code\": \"94043\",\n                        \"sorting_code\": \"\"\n                    },\n                    \"card_details\": \"2268\",\n                    \"card_network\": \"MASTERCARD\"\n                },\n                \"tokenization_data\": {\n                    \"token\": \"{\\\"signature\\\":\\\"MEQCIGX33K7nrepi2niLJJxF3us1BGMQ/5COQ9XYjc0NH4llAiBKISAmxE2zaAnzU/Iqz0Dx9/s+NIOdAzuFC6G4JnfdxA\\\\u003d\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"UQxZH65ZoTWGcFq/Z3RShVvg66/h3UWFTNGkXBP4vX+jaY9/0BuzI1pQNZ/5tLq4QcKbSbIUvSYbGTKj9YAprt3IfFxJfDi02tTx0rJyWYAwnLgT+hhdM8b6sgrDUSOptmKif8ziMe0+G6KWkaDoGDSZiqd/AbKPhYnL9HqVVDlJTVgaWYtAXX8YvfF09eftcVx688f5nG4SL7EAgWvm8U6eBuujxz05CyWOvhPFk0uhE/yTpKyjMSBaB6HI5CJ1UBFIxy38p305z8cvefpI9gZV/T8ReMuvndodcyTTts2L2fgDnQyV/HC1cXCXGysh6Nb4uXxTJxSm/RR/kzPNlzRZU6W70CKZIhiNqy8yQiKhJdIhjPs5tmNjUbloFir9z79p1T7bXmUHxcTHvZmTnwO6wIdOfgqTYG4mhGwOFWw\\\\\\\\u003d\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BGVPjYnIC5Ylyipebj7adxtU4dJD/qOO7MDa1JkJBgn8gUXMk8o1dwGx77nwGIhKITRJ4xLVat5Aac4iZO7uOhQ\\\\\\\\u003d\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"jMxWUvS08OtmhIcqlV/PgpyGgm3iuuF2qRwbRmKgwVg\\\\\\\\u003d\\\\\\\"}\\\"}\",\n                    \"type\": \"PAYMENT_GATEWAY\"\n                }\n            }\n        },\n        \"billing\": {\n            \"address\": {\n                \"state\": \"California\",\n                \"first_name\": \"Card Holder\",\n                \"city\": \"Mountain View\",\n                \"country\": \"US\",\n                \"line1\": \"1600 Amphitheatre Parkway\",\n                \"zip\": \"94043\",\n                \"last_name\": \"Name\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"// Set response object as internal variable",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"",
													"        // Validate if response matches JSON schema ",
													"        pm.test(\"should check if last_used is updated\", function() {",
													"            let prev_last_used_at = new Date(pm.collectionVariables.get(\"last_used_at\"));",
													"            let curr_last_used_at = new Date(method.last_used_at);",
													"            console.log(prev_last_used_at);",
													"            console.log(curr_last_used_at);",
													"            pm.expect(curr_last_used_at).above(prev_last_used_at);",
													"        });",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								}
							]
						},
						{
							"name": "4) Recurring with pm_data & without CA",
							"item": [
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"        pm.collectionVariables.set(\"last_used_at\", method.last_used_at);",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								},
								{
									"name": "BO: Customer books slot",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"",
													"// Response body should have value \"requires_payment_method\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments"
											]
										},
										"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
									},
									"response": []
								},
								{
									"name": "Hyperswitch SDK: Payments - Confirm with default payment method",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
													"if (jsonData?.payment_id) {",
													"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
													"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
													"};",
													"",
													"",
													"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
													"if (jsonData?.mandate_id) {",
													"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
													"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
													"};",
													"",
													"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
													"if (jsonData?.client_secret) {",
													"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
													"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
													"};",
													"",
													"// Response body should have value \"succeeded\" for \"status\"",
													"if (jsonData?.status) {",
													"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
													"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
													"})};",
													"",
													"// Response body should have \"mandate_id\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
													"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
													"});",
													"",
													"// Response body should have \"mandate_data\"",
													"pm.test(\"[POST]::/payments - Content check if 'payment_method_id' exists\", function() {",
													"   pm.expect(jsonData.payment_method_id).to.be.not.undefined;",
													"   pm.expect(jsonData.payment_method_id).to.be.not.null;",
													"   pm.expect(jsonData.payment_method_id).to.be.equal(pm.collectionVariables.get('payment_method_id'));",
													"});",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{pub_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											},
											{
												"key": "publishable_key",
												"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
												"type": "text",
												"disabled": true
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_type\": \"recurring_mandate\",\n    \"payment_method\": \"wallet\",\n   \"payment_method_type\": \"google_pay\",\n    \"payment_method_data\": {\n        \"wallet\": {\n            \"google_pay\": {\n                \"type\": \"CARD\",\n                \"description\": \"Mastercard •••• 2268\",\n                \"info\": {\n                    \"assurance_details\": {\n                        \"account_verified\": true,\n                        \"card_holder_authenticated\": false\n                    },\n                    \"billing_address\": {\n                        \"address1\": \"1600 Amphitheatre Parkway\",\n                        \"address2\": \"\",\n                        \"address3\": \"\",\n                        \"administrative_area\": \"CA\",\n                        \"country_code\": \"US\",\n                        \"locality\": \"Mountain View\",\n                        \"name\": \"Card Holder Name\",\n                        \"phone_number\": \"6505555555\",\n                        \"postal_code\": \"94043\",\n                        \"sorting_code\": \"\"\n                    },\n                    \"card_details\": \"2268\",\n                    \"card_network\": \"MASTERCARD\"\n                },\n                \"tokenization_data\": {\n                    \"token\": \"{\\\"signature\\\":\\\"MEQCIGX33K7nrepi2niLJJxF3us1BGMQ/5COQ9XYjc0NH4llAiBKISAmxE2zaAnzU/Iqz0Dx9/s+NIOdAzuFC6G4JnfdxA\\\\u003d\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"UQxZH65ZoTWGcFq/Z3RShVvg66/h3UWFTNGkXBP4vX+jaY9/0BuzI1pQNZ/5tLq4QcKbSbIUvSYbGTKj9YAprt3IfFxJfDi02tTx0rJyWYAwnLgT+hhdM8b6sgrDUSOptmKif8ziMe0+G6KWkaDoGDSZiqd/AbKPhYnL9HqVVDlJTVgaWYtAXX8YvfF09eftcVx688f5nG4SL7EAgWvm8U6eBuujxz05CyWOvhPFk0uhE/yTpKyjMSBaB6HI5CJ1UBFIxy38p305z8cvefpI9gZV/T8ReMuvndodcyTTts2L2fgDnQyV/HC1cXCXGysh6Nb4uXxTJxSm/RR/kzPNlzRZU6W70CKZIhiNqy8yQiKhJdIhjPs5tmNjUbloFir9z79p1T7bXmUHxcTHvZmTnwO6wIdOfgqTYG4mhGwOFWw\\\\\\\\u003d\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BGVPjYnIC5Ylyipebj7adxtU4dJD/qOO7MDa1JkJBgn8gUXMk8o1dwGx77nwGIhKITRJ4xLVat5Aac4iZO7uOhQ\\\\\\\\u003d\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"jMxWUvS08OtmhIcqlV/PgpyGgm3iuuF2qRwbRmKgwVg\\\\\\\\u003d\\\\\\\"}\\\"}\",\n                    \"type\": \"PAYMENT_GATEWAY\"\n                }\n            }\n        },\n        \"billing\": {\n            \"address\": {\n                \"state\": \"California\",\n                \"first_name\": \"Card Holder\",\n                \"city\": \"Mountain View\",\n                \"country\": \"US\",\n                \"line1\": \"1600 Amphitheatre Parkway\",\n                \"zip\": \"94043\",\n                \"last_name\": \"Name\"\n            }\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/payments/:id/confirm",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"payments",
												":id",
												"confirm"
											],
											"variable": [
												{
													"key": "id",
													"value": "{{payment_id}}"
												}
											]
										},
										"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
									},
									"response": []
								},
								{
									"name": "BO: List all payment methods against a customer id",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"// Validate status 2xx ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Status code is 2xx\", function () {",
													"   pm.response.to.be.success;",
													"});",
													"",
													"// Validate if response header has matching content-type",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Content-Type is application/json\", function () {",
													"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
													"});",
													"",
													"// Validate if response has JSON Body ",
													"pm.test(\"[GET]::/customers/:customer_id/payment_methods - Response has JSON Body\", function () {",
													"    pm.response.to.have.jsonBody();",
													"});",
													"",
													"// Response Validation",
													"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
													"",
													"",
													"// Set response object as internal variable",
													"",
													"// Set response object as internal variable",
													"let jsonData = {};",
													"try {jsonData = pm.response.json();}catch(e){}",
													"",
													"let paymentToken = null;",
													"",
													"for (let method of jsonData.customer_payment_methods) {",
													"    if (method.payment_method_type === \"google_pay\") {",
													"        paymentToken = method.payment_token;",
													"        pm.collectionVariables.set(\"payment_method_id\", method.payment_method_id);",
													"",
													"",
													"        pm.test(\"should check if last_used is updated\", function() {",
													"            let prev_last_used_at = new Date(pm.collectionVariables.get(\"last_used_at\"));",
													"            let curr_last_used_at = new Date(method.last_used_at);",
													"            pm.expect(curr_last_used_at).above(prev_last_used_at);",
													"        });",
													"        break;",
													"    }",
													"}",
													"if (paymentToken) {",
													"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
													"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
													"} else {",
													"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
													"};",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "apikey",
											"apikey": [
												{
													"key": "value",
													"value": "{{api_key}}",
													"type": "string"
												},
												{
													"key": "key",
													"value": "api-key",
													"type": "string"
												},
												{
													"key": "in",
													"value": "header",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "application/json"
											},
											{
												"key": "x-feature",
												"value": "router-custom-be",
												"type": "text",
												"disabled": true
											}
										],
										"url": {
											"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"customers",
												":customer_id",
												"payment_methods"
											],
											"variable": [
												{
													"key": "customer_id",
													"value": "{{customer_id}}",
													"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
												}
											]
										},
										"description": "To list the all the mandates for a customer"
									},
									"response": []
								}
							]
						},
						{
							"name": "skip_saving_wallet_at_connector",
							"request": {
								"auth": {
									"type": "apikey",
									"apikey": [
										{
											"key": "value",
											"value": "test_admin",
											"type": "string"
										},
										{
											"key": "key",
											"value": "api-key",
											"type": "string"
										},
										{
											"key": "in",
											"value": "header",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "api-key",
										"value": "test_admin"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"value\": \"[]\"\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/configs/skip_saving_wallet_at_connector_{{merchant_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"configs",
										"skip_saving_wallet_at_connector_{{merchant_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Payment methods migration",
			"item": [
				{
					"name": "bulk migration",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{admin_api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "api-key",
								"value": "test_admin"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "/Users/jagan.elavarasan/Downloads/sample.csv"
								},
								{
									"key": "merchant_id",
									"value": "{{merchant_id}}",
									"type": "text",
									"disabled": true
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/payment_methods/migrate-batch",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payment_methods",
								"migrate-batch"
							]
						}
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData?.customer_payment_methods) {",
									"    if (method.default_payment_method_set) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "edca1edee0e411ec961c506b8dc695e7",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "enable_token_sharing",
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{admin_api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "api-key",
								"value": "G&aPZ!Zp%2uK*4zV3B#4moMc&q*haGv9i#GCm*o3vcLz@Tgbbmxh6SA^ZimBvxZU"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"is_connector_agnostic_mit_enabled\": true\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/account/{{merchant_id}}/business_profile/{{profile_id}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"account",
								"{{merchant_id}}",
								"business_profile",
								"{{profile_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Filter customer payment methods based on merchant configs",
			"item": [
				{
					"name": "BO: Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// Response body should have \"customer_id\"",
									"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
									"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have a minimum length of \"1\" for \"customer_id\"",
									"if (jsonData?.customer_id) {",
									"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
									"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
									"})};",
									"",
									"",
									"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
									"if (jsonData?.customer_id) {",
									"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
									"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"First customer\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
					},
					"response": []
				},
				{
					"name": "BO: Customer books parking slot in City 1 with connector agnostic MIT disabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'payment_method_data' exists\", function() {",
									"   pm.expect((typeof jsonData.payment_method_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 dffdg\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"payment_type\": \"new_mandate\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.default_payment_method_set) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"Should have atleast one payment method\", function() {",
									"   pm.expect(jsonData.customer_payment_methods.length).to.be.greaterThan(0);",
									"   pm.expect(jsonData.is_guest_customer).to.be.eql(false); //we have null here when using API key but for client_secret we are getting it as false",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id/payment_methods",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id",
								"payment_methods"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}",
									"description": "(Required) Unique customer id for which the list of mandates to be retrieved."
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "BO: Customer books parking slot in City 2 with connector agnostic MIT enabled",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{camit_enabled_profile}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.payment_token) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};",
									"",
									"pm.test(\"Should have zero payment method even though customer has payment methods\", function() {",
									"   pm.expect(jsonData.customer_payment_methods.length).to.be.eql(0);",
									"   pm.expect(jsonData.is_guest_customer).to.be.eql(false);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/payment_methods?client_secret={{client_secret}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"payment_methods"
							],
							"query": [
								{
									"key": "client_secret",
									"value": "{{client_secret}}"
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				}
			]
		},
		{
			"name": "Check if the session call working as expected",
			"item": [
				{
					"name": "BO: Customer books parking slot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "Check the merchant account payment methods",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try { jsonData = pm.response.json(); } catch (e) { }",
									"pm.test(\"Test required fields for cybersource apple pay\", function () {",
									"    let wallet = jsonData.payment_methods.filter((pm) => pm.payment_method == \"wallet\")[0];",
									"    let wallet_pm = wallet.payment_method_types.filter((pmt) => pmt.payment_method_type == \"apple_pay\")[0];",
									"    pm.expect(wallet_pm.payment_experience[0].payment_experience_type).to.equal(\"invoke_sdk_client\");",
									"    let wallet_req_key_fields = Object.keys(wallet_pm.required_fields);",
									"",
									"    pm.expect(wallet_req_key_fields).to.include.members(['billing.address.zip', 'billing.address.state', 'billing.address.country', 'billing.address.last_name', 'billing.address.city', 'billing.address.line1', 'billing.address.first_name', 'billing.email']);",
									"    let wallet_req_api_fields = Object.values(wallet_pm.required_fields).map(a => a.required_field);",
									"",
									"    pm.expect(wallet_req_api_fields).to.include.members(['payment_method_data.billing.address.zip', 'payment_method_data.billing.address.state', 'payment_method_data.billing.address.country', 'payment_method_data.billing.address.last_name', 'payment_method_data.billing.address.city', 'payment_method_data.billing.address.line1', 'payment_method_data.billing.address.first_name', 'payment_method_data.billing.email']);",
									"    let wallet_req_field_types = Object.values(wallet_pm.required_fields).map(a => a.field_type);",
									"    pm.expect(wallet_req_field_types).to.include.members(",
									"        ['user_address_line1', 'user_phone_number_country_code', 'user_phone_number', 'user_email_address', 'user_address_pincode', 'user_billing_name', 'user_address_city', 'user_billing_name', 'user_address_state', 'user_address_line2']);",
									"    pm.expect(jsonData.collect_billing_details_from_wallets).to.be.true;",
									"});",
									"",
									"pm.test(\"Test required fields for cybersource gpay\", function () {",
									"    let wallet = jsonData.payment_methods.filter((pm) => pm.payment_method == \"wallet\")[0];",
									"    let wallet_pm = wallet.payment_method_types.filter((pmt) => pmt.payment_method_type == \"google_pay\")[0];",
									"    pm.expect(wallet_pm.payment_experience[0].payment_experience_type).to.equal(\"invoke_sdk_client\");",
									"    let wallet_req_key_fields = Object.keys(wallet_pm.required_fields);",
									"",
									"    pm.expect(wallet_req_key_fields).to.include.members(['billing.address.first_name', 'billing.address.state', 'billing.phone.country_code', 'billing.address.city', 'billing.address.zip', 'billing.address.country', 'billing.address.line1', 'billing.address.last_name', 'billing.address.line2', 'billing.email', 'billing.phone.number']);",
									"    let wallet_req_api_fields = Object.values(wallet_pm.required_fields).map(a => a.required_field);",
									"",
									"    pm.expect(wallet_req_api_fields).to.include.members(['payment_method_data.billing.address.first_name', 'payment_method_data.billing.address.state', 'payment_method_data.billing.phone.country_code', 'payment_method_data.billing.address.city', 'payment_method_data.billing.address.zip', 'payment_method_data.billing.address.country', 'payment_method_data.billing.address.line1', 'payment_method_data.billing.address.last_name', 'payment_method_data.billing.address.line2', 'payment_method_data.billing.email', 'payment_method_data.billing.phone.number']);",
									"    let wallet_req_field_types = Object.values(wallet_pm.required_fields).map(a => a.field_type);",
									"    pm.expect(wallet_req_field_types).to.include.members(",
									"        ['user_billing_name', 'user_address_state', 'user_phone_number_country_code', 'user_address_city', 'user_address_pincode', 'user_address_line1', 'user_billing_name', 'user_address_line2', 'user_email_address', 'user_phone_number']);",
									"    pm.expect(jsonData.collect_billing_details_from_wallets).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "api-key",
								"value": "pk_snd_4c986c1a9a5b4dc995210efba787badc"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "priority",
								"value": "u=1, i"
							},
							{
								"key": "sec-ch-ua",
								"value": "\"Not)A;Brand\";v=\"99\", \"Google Chrome\";v=\"127\", \"Chromium\";v=\"127\""
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-browser-name",
								"value": "Chrome"
							},
							{
								"key": "x-browser-version",
								"value": "127.0.0"
							},
							{
								"key": "x-client-platform",
								"value": "web"
							},
							{
								"key": "x-client-version",
								"value": "0.91.7"
							},
							{
								"key": "x-payment-confirm-source",
								"value": "sdk"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/account/payment_methods?client_secret={{client_secret}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"account",
								"payment_methods"
							],
							"query": [
								{
									"key": "client_secret",
									"value": "{{client_secret}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Check session_tokens in Chrome Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = {};",
									"try { jsonData = pm.response.json(); } catch (e) { }",
									"pm.test(\"Test required fields for cybersource google_pay\", function () {",
									"    // pm.expect(jsonData.session_token.length).to.eql(2);",
									"    let gpay = jsonData.session_token[0];",
									"    pm.expect(gpay.wallet_name).to.eql('google_pay');",
									"    pm.expect(gpay.merchant_info.merchant_id.length).to.gt(0);",
									"    pm.expect(gpay.merchant_info.merchant_name.length).to.gt(0);",
									"    pm.expect(gpay.email_required).to.eql(true);",
									"    let pms = gpay.allowed_payment_methods[0];",
									"    pm.expect(pms.parameters.billing_address_required).to.eql(true);",
									"    pm.expect(pms.parameters.billing_address_parameters.phone_number_required).to.eql(true);",
									"    pm.expect(pms.parameters.billing_address_parameters.format).to.eql(\"FULL\");",
									"    let tokenization_spec = pms.tokenization_specification;",
									"    pm.expect(tokenization_spec.type).to.eql(\"PAYMENT_GATEWAY\");",
									"    pm.expect(tokenization_spec.parameters.gateway.length).to.gt(0);",
									"    pm.expect(tokenization_spec.parameters.gateway_merchant_id.length).to.gt(0);",
									"    ",
									"    pm.expect(gpay.transaction_info.country_code).to.eql(\"US\");",
									"    pm.expect(gpay.transaction_info.currency_code).to.eql(\"USD\");",
									"    pm.expect(gpay.transaction_info.total_price_status).to.eql(\"Final\");",
									"    pm.expect(gpay.transaction_info.total_price).to.eql(\"10.00\");",
									"});",
									"",
									"pm.test(\"Test required fields for cybersource apple_pay\", function () {",
									"    // pm.expect(jsonData.session_token.length).to.eql(2);",
									"    let apay = jsonData.session_token[1];",
									"    pm.expect(apay.wallet_name).to.eql('apple_pay');",
									"    pm.expect(apay.payment_request_data.country_code).to.eql('US');",
									"    pm.expect(apay.payment_request_data.currency_code).to.eql('USD');",
									"    pm.expect(apay.payment_request_data.total.label).to.not.undefined;",
									"    pm.expect(apay.payment_request_data.total.type).to.eql('final');",
									"    pm.expect(apay.payment_request_data.total.amount).to.eql('10.00');",
									"    pm.expect(apay.payment_request_data.required_billing_contact_fields).to.eql(['postalAddress']);",
									"    pm.expect(apay.payment_request_data.required_shipping_contact_fields).to.eql([\"phone\",\"email\"]);",
									"    pm.expect(apay.sdk_next_action.next_action).to.eql('confirm')",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "api-key",
								"value": "pk_snd_4c986c1a9a5b4dc995210efba787badc"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-browser-name",
								"value": "Chrome"
							},
							{
								"key": "x-browser-version",
								"value": "127.0.0"
							},
							{
								"key": "x-client-platform",
								"value": "web"
							},
							{
								"key": "x-client-version",
								"value": "0.91.7"
							},
							{
								"key": "x-merchant-domain",
								"value": "www-newtis.mobile.flowbirdapp.com"
							},
							{
								"key": "x-payment-confirm-source",
								"value": "sdk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_id\": \"{{payment_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"wallets\": [],\n    \"delayed_session_token\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/session_tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"session_tokens"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check session_tokens in Safari Browser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = {};",
									"try { jsonData = pm.response.json(); } catch (e) { }",
									"pm.test(\"Test required fields for cybersource google_pay\", function () {",
									"    // pm.expect(jsonData.session_token.length).to.eql(2);",
									"    let gpay = jsonData.session_token[0];",
									"    pm.expect(gpay.wallet_name).to.eql('google_pay');",
									"    pm.expect(gpay.merchant_info.merchant_id.length).to.gt(0);",
									"    pm.expect(gpay.merchant_info.merchant_name.length).to.gt(0);",
									"    pm.expect(gpay.email_required).to.eql(true);",
									"    let pms = gpay.allowed_payment_methods[0];",
									"    pm.expect(pms.parameters.billing_address_required).to.eql(true);",
									"    pm.expect(pms.parameters.billing_address_parameters.phone_number_required).to.eql(true);",
									"    pm.expect(pms.parameters.billing_address_parameters.format).to.eql(\"FULL\");",
									"    let tokenization_spec = pms.tokenization_specification;",
									"    pm.expect(tokenization_spec.type).to.eql(\"PAYMENT_GATEWAY\");",
									"    pm.expect(tokenization_spec.parameters.gateway.length).to.gt(0);",
									"    pm.expect(tokenization_spec.parameters.gateway_merchant_id.length).to.gt(0);",
									"    ",
									"    pm.expect(gpay.transaction_info.country_code).to.eql(\"US\");",
									"    pm.expect(gpay.transaction_info.currency_code).to.eql(\"USD\");",
									"    pm.expect(gpay.transaction_info.total_price_status).to.eql(\"Final\");",
									"    pm.expect(gpay.transaction_info.total_price).to.eql(\"10.00\");",
									"});",
									"",
									"pm.test(\"Test required fields for cybersource apple_pay\", function () {",
									"    // pm.expect(jsonData.session_token.length).to.eql(2);",
									"    let apay = jsonData.session_token[1];",
									"    pm.expect(apay.wallet_name).to.eql('apple_pay');",
									"    pm.expect(apay.payment_request_data.country_code).to.eql('US');",
									"    pm.expect(apay.payment_request_data.currency_code).to.eql('USD');",
									"    pm.expect(apay.payment_request_data.total.label).to.not.undefined;",
									"    pm.expect(apay.payment_request_data.total.type).to.eql('final');",
									"    pm.expect(apay.payment_request_data.total.amount).to.eql('10.00');",
									"    pm.expect(apay.payment_request_data.required_billing_contact_fields).to.eql(['postalAddress']);",
									"    pm.expect(apay.payment_request_data.required_shipping_contact_fields).to.eql([\"phone\",\"email\"]);",
									"    pm.expect(apay.sdk_next_action.next_action).to.eql('confirm');",
									"",
									"    //session token data validation in safari browser",
									"    pm.expect(apay.session_token_data.epoch_timestamp).is.gt(0);",
									"    pm.expect(apay.session_token_data.expires_at).is.gt(0);",
									"    pm.expect(apay.session_token_data.merchant_session_identifier.length).is.gt(0);",
									"    pm.expect(apay.session_token_data.nonce.length).is.gt(0);",
									"    pm.expect(apay.session_token_data.merchant_identifier.length).is.gt(0);",
									"    //here we expect the value given in x-merchant-domain header, SDK will send this while making /session call",
									"    pm.expect(apay.session_token_data.domain_name).is.eq('www-newtis.mobile.flowbirdapp.com');",
									"    pm.expect(apay.session_token_data.display_name.length).is.gt(0);",
									"    pm.expect(apay.session_token_data.signature.length).is.gt(0);",
									"    pm.expect(apay.session_token_data.operational_analytics_identifier.length).is.gt(0);",
									"    pm.expect(apay.session_token_data.retries).is.eq(0);",
									"    pm.expect(apay.session_token_data.psp_id.length).is.gt(0);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "*/*"
							},
							{
								"key": "accept-language",
								"value": "en-GB,en-US;q=0.9,en;q=0.8"
							},
							{
								"key": "api-key",
								"value": "pk_snd_4c986c1a9a5b4dc995210efba787badc"
							},
							{
								"key": "content-type",
								"value": "application/json"
							},
							{
								"key": "sec-ch-ua-mobile",
								"value": "?0"
							},
							{
								"key": "sec-ch-ua-platform",
								"value": "\"macOS\""
							},
							{
								"key": "sec-fetch-dest",
								"value": "empty"
							},
							{
								"key": "sec-fetch-mode",
								"value": "cors"
							},
							{
								"key": "sec-fetch-site",
								"value": "same-origin"
							},
							{
								"key": "user-agent",
								"value": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36"
							},
							{
								"key": "x-browser-name",
								"value": "Safari"
							},
							{
								"key": "x-browser-version",
								"value": "127.0.0"
							},
							{
								"key": "x-client-platform",
								"value": "web"
							},
							{
								"key": "x-client-version",
								"value": "0.91.7"
							},
							{
								"key": "x-merchant-domain",
								"value": "www-newtis.mobile.flowbirdapp.com"
							},
							{
								"key": "x-payment-confirm-source",
								"value": "sdk"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_id\": \"{{payment_id}}\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"wallets\": [],\n    \"delayed_session_token\": false\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/session_tokens",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								"session_tokens"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Use billing address from payment method during subsequent payment",
			"item": [
				{
					"name": "BO: Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// Response body should have \"customer_id\"",
									"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
									"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have a minimum length of \"1\" for \"customer_id\"",
									"if (jsonData?.customer_id) {",
									"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
									"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
									"})};",
									"",
									"",
									"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
									"if (jsonData?.customer_id) {",
									"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
									"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"First customer\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
					},
					"response": []
				},
				{
					"name": "BO: Save a payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 dffdg\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"payment_type\": \"new_mandate\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    },\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "BO: Customer books slot without billing address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_payment_method\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_payment_method'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_payment_method\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": false,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"setup_future_usage\": \"off_session\",\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "BO: List all payment methods against a customer id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/customers/:customer_id/mandates - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Response Validation",
									"const schema = {\"type\":\"array\",\"items\":{\"type\":\"object\",\"description\":\"Mandate Payment Create Response\",\"required\":[\"mandate_id\",\"status\",\"payment_method_id\"],\"properties\":{\"mandate_id\":{\"type\":\"string\",\"description\":\"The unique id corresponding to the mandate.\\n\",\"example\":\"mandate_end38934n12s923d0\"},\"status\":{\"type\":\"string\",\"description\":\"The status of the mandate, which indicates whether it can be used to initiate a payment.\",\"enum\":[\"active\",\"inactive\",\"pending\",\"revoked\"],\"example\":\"active\"},\"type\":{\"type\":\"string\",\"description\":\"The type of the mandate. (i) single_use refers to one-time mandates and (ii) multi-user refers to multiple payments.\",\"enum\":[\"multi_use\",\"single_use\"],\"default\":\"multi_use\",\"example\":\"multi_use\"},\"payment_method_id\":{\"type\":\"string\",\"description\":\"The id corresponding to the payment method.\",\"example\":\"pm_end38934n12s923d0\"},\"payment_method\":{\"type\":\"string\",\"description\":\"The type of payment method use for the payment.\\n\",\"enum\":[\"card\",\"payment_container\",\"bank_transfer\",\"bank_debit\",\"pay_later\",\"upi\",\"netbanking\"],\"example\":\"card\"},\"card\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"last4_digits\":{\"type\":\"string\",\"description\":\"The last four digits of the case which could be displayed to the end user for identification.\",\"example\":\"xxxxxxxxxxxx4242\"},\"card_exp_month\":{\"type\":\"string\",\"description\":\"The expiry month for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"10\"},\"card_exp_year\":{\"type\":\"string\",\"description\":\"Expiry year for the card\",\"maxLength\":2,\"minLength\":2,\"example\":\"25\"},\"card_holder_name\":{\"type\":\"string\",\"description\":\"The name of card holder\",\"maxLength\":255,\"example\":\"Arun Raj\"},\"card_token\":{\"type\":\"string\",\"description\":\"The token provided against a user's saved card. The token would be valid for 15 minutes.\",\"minLength\":30,\"maxLength\":30,\"example\":\"tkn_78892490hfh3r834rd\"},\"scheme\":{\"type\":\"string\",\"description\":\"The card scheme network for the particular card\",\"example\":\"MASTER\"},\"issuer_country\":{\"type\":\"string\",\"description\":\"The country code in in which the card was issued\",\"minLength\":2,\"maxLength\":2,\"example\":\"US\"},\"card_fingerprint\":{\"type\":\"string\",\"description\":\"A unique identifier alias to identify a particular card.\",\"minLength\":30,\"maxLength\":30,\"example\":\"fpt_78892490hfh3r834rd\"}}},\"customer_acceptance\":{\"description\":\"The card identifier information to be displayed on the user interface\",\"type\":\"object\",\"properties\":{\"accepted_at\":{\"description\":\"A timestamp (ISO 8601 code) that determines when the refund was created.\",\"type\":\"string\",\"format\":\"date-time\"},\"online\":{\"type\":\"object\",\"description\":\"If this is a Mandate accepted online, this hash contains details about the online acceptance.\",\"properties\":{\"ip_address\":{\"type\":\"string\",\"description\":\"The IP address from which the Mandate was accepted by the customer.\",\"example\":\"127.0.0.1\"},\"user_agent\":{\"type\":\"string\",\"description\":\"The user agent of the browser from which the Mandate was accepted by the customer.\",\"example\":\"device\"}}},\"acceptance_type\":{\"type\":\"string\",\"description\":\"The type of customer acceptance information included with the Mandate. One of online or offline.\",\"enum\":[\"online\",\"offline\"],\"example\":\"online\"}}}}}}",
									"",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"let paymentToken = null;",
									"",
									"for (let method of jsonData.customer_payment_methods) {",
									"    if (method.payment_token) {",
									"        paymentToken = method.payment_token;",
									"        break;",
									"    }",
									"}",
									"if (paymentToken) {",
									"   pm.collectionVariables.set(\"payment_token\", paymentToken);",
									"   console.log(\"- use {{payment_token}} as collection variable for value\",paymentToken);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_token}}, as paymentToken is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/payment_methods?client_secret={{client_secret}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								"payment_methods"
							],
							"query": [
								{
									"key": "client_secret",
									"value": "{{client_secret}}"
								}
							]
						},
						"description": "To list the all the mandates for a customer"
					},
					"response": []
				},
				{
					"name": "Hyperswitch SDK: Payments - Confirm with payment token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{pub_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							},
							{
								"key": "publishable_key",
								"value": "pk_snd_8798c6a9114646f8b970b93ad5765ddf",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"payment_method\": \"card\",\n    \"client_secret\": \"{{client_secret}}\",\n    \"payment_token\": \"{{payment_token}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id/confirm",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id",
								"confirm"
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "This API is to confirm the payment request and foward payment to the payment processor. This API provides more granular control upon when the API is forwarded to the payment processor. Alternatively you can confirm the payment within the Payments-Create API"
					},
					"response": []
				}
			]
		},
		{
			"name": "Psync shoudn't fail when PM or customer deleted",
			"item": [
				{
					"name": "BO: Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// Response body should have \"customer_id\"",
									"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
									"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have a minimum length of \"1\" for \"customer_id\"",
									"if (jsonData?.customer_id) {",
									"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
									"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
									"})};",
									"",
									"",
									"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
									"if (jsonData?.customer_id) {",
									"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
									"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"First customer\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
					},
					"response": []
				},
				{
					"name": "BO: Save a payment method",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.payment_method_id) {",
									"   pm.collectionVariables.set(\"payment_method_id\", jsonData.payment_method_id);",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_id' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have \"mandate_data\"",
									"pm.test(\"[POST]::/payments - Content check if 'mandate_data' exists\", function() {",
									"   pm.expect((typeof jsonData.mandate_data !== \"undefined\")).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"no_three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 dffdg\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"payment_type\": \"new_mandate\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    },\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				},
				{
					"name": "BO: Delete PaymentMethod",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payment_methods/:id/detach - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payment_methods/:id/detach - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/payment_methods/:payment_method_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payment_methods",
								":payment_method_id"
							],
							"variable": [
								{
									"key": "payment_method_id",
									"value": "{{payment_method_id}}"
								}
							]
						},
						"description": "Detaches a PaymentMethod object from a Customer."
					},
					"response": []
				},
				{
					"name": "BO: Delete Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payment_methods/:id/detach - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payment_methods/:id/detach - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/customers/:customer_id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers",
								":customer_id"
							],
							"variable": [
								{
									"key": "customer_id",
									"value": "{{customer_id}}"
								}
							]
						},
						"description": "Detaches a PaymentMethod object from a Customer."
					},
					"response": []
				},
				{
					"name": "BO: Payments retrieve should not fail after above deletion",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[GET]::/payments/:id - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[GET]::/payments/:id - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[GET]::/payments/:id - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.mandate_id) {",
									"   pm.collectionVariables.set(\"mandate_id\", jsonData.mandate_id);",
									"   console.log(\"- use {{mandate_id}} as collection variable for value\",jsonData.mandate_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{mandate_id}}, as jsonData.mandate_id is undefined.');",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"succeeded\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'succeeded'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"})};",
									"",
									"pm.test(\"[POST]::/payments - check customer values\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"succeeded\");",
									"  pm.expect(jsonData.customer.id).to.not.null;",
									"  pm.expect(jsonData.customer.name).to.eql('Redacted');",
									"  pm.expect(jsonData.customer.email).to.eql('Redacted');",
									"  pm.expect(jsonData.customer.phone).to.eql('Redacted');",
									"  pm.expect(jsonData.customer.phone_country_code).to.eql('Redacted');",
									"})",
									"",
									"pm.test(\"[POST]::/payments - payment methods details should not be lost as they are already in attempt table\", function() {",
									"  pm.expect(jsonData.payment_token).to.not.null;",
									"  pm.expect(jsonData.payment_method).to.eql(\"card\");",
									"  pm.expect(jsonData.payment_method_data).is.not.null;",
									"  pm.expect(jsonData.payment_method_data.card.last4).is.eql('1111');",
									"  pm.expect(jsonData.payment_method_data.card.card_type).is.eql('CREDIT');",
									"  pm.expect(jsonData.payment_method_data.card.card_network).is.eql('Visa');",
									"  pm.expect(jsonData.payment_method_data.card.card_issuer).is.eql('JP Morgan');",
									"  pm.expect(jsonData.payment_method_data.card.card_issuing_country).is.eql('INDIA');",
									"  pm.expect(jsonData.payment_method_data.card.card_isin).is.eql('411111');",
									"  pm.expect(jsonData.payment_method_data.card.card_exp_month).is.eql('03');",
									"  pm.expect(jsonData.payment_method_data.card.card_exp_year).is.eql('2030');",
									"})",
									"",
									"pm.test(\"[POST]::/payments - address should be deleted\", function() {",
									"  pm.expect(jsonData.billing).to.not.null;",
									"  pm.expect(jsonData.billing.address).to.not.null;",
									"  pm.expect(jsonData.billing.address.city).to.eql('Redacted');",
									"  pm.expect(jsonData.billing.address.line1).to.eql('Redacted');",
									"  pm.expect(jsonData.billing.address.line2).to.eql('Redacted');",
									"  pm.expect(jsonData.billing.address.line3).to.eql('Redacted');",
									"  pm.expect(jsonData.billing.address.zip).to.eql('Redacted');",
									"  pm.expect(jsonData.billing.address.state).to.eql('Redacted');",
									"  pm.expect(jsonData.billing.address.first_name).to.eql('Redacted');",
									"  pm.expect(jsonData.billing.address.last_name).to.eql('Redacted');",
									"})"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments",
								":id"
							],
							"query": [
								{
									"key": "client_secret",
									"value": "pay_1sIy7sTMzo8ibi00iOQB_secret_8wB9Wlfsd02oi0olPjvg",
									"disabled": true
								}
							],
							"variable": [
								{
									"key": "id",
									"value": "{{payment_id}}"
								}
							]
						},
						"description": "To retrieve the properties of a Payment. This may be used to get the status of a previously initiated payment or next action for an ongoing payment"
					},
					"response": []
				}
			]
		},
		{
			"name": "Netcetra Payment",
			"item": [
				{
					"name": "BO: Create Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/customers - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/customers - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/customers - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// Response body should have \"customer_id\"",
									"pm.test(\"[POST]::/customers - Content check if 'customer_id' exists\", function() {",
									"   pm.expect((typeof jsonData.customer_id !== \"undefined\")).to.be.true;",
									"});",
									"",
									"// Response body should have a minimum length of \"1\" for \"customer_id\"",
									"if (jsonData?.customer_id) {",
									"pm.test(\"[POST]::/customers - Content check if value of 'customer_id' has a minimum length of '1'\", function() {",
									"  pm.expect(jsonData.customer_id.length).is.at.least(1);",
									"})};",
									"",
									"",
									"// pm.collectionVariables - Set customer_id as variable for jsonData.customer_id",
									"if (jsonData?.customer_id) {",
									"   pm.collectionVariables.set(\"customer_id\", jsonData.customer_id);",
									"   console.log(\"- use {{customer_id}} as collection variable for value\",jsonData.customer_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{customer_id}}, as jsonData.customer_id is undefined.');",
									"};",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"email\": \"guest@example.com\",\n    \"name\": \"John Doe\",\n    \"phone\": \"999999999\",\n    \"phone_country_code\": \"+65\",\n    \"description\": \"First customer\",\n    \"metadata\": {\n        \"udf1\": \"value1\",\n        \"new_customer\": \"true\",\n        \"login_date\": \"2019-09-10T10:11:12Z\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/customers",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"customers"
							]
						},
						"description": "Create a customer object and store the customer details to be reused for future payments. Incase the customer already exists in the system, this API will respond with the customer details."
					},
					"response": []
				},
				{
					"name": "BO: Create a netcetra payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Validate status 2xx ",
									"pm.test(\"[POST]::/payments - Status code is 2xx\", function () {",
									"   pm.response.to.be.success;",
									"});",
									"",
									"// Validate if response header has matching content-type",
									"pm.test(\"[POST]::/payments - Content-Type is application/json\", function () {",
									"   pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
									"});",
									"",
									"// Validate if response has JSON Body ",
									"pm.test(\"[POST]::/payments - Response has JSON Body\", function () {",
									"    pm.response.to.have.jsonBody();",
									"});",
									"",
									"// Set response object as internal variable",
									"let jsonData = {};",
									"try {jsonData = pm.response.json();}catch(e){}",
									"",
									"// pm.collectionVariables - Set payment_id as variable for jsonData.payment_id",
									"if (jsonData?.payment_id) {",
									"   pm.collectionVariables.set(\"payment_id\", jsonData.payment_id);",
									"   console.log(\"- use {{payment_id}} as collection variable for value\",jsonData.payment_id);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{payment_id}}, as jsonData.payment_id is undefined.');",
									"};",
									"",
									"",
									"// pm.collectionVariables - Set mandate_id as variable for jsonData.mandate_id",
									"if (jsonData?.payment_method_id) {",
									"   pm.collectionVariables.set(\"payment_method_id\", jsonData.payment_method_id);",
									"};",
									"",
									"// pm.collectionVariables - Set client_secret as variable for jsonData.client_secret",
									"if (jsonData?.client_secret) {",
									"   pm.collectionVariables.set(\"client_secret\", jsonData.client_secret);",
									"   console.log(\"- use {{client_secret}} as collection variable for value\",jsonData.client_secret);",
									"} else {",
									"   console.log('INFO - Unable to assign variable {{client_secret}}, as jsonData.client_secret is undefined.');",
									"};",
									"",
									"",
									"// Response body should have value \"requires_customer_action\" for \"status\"",
									"if (jsonData?.status) {",
									"pm.test(\"[POST]::/payments - Content check if value for 'status' matches 'requires_customer_action'\", function() {",
									"  pm.expect(jsonData.status).to.eql(\"requires_customer_action\");",
									"})};",
									"",
									"// Response body should have \"mandate_id\"",
									"pm.test(\"[POST]::/payments - Validate netcetra next action\", function() {",
									"   pm.expect(jsonData.next_action).to.be.not.null;",
									"   pm.expect(jsonData.next_action.type).to.eql('three_ds_invoke');",
									"   pm.expect(jsonData.next_action.three_ds_data.three_ds_authentication_url).to.not.null;",
									"   pm.expect(jsonData.next_action.three_ds_data.three_ds_authorize_url).to.not.null;",
									"   pm.expect(jsonData.next_action.three_ds_data.three_ds_method_details.three_ds_method_key).to.eql('threeDSMethodData');",
									"   pm.expect(jsonData.next_action.three_ds_data.three_ds_method_details.three_ds_method_data_submission).to.eql(true);",
									"   pm.expect(jsonData.next_action.three_ds_data.three_ds_method_details.three_ds_method_data.length).gt(0);",
									"   pm.expect(jsonData.next_action.three_ds_data.three_ds_method_details.three_ds_method_url).eql('https://3dss-pp-prev-ndm.acquiring.test.netcetera.com/acs/3ds-method');",
									"   pm.expect(jsonData.next_action.three_ds_data.poll_config).to.not.null;",
									"   pm.expect(jsonData.next_action.three_ds_data.poll_config.poll_id).to.not.null;",
									"   pm.expect(jsonData.next_action.three_ds_data.poll_config.delay_in_secs).to.eql(2);",
									"   pm.expect(jsonData.next_action.three_ds_data.poll_config.frequency).to.eql(5);",
									"",
									"   pm.expect(jsonData.next_action.three_ds_data.message_version).to.eql('2.2.0');",
									"   pm.expect(jsonData.next_action.three_ds_data.directory_server_id).to.not.null;",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "apikey",
							"apikey": [
								{
									"key": "value",
									"value": "{{api_key}}",
									"type": "string"
								},
								{
									"key": "key",
									"value": "api-key",
									"type": "string"
								},
								{
									"key": "in",
									"value": "header",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/json"
							},
							{
								"key": "x-feature",
								"value": "router-custom-be",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"amount\": 1000,\n    \"currency\": \"USD\",\n    \"confirm\": true,\n    \"capture_method\": \"automatic\",\n    \"authentication_type\": \"three_ds\",\n    \"customer_id\": \"{{customer_id}}\",\n    \"profile_id\": \"{{profile_id}}\",\n    \"email\": \"hyperswitch_sdk_demo_id@gmail.com\",\n    \"description\": \"Hello this is description\",\n    \"shipping\": {\n        \"address\": {\n            \"state\": \"zsaasdas\",\n            \"city\": \"Banglore\",\n            \"country\": \"US\",\n            \"line1\": \"sdsdfsdf\",\n            \"line2\": \"hsgdbhd\",\n            \"line3\": \"alsksoe\",\n            \"zip\": \"571201\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"billing\": {\n        \"address\": {\n            \"line1\": \"1467\",\n            \"line2\": \"Harrison Street\",\n            \"line3\": \"Harrison Street\",\n            \"city\": \"San Fransico\",\n            \"state\": \"California\",\n            \"zip\": \"94122\",\n            \"country\": \"US\",\n            \"first_name\": \"joseph\",\n            \"last_name\": \"Doe\"\n        },\n        \"phone\": {\n            \"number\": \"123456789\",\n            \"country_code\": \"+1\"\n        }\n    },\n    \"setup_future_usage\": \"off_session\",\n    \"payment_method\": \"card\",\n    \"payment_method_type\": \"credit\",\n    \"payment_method_data\": {\n        \"card\": {\n            \"card_number\": \"4111111111111111\",\n            \"card_exp_month\": \"03\",\n            \"card_exp_year\": \"2030\",\n            \"card_holder_name\": \"CLBRW1 dffdg\",\n            \"card_cvc\": \"737\"\n        }\n    },\n    \"payment_type\": \"new_mandate\",\n    \"customer_acceptance\": {\n        \"acceptance_type\": \"offline\",\n        \"accepted_at\": \"1963-05-03T04:07:52.723Z\",\n        \"online\": {\n            \"ip_address\": \"125.0.0.1\",\n            \"user_agent\": \"amet irure esse\"\n        }\n    },\n    \"request_external_three_ds_authentication\": true,\n    \"order_details\": null\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/payments",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "To process a payment you will have to create a payment, attach a payment method and confirm. Depending on the user journey you wish to achieve, you may opt to all the steps in a single request or in a sequence of API request using following APIs: (i) Payments - Update, (ii) Payments - Confirm, and (iii) Payments - Capture"
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "api-key",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{api_key}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://sandbox.hyperswitch.io",
			"type": "string"
		},
		{
			"key": "admin_api_key",
			"value": "test_admin",
			"type": "string"
		},
		{
			"key": "api_key",
			"value": "snd_8U3n37vGHRgftTJYJ16OqEIXrsnJKnZTJ93o2oat1PSoG7ERAIaSvy34ihVxznb4",
			"type": "string"
		},
		{
			"key": "merchant_id",
			"value": "merchant_1723211169",
			"type": "string"
		},
		{
			"key": "pub_key",
			"value": "pk_snd_4c986c1a9a5b4dc995210efba787badc",
			"type": "string"
		},
		{
			"key": "customer_id",
			"value": "cus_vAQHH4aZ3wYWm0NJK00P"
		},
		{
			"key": "payment_id",
			"value": "pay_y4saAdgfzlPqkiCDKmqo"
		},
		{
			"key": "client_secret",
			"value": "pay_y4saAdgfzlPqkiCDKmqo_secret_ifPUnzhwK7nNzAnlyzOR"
		},
		{
			"key": "mandate_id",
			"value": ""
		},
		{
			"key": "payment_token",
			"value": "token_HveMzCnIFFXvu7lf5Wtz"
		},
		{
			"key": "merchant_connector_id",
			"value": "mca_su2qV9XuaNskQmS5H8Hd"
		},
		{
			"key": "payment_method_id",
			"value": "pm_wBYqKDWfGVG8n9ISTMTR"
		},
		{
			"key": "last_used_at",
			"value": "2024-07-29T09:19:31.003Z"
		},
		{
			"key": "gpay_payload",
			"value": "{\n    \"google_pay\": {\n        \"type\": \"CARD\",\n        \"description\": \"SuccessfulAuth: Visa •••• 1000\",\n        \"info\": {\n            \"assurance_details\": {\n                \"account_verified\": true,\n                \"card_holder_authenticated\": false\n            },\n            \"billing_address\": {\n                \"address1\": \"1600 Amphitheatre Parkway\",\n                \"address2\": \"\",\n                \"address3\": \"\",\n                \"administrative_area\": \"CA\",\n                \"country_code\": \"US\",\n                \"locality\": \"Mountain View\",\n                \"name\": \"Card Holder Name\",\n                \"phone_number\": \"6505555555\",\n                \"postal_code\": \"94043\",\n                \"sorting_code\": \"\"\n            },\n            \"card_details\": \"1000\",\n            \"card_network\": \"VISA\"\n        },\n        \"tokenization_data\": {\n            \"token\": \"{\\\"signature\\\":\\\"MEQCICawJ+3ae54tGJW0qqm4SlHHZmX9DyKp+yRlLKpGJc4zAiBlCpGTQLCSlJ9Svk8TztkfTPGrxopnixQx3Xx+lL5K6w\\\\u003d\\\\u003d\\\",\\\"protocolVersion\\\":\\\"ECv1\\\",\\\"signedMessage\\\":\\\"{\\\\\\\"encryptedMessage\\\\\\\":\\\\\\\"n6rGX8c1hnzSSgfJyJ7mMQb/78AshYJlMvEhbrxDDUq5HXDT1FKDc09IpWIDmfzpowuC6EdbWksB1vc7pHg2LxbK71rrAyhgsUF1dBTnVyp+IYwW3/NAqYT15+NFtb3pGwE/oByc075M2tqGa03J0BSqmsehkcRJtRdss3ayI+Wcis5WwKF0jTJs4h76G8WDbjSnhCE0Oo6U3kCLmoWQoyEBn6fy8rOOjJtQSjwkrR0+coVx43pxzqeoYd9kwzWHm01c4NbPZTGEYy1viD9u7uiO5pMnfF7Ou+BTZgttq5JdrSltgsHEHnA4UXXrk62lpWgHpnoZNoBJddBsCWu7cImpRXaNSaerACmY8C3uKMXVO1HhfcryQOYZkGSrrxPZ+zMycAy8uh1s3igT6ABfe8dYAl7bfVFVPaVkdSY3SRiGuw\\\\\\\\u003d\\\\\\\\u003d\\\\\\\",\\\\\\\"ephemeralPublicKey\\\\\\\":\\\\\\\"BIPl9UyQT2hMDhmoI8O1tzd7w2Ws+j8lknr3ikYwKapaKhoOBnPfZCAPHlNU893XR5Ka6S/trWaw9IcsEnRmrhc\\\\\\\\u003d\\\\\\\",\\\\\\\"tag\\\\\\\":\\\\\\\"lcHpaK3yEoF0e+jXSxB84bJ9VWjuIOefIaHne611hyg\\\\\\\\u003d\\\\\\\"}\\\"}\",\n            \"type\": \"PAYMENT_GATEWAY\"\n        }\n    }\n}",
			"type": "string"
		},
		{
			"key": "profile_id",
			"value": "pro_icGw7d7WWkgE0eM4WlMZ",
			"type": "string"
		},
		{
			"key": "camit_enabled_profile",
			"value": "pro_9QJjOjK9BbQjveK4p9hG",
			"type": "string"
		},
		{
			"key": "x-tenant-id",
			"value": "public",
			"type": "string"
		},
		{
			"key": "tenant_id",
			"value": "public"
		}
	]
}